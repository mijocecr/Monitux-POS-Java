/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.monituxpos.Ventanas;

import com.monituxpos.Clases.Kardex;
import com.monituxpos.Clases.Miniatura_Producto;
import com.monituxpos.Clases.MonituxDBContext;
import com.monituxpos.Clases.Producto;
import com.monituxpos.Clases.SelectorCantidad;
import com.monituxpos.Clases.Util;
import static com.monituxpos.Ventanas.V_Factura_Venta.listaDeItems;
import static com.monituxpos.Ventanas.V_Factura_Venta.selectoresCantidad;
import static com.monituxpos.Ventanas.V_Menu_Principal.getAcceso_Usuario;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.Persistence;
import jakarta.persistence.TypedQuery;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Miguel Cerrato
 */
public class V_Inventario extends javax.swing.JPanel {

      public int Secuencial_Empresa=V_Menu_Principal.getSecuencial_Empresa();
      public int Secuencial_Usuario=V_Menu_Principal.getSecuencial_Usuario();
      public String Modo;
    
    /**
     * Creates new form V_Inventario
     */
    public V_Inventario() {
        initComponents();
        
        Util.llenarComboProveedor(jComboBox1, Secuencial_Empresa);
        Util.llenar_Combo_Categoria(jComboBox2, Secuencial_Empresa);
        Modo_Cuadricula();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menu_contextual = new javax.swing.JPopupMenu();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        contenedor = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox<>();
        jTextField1 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        fecha_txt = new javax.swing.JFormattedTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jComboBox4 = new javax.swing.JComboBox<>();
        jButton11 = new javax.swing.JButton();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        icono_carga = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lista_tabla = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        kardex_tabla = new javax.swing.JTable();
        jLabel14 = new javax.swing.JLabel();

        jMenu1.setText("Imagen");

        jMenuItem1.setText("Local");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Web");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Hacer Foto");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        menu_contextual.add(jMenu1);

        jMenuItem7.setText("Comentario");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        menu_contextual.add(jMenuItem7);

        jMenu3.setText("Producto");

        jMenuItem4.setText("Agregar Unidades");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem4);

        jMenuItem5.setText("Retirar Unidades");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem5);
        jMenu3.add(jSeparator1);

        jMenuItem6.setText("Ver Producto");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem6);

        menu_contextual.add(jMenu3);

        jMenuItem8.setText("Ampliar");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        menu_contextual.add(jMenuItem8);

        jMenuItem9.setText("Exportar a Excel");

        setBackground(new java.awt.Color(44, 117, 255));
        setPreferredSize(new java.awt.Dimension(847, 609));
        setLayout(null);

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Inventario");
        jLabel1.setOpaque(true);
        add(jLabel1);
        jLabel1.setBounds(0, 0, 870, 50);

        jScrollPane1.setBackground(new java.awt.Color(35, 32, 40));
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setHorizontalScrollBar(null);

        contenedor.setBackground(new java.awt.Color(35, 32, 45));
        contenedor.setAutoscrolls(true);
        contenedor.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                contenedorMouseMoved(evt);
            }
        });
        contenedor.setLayout(new java.awt.GridBagLayout());
        jScrollPane1.setViewportView(contenedor);

        add(jScrollPane1);
        jScrollPane1.setBounds(6, 162, 840, 400);

        jButton1.setBackground(new java.awt.Color(44, 117, 255));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/box_down.png"))); // NOI18N
        jButton1.setText("<html><b>Nuevo</b><br><i>Producto</i></html>");
        jButton1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1);
        jButton1.setBounds(10, 60, 68, 90);

        jButton2.setBackground(new java.awt.Color(44, 117, 255));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/application_view_tile.png"))); // NOI18N
        jButton2.setText("<html><b>Cuadricula</b></html>");
        jButton2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2);
        jButton2.setBounds(120, 60, 68, 90);

        jButton3.setBackground(new java.awt.Color(44, 117, 255));
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/application_view_list.png"))); // NOI18N
        jButton3.setText("<html><b>Lista</b></html>");
        jButton3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        add(jButton3);
        jButton3.setBounds(190, 60, 68, 90);

        jButton4.setBackground(new java.awt.Color(44, 117, 255));
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/btninventario.png"))); // NOI18N
        jButton4.setText("<html><b>Kardex</b></html>");
        jButton4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        add(jButton4);
        jButton4.setBounds(260, 60, 68, 90);

        jButton5.setBackground(new java.awt.Color(44, 117, 255));
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/information.png"))); // NOI18N
        jButton5.setText("<html><b>Servicios</b></html>");
        jButton5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        add(jButton5);
        jButton5.setBounds(350, 60, 68, 90);

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Buscar Por:");
        add(jLabel5);
        jLabel5.setBounds(10, 570, 70, 20);

        add(jComboBox3);
        jComboBox3.setBounds(80, 570, 120, 26);

        jTextField1.setToolTipText("<html>Para efectuar la busqueda debe presionar Enter. <br>El filtro se restablecera al presionar Enter si la casilla esta vacia.</br></html>");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });
        add(jTextField1);
        jTextField1.setBounds(210, 570, 120, 26);

        jPanel1.setBackground(new java.awt.Color(44, 117, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jPanel1.setVisible(false);

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Proveedor:");
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Categoria:");

        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });
        jComboBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox1MouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jComboBox1MouseReleased(evt);
            }
        });

        jButton7.setText("1 Sem");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("1 Mes");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton6.setText("1 Año");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Vence en:");

        jButton9.setText("Ver");
        jButton9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton9MouseClicked(evt);
            }
        });
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("Ver");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        fecha_txt.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        fecha_txt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yyyy"))));
        fecha_txt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fecha_txt.setToolTipText("Ingrese fecha con formato \"dd/MM/yyyy\" y presione Enter para consultar.");
        fecha_txt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fecha_txtActionPerformed(evt);
            }
        });
        fecha_txt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fecha_txtKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel2)
                .addGap(6, 6, 6)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jLabel3)
                .addGap(6, 6, 6)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel4)
                .addGap(6, 6, 6)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(fecha_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel3))
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel4))
                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fecha_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        add(jPanel1);
        jPanel1.setBounds(460, 60, 380, 90);

        jPanel2.setBackground(new java.awt.Color(44, 117, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jPanel2.setVisible(false);

        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("De:");

        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("A:");

        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Codigo:");

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Entrada", "Salida" }));

        jButton11.setBackground(new java.awt.Color(0, 255, 51));
        jButton11.setText("Ejecutar");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jTextField3.setToolTipText("Ingrese fecha con formato \"dd/MM/yyyy\" para consultar.");

        jTextField4.setToolTipText("Ingrese fecha con formato \"dd/MM/yyyy\" para consultar.");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jComboBox4, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jButton11)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jLabel12))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(14, 14, 14))
        );

        add(jPanel2);
        jPanel2.setBounds(430, 60, 410, 90);

        jLabel6.setBackground(new java.awt.Color(35, 32, 45));
        jLabel6.setForeground(new java.awt.Color(255, 255, 0));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Existencia Minima");
        jLabel6.setOpaque(true);
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel6MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel6MouseExited(evt);
            }
        });
        add(jLabel6);
        jLabel6.setBounds(390, 570, 107, 26);

        jLabel7.setBackground(new java.awt.Color(35, 32, 45));
        jLabel7.setForeground(new java.awt.Color(255, 0, 0));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Agotados");
        jLabel7.setOpaque(true);
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel7MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel7MouseExited(evt);
            }
        });
        add(jLabel7);
        jLabel7.setBounds(510, 570, 63, 26);

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/arrow_refresh.png"))); // NOI18N
        jLabel8.setToolTipText("Refrescar Datos.");
        jLabel8.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel8MouseClicked(evt);
            }
        });
        add(jLabel8);
        jLabel8.setBounds(780, 570, 32, 32);

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Modo: Cuadricula");
        add(jLabel9);
        jLabel9.setBounds(620, 570, 108, 30);

        icono_carga.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gifs/spinner1-r.gif"))); // NOI18N
        icono_carga.setVisible(false);
        add(icono_carga);
        icono_carga.setBounds(810, 570, 32, 32);

        lista_tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        lista_tabla.setToolTipText("Doble Click Para Ver el Producto.");
        lista_tabla.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lista_tabla.setVisible(false);
        jScrollPane2.setViewportView(lista_tabla);

        add(jScrollPane2);
        jScrollPane2.setBounds(10, 160, 830, 400);

        kardex_tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        kardex_tabla.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jScrollPane3.setViewportView(kardex_tabla);

        add(jScrollPane3);
        jScrollPane3.setBounds(10, 160, 830, 400);

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/page_excel.png"))); // NOI18N
        jLabel14.setToolTipText("Exportar a Excel");
        jLabel14.setVisible(false);
        jLabel14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel14MouseClicked(evt);
            }
        });
        add(jLabel14);
        jLabel14.setBounds(740, 570, 30, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void contenedorMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_contenedorMouseMoved
        // TODO add your handling code here:
       
    }//GEN-LAST:event_contenedorMouseMoved

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        
         V_Producto form = new V_Producto();
         if (Modo=="Cuadricula"){
            form.setOnProductoEditado(() -> Modo_Cuadricula());
         }
         if (Modo=="Lista"){
         
              form.setOnProductoEditado(() -> Modo_Lista());
              
         
         }
         
          if (Modo=="Kardex"){
         
              //form.setOnProductoEditado(() -> cargarItems_Cuadricula());
         
         }
         
         
            form.setVisible(true);
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    
   public void Filtrar_Lista_Fecha(int secuencialEmpresa, String fechaTexto, JTable tabla) {
    icono_carga.setVisible(true);

    new SwingWorker<List<Producto>, Void>() {
        EntityManager em = null;

        @Override
        protected List<Producto> doInBackground() {
            try {
                em = MonituxDBContext.getEntityManager();
                if (em == null || !em.isOpen()) {
                    throw new IllegalStateException("EntityManager no disponible.");
                }

                String jpql = "SELECT p FROM Producto p " +
                              "WHERE p.Secuencial_Empresa = :empresa " +
                              "AND p.Fecha_Caducidad = :fecha";

                TypedQuery<Producto> query = em.createQuery(jpql, Producto.class);
                query.setParameter("empresa", secuencialEmpresa);
                query.setParameter("fecha", fechaTexto); // Asegúrate que el formato coincida con el tipo en BD

                return query.getResultList();

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(tabla,
                    "Error al consultar productos por fecha de caducidad: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
                return Collections.emptyList();
            }
        }

        @Override
        protected void done() {
            try {
                List<Producto> productos = get();

                DefaultTableModel modelo = new DefaultTableModel(new Object[]{
                    "S", "Codigo", "Descripción", "Marca", "Existencia", "E. mínima",
                    "C. Barra", "C. Fabricante", "F. Vencimiento", "P. Costo", "P. Venta"
                }, 0) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };

                for (Producto producto : productos) {
                    modelo.addRow(new Object[]{
                        producto.getSecuencial(),
                        producto.getCodigo(),
                        producto.getDescripcion(),
                        producto.getMarca(),
                        producto.getCantidad(),
                        producto.getExistencia_Minima(),
                        producto.getCodigo_Barra(),
                        producto.getCodigo_Fabricante(),
                        producto.getFecha_Caducidad(),
                        producto.getPrecio_Costo(),
                        producto.getPrecio_Venta()
                    });
                }

                tabla.setModel(modelo);
                tabla.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                for (MouseListener ml : tabla.getMouseListeners()) {
                    tabla.removeMouseListener(ml);
                }

                tabla.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mousePressed(MouseEvent e) {
                        if (SwingUtilities.isLeftMouseButton(e)) {
                            int fila = tabla.rowAtPoint(e.getPoint());
                            if (fila != -1) {
                                tabla.setRowSelectionInterval(fila, fila);
                            }
                        }
                    }

                    @Override
                    public void mouseClicked(MouseEvent e) {
                        if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {
                            int fila = tabla.rowAtPoint(e.getPoint());
                            if (fila != -1) {
                                tabla.setRowSelectionInterval(fila, fila);
                                String codigo = tabla.getValueAt(fila, 1).toString();

                                Producto productoSeleccionado = productos.stream()
                                    .filter(p -> p.getCodigo().equals(codigo))
                                    .findFirst()
                                    .orElse(null);

                                if (productoSeleccionado != null) {
                                    V_Producto form = new V_Producto(false, productoSeleccionado);
                                    form.setOnProductoEditado(() -> cargarItems_Cuadricula());
                                    form.setVisible(true);
                                }
                            }
                        }
                    }
                });

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(tabla,
                    "Error al procesar productos por fecha: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            } finally {
                if (em != null && em.isOpen()) {
                    em.close();
                }
                icono_carga.setVisible(false);
            }
        }
    }.execute();
}

    
    
   public void Filtrar_Fecha_Cuadricula(int secuencialEmpresa, String fechaTexto, JPanel contenedor) {
    icono_carga.setVisible(true);
    contenedor.setLayout(new GridBagLayout());
    contenedor.removeAll();

    new SwingWorker<List<Producto>, Void>() {
        EntityManager em = null;

        @Override
        protected List<Producto> doInBackground() {
            try {
                em = MonituxDBContext.getEntityManager();
                if (em == null || !em.isOpen()) {
                    throw new IllegalStateException("EntityManager no disponible.");
                }

                String jpql = "SELECT p FROM Producto p " +
                              "WHERE p.Secuencial_Empresa = :empresa " +
                              "AND p.Fecha_Caducidad = :fecha";

                TypedQuery<Producto> query = em.createQuery(jpql, Producto.class);
                query.setParameter("empresa", secuencialEmpresa);
                query.setParameter("fecha", fechaTexto); // Asegúrate de que el formato coincida con el tipo en BD

                return query.getResultList();

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(contenedor,
                    "Error al consultar productos por fecha de caducidad: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
                return new ArrayList<>();
            }
        }

        @Override
        protected void done() {
            try {
                List<Producto> productos = get();

                GridBagConstraints gbc = new GridBagConstraints();
                gbc.insets = new Insets(5, 5, 5, 5);
                gbc.fill = GridBagConstraints.NONE;
                gbc.anchor = GridBagConstraints.NORTHWEST;

                int col = 0, row = 0;

                for (Producto producto : productos) {
                    Miniatura_Producto miniatura = new Miniatura_Producto(producto, false);
                    miniatura.setPreferredSize(new Dimension(120, 170));

                    miniatura.addMouseListener(new MouseAdapter() {
                        @Override
                        public void mouseClicked(MouseEvent e) {
                            if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {
                                Producto productoSeleccionado = miniatura.producto;
                                V_Kardex kardex = new V_Kardex(
                                    productoSeleccionado.getProducto().getSecuencial(),
                                    productoSeleccionado.getProducto().getCodigo()
                                );
                                kardex.setVisible(true);
                                kardex.setLocationRelativeTo(null);
                            }
                        }

                        @Override
                        public void mousePressed(MouseEvent e) {
                            if (e.isPopupTrigger()) {
                                menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                            }
                        }

                        @Override
                        public void mouseReleased(MouseEvent e) {
                            if (e.isPopupTrigger()) {
                                menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                            }
                        }
                    });

                    String comentario = miniatura.cargarComentario();
                    String descripcion = miniatura.producto.getDescripcion();
                    miniatura.setToolTipText("<html><b>" + descripcion + "</b><br>" + (comentario != null ? comentario : "") + "</html>");

                    gbc.gridx = col;
                    gbc.gridy = row;
                    contenedor.add(miniatura, gbc);

                    col++;
                    if (col == 6) {
                        col = 0;
                        row++;
                    }
                }

                contenedor.revalidate();
                contenedor.repaint();

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(contenedor,
                    "Error al procesar productos por fecha: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            } finally {
                if (em != null && em.isOpen()) {
                    em.close();
                }
                icono_carga.setVisible(false);
            }
        }
    }.execute();
}

    public void Modo_Cuadricula() {
    try {
        jLabel14.setVisible(false);
        jLabel9.setText("Modo: Cuadricula");

        jScrollPane2.setVisible(false);
        lista_tabla.setVisible(false);
        jScrollPane3.setVisible(false);
        jScrollPane1.setVisible(true);

        jLabel6.setVisible(true);
        jLabel7.setVisible(true);
        contenedor.setVisible(true);
        kardex_tabla.setVisible(false);

        Modo = "Cuadricula";

        jComboBox3.removeAllItems();
        jComboBox3.addItem("Codigo");
        jComboBox3.addItem("Codigo_Barra");
        jComboBox3.addItem("Codigo_Fabricante");
        jComboBox3.addItem("Descripcion");
        jComboBox3.addItem("Fecha_Caducidad");
        jComboBox3.addItem("Marca");
        jComboBox3.setSelectedIndex(0);

        jButton5.setVisible(true);
        jPanel1.setVisible(true);
        jPanel2.setVisible(false);

        icono_carga.setVisible(true);

        new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() {
                EntityManager em = null;
                try {
                    em = MonituxDBContext.getEntityManager();
                    if (em != null && em.isOpen()) {
                        cargarItems_Cuadricula(Secuencial_Empresa, contenedor);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "❌ Error en modo cuadricula: " + e.getMessage());
                    e.printStackTrace();
                } finally {
                    if (em != null && em.isOpen()) {
                        try {
                            em.close();
                        } catch (Exception ignored) {
                            // Silenciado
                        }
                    }
                }
                return null;
            }

            @Override
            protected void done() {
                icono_carga.setVisible(false);
                contenedor.revalidate();
                contenedor.repaint();
            }
        }.execute();

    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "❌ Error general en Modo_Cuadricula: " + e.getMessage());
        e.printStackTrace();
    }
}

    
    
//  public void Modo_Cuadricula() {
//    try {
//        jLabel14.setVisible(false);
//        jLabel9.setText("Modo: Cuadricula");
//
//        jScrollPane2.setVisible(false);
//        lista_tabla.setVisible(false);
//        jScrollPane3.setVisible(false);
//        jScrollPane1.setVisible(true);
//
//        jLabel6.setVisible(true);
//        jLabel7.setVisible(true);
//        contenedor.setVisible(true);
//        kardex_tabla.setVisible(false);
//
//        Modo = "Cuadricula";
//
//        jComboBox3.removeAllItems();
//        jComboBox3.addItem("Codigo");
//        jComboBox3.addItem("Codigo_Barra");
//        jComboBox3.addItem("Codigo_Fabricante");
//        jComboBox3.addItem("Descripcion");
//        jComboBox3.addItem("Fecha_Caducidad");
//        jComboBox3.addItem("Marca");
//        jComboBox3.setSelectedIndex(0);
//
//        jButton5.setVisible(true);
//        jPanel1.setVisible(true);
//        jPanel2.setVisible(false);
//
//        icono_carga.setVisible(true);
//
//        new SwingWorker<Void, Void>() {
//            @Override
//            protected Void doInBackground() {
//                EntityManager em = null;
//                try {
//                    em = MonituxDBContext.getEntityManager();
//                    if (em != null && em.isOpen()) {
//                        cargarItems_Cuadricula(Secuencial_Empresa, contenedor);
//                    }
//                } catch (Exception ignored) {
//                    // Error silenciado
//                } finally {
//                    if (em != null && em.isOpen()) {
//                        try {
//                            em.close();
//                        } catch (Exception ignored) {
//                            // Error al cerrar silenciado
//                        }
//                    }
//                }
//                return null;
//            }
//
//            @Override
//            protected void done() {
//                icono_carga.setVisible(false);
//                contenedor.revalidate();
//                contenedor.repaint();
//            }
//        }.execute();
//
//    } catch (Exception ignored) {
//        // Error silenciado
//    }
//}

    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

         
    Modo_Cuadricula();

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    
    public void Modo_Lista() {
    try {
        jLabel14.setVisible(true);
        jLabel9.setText("Modo: Lista");

        contenedor.setVisible(false);
        kardex_tabla.setVisible(false);
        jScrollPane3.setVisible(false);
        jScrollPane2.setVisible(true);
        jScrollPane1.setVisible(false);
        lista_tabla.setVisible(true);

        jLabel6.setVisible(true);
        jLabel7.setVisible(true);

        Modo = "Lista";

        jComboBox3.removeAllItems();
        jComboBox3.addItem("Codigo");
        jComboBox3.addItem("Codigo_Barra");
        jComboBox3.addItem("Codigo_Fabricante");
        jComboBox3.addItem("Descripcion");
        jComboBox3.addItem("Fecha_Caducidad");
        jComboBox3.addItem("Marca");
        jComboBox3.setSelectedIndex(0);

        jButton5.setVisible(true);
        jPanel1.setVisible(true);
        jPanel2.setVisible(false);

        icono_carga.setVisible(true);

        new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() {
                try {
                    cargar_Items_Lista(Secuencial_Empresa, lista_tabla); // EM gestionado internamente
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(lista_tabla,
                        "Error al cargar lista: " + e.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE);
                    e.printStackTrace();
                }
                return null;
            }

            @Override
            protected void done() {
                icono_carga.setVisible(false);
                lista_tabla.revalidate();
                lista_tabla.repaint();
            }
        }.execute();

    } catch (Exception e) {
        JOptionPane.showMessageDialog(null,
            "Error general en Modo_Lista: " + e.getMessage(),
            "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
}

    
    
//public void Modo_Lista() {
//    try {
//        jLabel14.setVisible(true);
//        jLabel9.setText("Modo: Lista");
//
//        contenedor.setVisible(false);
//        kardex_tabla.setVisible(false);
//        jScrollPane3.setVisible(false);
//        jScrollPane2.setVisible(true);
//        jScrollPane1.setVisible(false);
//        lista_tabla.setVisible(true);
//
//        jLabel6.setVisible(true);
//        jLabel7.setVisible(true);
//
//        Modo = "Lista";
//
//        jComboBox3.removeAllItems();
//        jComboBox3.addItem("Codigo");
//        jComboBox3.addItem("Codigo_Barra");
//        jComboBox3.addItem("Codigo_Fabricante");
//        jComboBox3.addItem("Descripcion");
//        jComboBox3.addItem("Fecha_Caducidad");
//        jComboBox3.addItem("Marca");
//        jComboBox3.setSelectedIndex(0);
//
//        jButton5.setVisible(true);
//        jPanel1.setVisible(true);
//        jPanel2.setVisible(false);
//
//        icono_carga.setVisible(true);
//
//        new SwingWorker<Void, Void>() {
//            @Override
//            protected Void doInBackground() {
//                EntityManager em = null;
//                try {
//                    em = MonituxDBContext.getEntityManager();
//                    if (em != null && em.isOpen()) {
//                        cargar_Items_Lista(Secuencial_Empresa, lista_tabla);
//                    }
//                } catch (Exception ignored) {
//                    // Error silenciado
//                } finally {
//                    if (em != null && em.isOpen()) {
//                        try {
//                            em.close();
//                        } catch (Exception ignored) {
//                            // Error al cerrar silenciado
//                        }
//                    }
//                }
//                return null;
//            }
//
//            @Override
//            protected void done() {
//                icono_carga.setVisible(false);
//                lista_tabla.revalidate();
//                lista_tabla.repaint();
//            }
//        }.execute();
//
//    } catch (Exception ignored) {
//        // Error silenciado
//    }
//}
//  
    
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

       
        
        Modo_Lista();

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    
    public void Filtrar_Kardex_Proveedor(int secuencialEmpresa, int secuencialProveedor, JTable tabla) {
    icono_carga.setVisible(true);

    new SwingWorker<List<Kardex>, Void>() {
        EntityManager em = null;

        @Override
        protected List<Kardex> doInBackground() {
            try {
                em = MonituxDBContext.getEntityManager();
                if (em == null || !em.isOpen()) {
                    throw new IllegalStateException("EntityManager no disponible.");
                }

                return em.createQuery(
                    "SELECT k FROM Kardex k JOIN FETCH k.producto p WHERE k.Secuencial_Empresa = :empresa AND p.Secuencial_Proveedor = :proveedor",
                    Kardex.class)
                    .setParameter("empresa", secuencialEmpresa)
                    .setParameter("proveedor", secuencialProveedor)
                    .getResultList();

            } catch (Exception ex) {
                SwingUtilities.invokeLater(() ->
                    JOptionPane.showMessageDialog(tabla,
                        "Error al consultar Kardex por proveedor: " + ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE)
                );
                ex.printStackTrace();
                return Collections.emptyList();
            }
        }

        @Override
        protected void done() {
            try {
                List<Kardex> kardexList = get();

                DefaultTableModel modelo = new DefaultTableModel(new Object[]{
                    "S", "Codigo", "Fecha", "Descripción", "Movimiento", "Cantidad",
                    "Costo", "Costo Total", "Venta", "Venta Total", "Saldo",
                    "Sec. Producto", "Sec. Empresa"
                }, 0) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };

                for (Kardex k : kardexList) {
                    Producto p = k.getProducto();
                    modelo.addRow(new Object[]{
                        k.getSecuencial(),
                        p != null ? p.getCodigo() : "",
                        k.getFecha(),
                        k.getDescripcion(),
                        k.getMovimiento(),
                        k.getCantidad(),
                        Util.redondear(k.getCosto()),
                        Util.redondear(k.getCosto_Total()),
                        Util.redondear(k.getVenta()),
                        Util.redondear(k.getVenta_Total()),
                        Util.redondear(k.getSaldo()),
                        k.getSecuencial_Producto(),
                        k.getSecuencial_Empresa()
                    });
                }

                tabla.setModel(modelo);
                tabla.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                for (MouseListener ml : tabla.getMouseListeners()) {
                    tabla.removeMouseListener(ml);
                }

                tabla.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mousePressed(MouseEvent e) {
                        if (SwingUtilities.isLeftMouseButton(e)) {
                            int fila = tabla.rowAtPoint(e.getPoint());
                            if (fila != -1) {
                                tabla.setRowSelectionInterval(fila, fila);
                            }
                        }
                    }

                    @Override
                    public void mouseClicked(MouseEvent e) {
                        if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {
                            int fila = tabla.rowAtPoint(e.getPoint());
                            if (fila != -1) {
                                tabla.setRowSelectionInterval(fila, fila);

                                int secuencial = Integer.parseInt(tabla.getValueAt(fila, 0).toString());
                                Kardex seleccionado = kardexList.stream()
                                    .filter(k -> k.getSecuencial() == secuencial)
                                    .findFirst()
                                    .orElse(null);

                                if (seleccionado != null && seleccionado.getProducto() != null) {
                                    V_Kardex kardex = new V_Kardex(
                                        seleccionado.getProducto().getSecuencial(),
                                        seleccionado.getProducto().getCodigo()
                                    );
                                    kardex.setVisible(true);
                                    kardex.setLocationRelativeTo(null);
                                }
                            }
                        }
                    }
                });

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(tabla,
                    "Error al procesar Kardex por proveedor: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            } finally {
                if (em != null && em.isOpen()) {
                    em.close();
                }
                icono_carga.setVisible(false);
            }
        }
    }.execute();
}

    public void Modo_Kardex() {
    try {
        jLabel14.setVisible(true);
        jLabel6.setVisible(false);
        jLabel7.setVisible(false);
        jLabel9.setText("Modo: Kardex");

        jComboBox3.removeAllItems();
        jComboBox3.addItem("Codigo");
        jComboBox3.addItem("Descripcion");
        jComboBox3.addItem("Fecha");
        jComboBox3.setSelectedIndex(0);

        jPanel2.setVisible(true);
        jPanel1.setVisible(false);
        jButton5.setVisible(false);
        Modo = "Kardex";

        jScrollPane3.setVisible(true);
        jScrollPane1.setVisible(false);
        jScrollPane2.setVisible(false);
        lista_tabla.setVisible(false);
        contenedor.setVisible(false);
        kardex_tabla.setVisible(true);

        icono_carga.setVisible(true);

        new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() {
                EntityManager em = null;
                try {
                    em = MonituxDBContext.getEntityManager();
                    if (em != null && em.isOpen()) {
                        // Ejecutar mientras el EntityManager está activo
                        cargar_Items_Kardex(Secuencial_Empresa, kardex_tabla);
                    }
                } catch (Exception ignored) {
                    // Error silenciado
                } finally {
                    if (em != null && em.isOpen()) {
                        try {
                            em.close();
                        } catch (Exception ignored) {
                            // Error al cerrar silenciado
                        }
                    }
                }
                return null;
            }

            @Override
            protected void done() {
                icono_carga.setVisible(false);
                kardex_tabla.revalidate();
                kardex_tabla.repaint();
            }
        }.execute();

    } catch (Exception ignored) {
        // Error silenciado
    }
}

    
    
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        Modo_Kardex();
        
        
        
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

      icono_carga.setVisible(true);

    new SwingWorker<Void, Void>() {
        EntityManager em = null;

        @Override
        protected Void doInBackground() {
            try {
                em = MonituxDBContext.getEntityManager();
                if (em == null || !em.isOpen()) {
                    throw new IllegalStateException("EntityManager no disponible.");
                }

                switch (Modo) {
                    case "Cuadricula":
                        Filtrar_Servicios_Cuadricula(Secuencial_Empresa, contenedor);
                        break;
                    case "Lista":
                        Filtrar_Servicios_Lista(Secuencial_Empresa, lista_tabla);
                        break;
                    default:
                        SwingUtilities.invokeLater(() ->
                            JOptionPane.showMessageDialog(null,
                                "Modo visual no reconocido: " + Modo,
                                "Error", JOptionPane.ERROR_MESSAGE)
                        );
                        break;
                }

            } catch (Exception ex) {
                SwingUtilities.invokeLater(() ->
                    JOptionPane.showMessageDialog(null,
                        "Error al filtrar servicios: " + ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE)
                );
                ex.printStackTrace();
            } finally {
                if (em != null && em.isOpen()) {
                    em.close();
                }
            }
            return null;
        }

        @Override
        protected void done() {
            icono_carga.setVisible(false);
            if ("Cuadricula".equals(Modo)) {
                contenedor.revalidate();
                contenedor.repaint();
            } else if ("Lista".equals(Modo)) {
                lista_tabla.revalidate();
                lista_tabla.repaint();
            }
        }
    }.execute();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jLabel8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseClicked

        
        
             
        switch (Modo) {
        
            case "Cuadricula":
                
     Modo_Cuadricula();
              
              break;
              
            case "Lista":
                
                Modo_Lista();
                
                break;
                
                
            case "Kardex":
                Modo_Kardex();
                
                break;
                
            default:
                
                break;
        
        
        
        }
            
        
        
        
        
        
      
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel8MouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

        Component invocador = menu_contextual.getInvoker();
        if (invocador instanceof Miniatura_Producto) {
            Miniatura_Producto miniatura = (Miniatura_Producto) invocador;

            miniatura.actualizarImagenLocal();
            cargarItems_Cuadricula();

        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed

        Component invocador = menu_contextual.getInvoker();
        if (invocador instanceof Miniatura_Producto) {
            Miniatura_Producto miniatura = (Miniatura_Producto) invocador;

            miniatura.actualizarImagenWeb();
            cargarItems_Cuadricula();

        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed

//        Component invocador = menu_contextual.getInvoker();
//        if (invocador instanceof Miniatura_Producto) {
//            Miniatura_Producto miniatura = (Miniatura_Producto) invocador;
//
//            miniatura.actualizarImagenCamara();
//            cargarItems_Cuadricula();
//
//        }



Component invocador = menu_contextual.getInvoker();
if (invocador instanceof Miniatura_Producto) {
    Miniatura_Producto miniatura = (Miniatura_Producto) invocador;

    new SwingWorker<Void, Void>() {
        @Override
        protected Void doInBackground() throws Exception {
            miniatura.actualizarImagenCamara(); // operación pesada
            return null;
        }

        @Override
        protected void done() {
            cargarItems_Cuadricula(); // actualizar UI después
        }
    }.execute();
}



        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed

        Component invocador = menu_contextual.getInvoker();
        if (invocador instanceof Miniatura_Producto) {
            Miniatura_Producto miniatura = (Miniatura_Producto) invocador;

            miniatura.Agregar_Comentario(miniatura.getComentario());

            cargarItems_Cuadricula();

        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed

        Component invocador = menu_contextual.getInvoker();
        if (invocador instanceof Miniatura_Producto) {
            Miniatura_Producto miniatura = (Miniatura_Producto) invocador;

            miniatura.actualizarProductoAgregarUnidades();

            cargarItems_Cuadricula();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed

        Component invocador = menu_contextual.getInvoker();
        if (invocador instanceof Miniatura_Producto) {
            Miniatura_Producto miniatura = (Miniatura_Producto) invocador;

            miniatura.actualizarProductoRetirarUnidades();

            cargarItems_Cuadricula();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed

        Component invocador = menu_contextual.getInvoker();
        if (invocador instanceof Miniatura_Producto) {
            Miniatura_Producto miniatura = (Miniatura_Producto) invocador;

            V_Producto form = new V_Producto(false, miniatura.producto);
            form.setOnProductoEditado(() -> cargarItems_Cuadricula());
            form.setVisible(true);
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed

        Component invocador = menu_contextual.getInvoker();
        if (invocador instanceof Miniatura_Producto) {
            Miniatura_Producto miniatura = (Miniatura_Producto) invocador;

            byte[] datosImagen = miniatura.producto.getImagen(); // suponiendo que devuelve byte[]

            ImageIcon imagen = null;

            if (datosImagen != null && datosImagen.length > 0) {
                try {
                    ByteArrayInputStream bis = new ByteArrayInputStream(datosImagen);
                    BufferedImage bufferedImage = ImageIO.read(bis);
                    imagen = new ImageIcon(bufferedImage);
                } catch (IOException e) {
                    e.printStackTrace();
                    // Puedes cargar una imagen por defecto si falla
                    imagen = new ImageIcon(getClass().getResource("/icons/no-image-icon-10.png"));
                }
            } else {
                // Imagen por defecto si no hay datos
                imagen = new ImageIcon(getClass().getResource("/icons/no-image-icon-10.png"));
            }

            try {
                V_Vista_Ampliada v_Vista_Ampliada = new V_Vista_Ampliada(miniatura.producto.getCodigo(),
                    miniatura.producto.getDescripcion(), imagen);
                v_Vista_Ampliada.setVisible(true);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error al cargar la vista ampliada.", "Error", JOptionPane.ERROR_MESSAGE);
            }

        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jComboBox1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox1MouseClicked

        Util.llenarComboProveedor(jComboBox1, Secuencial_Empresa);
        
        
      
        
        
        
        
    
    }//GEN-LAST:event_jComboBox1MouseClicked

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased

        
        
    if (evt.getKeyCode() != KeyEvent.VK_ENTER) return;

    icono_carga.setVisible(true);

    new SwingWorker<Void, Void>() {
        EntityManager em = null;

        @Override
        protected Void doInBackground() {
            try {
                em = MonituxDBContext.getEntityManager();
                if (em == null || !em.isOpen()) {
                    throw new IllegalStateException("EntityManager no disponible.");
                }

                switch (Modo) {
                    case "Cuadricula":
                        cargarItemsFiltrados_Cuadricula(Secuencial_Empresa, jComboBox3, jTextField1, contenedor);
                        break;

                    case "Lista":
                        cargar_ItemsFiltrados_Lista(Secuencial_Empresa, jComboBox3, jTextField1, lista_tabla);
                        break;

                    case "Kardex":
                        cargar_ItemsFiltrados_Kardex(Secuencial_Empresa, jComboBox3, jTextField1, kardex_tabla);
                        break;

                    default:
                        SwingUtilities.invokeLater(() ->
                            JOptionPane.showMessageDialog(null,
                                "Modo visual no reconocido: " + Modo,
                                "Error", JOptionPane.ERROR_MESSAGE)
                        );
                        break;
                }

            } catch (Exception ex) {
                SwingUtilities.invokeLater(() ->
                    JOptionPane.showMessageDialog(null,
                        "Error al cargar vista: " + ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE)
                );
                ex.printStackTrace();
            } finally {
                if (em != null && em.isOpen()) {
                    em.close();
                }
            }
            return null;
        }

        @Override
        protected void done() {
            icono_carga.setVisible(false);

            switch (Modo) {
                case "Cuadricula":
                    contenedor.revalidate();
                    contenedor.repaint();
                    break;
                case "Lista":
                    lista_tabla.revalidate();
                    lista_tabla.repaint();
                    break;
                case "Kardex":
                    kardex_tabla.revalidate();
                    kardex_tabla.repaint();
                    break;
            }
        }
    }.execute();


        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1KeyReleased

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged

      
        
        


        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked


        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel2MouseClicked

    private void jComboBox1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox1MouseReleased


        
    

        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1MouseReleased

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed

icono_carga.setVisible(true);

    new SwingWorker<Void, Void>() {
        EntityManager em = null;

        @Override
        protected Void doInBackground() {
            try {
                em = MonituxDBContext.getEntityManager();
                if (em == null || !em.isOpen()) {
                    throw new IllegalStateException("EntityManager no disponible.");
                }

                String seleccionado = (String) jComboBox1.getSelectedItem();
                if (seleccionado == null || !seleccionado.contains("-")) {
                    throw new IllegalArgumentException("Formato de proveedor inválido.");
                }

                int secuencialProveedor = Integer.parseInt(seleccionado.split("-")[0].trim());

                switch (Modo) {
                    case "Cuadricula":
                        Filtrar_Cuadricula_Proveedor(Secuencial_Empresa, secuencialProveedor, contenedor);
                        break;

                    case "Lista":
                        Filtrar_Lista_Proveedor(Secuencial_Empresa, secuencialProveedor, lista_tabla);
                        break;

                    case "Kardex":
                        Filtrar_Kardex_Proveedor(Secuencial_Empresa, secuencialProveedor, kardex_tabla);
                        break;

                    default:
                        SwingUtilities.invokeLater(() ->
                            JOptionPane.showMessageDialog(null,
                                "Modo visual no reconocido: " + Modo,
                                "Error", JOptionPane.ERROR_MESSAGE)
                        );
                        break;
                }

            } catch (Exception ex) {
                SwingUtilities.invokeLater(() ->
                    JOptionPane.showMessageDialog(null,
                        "Error al filtrar por proveedor: " + ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE)
                );
                ex.printStackTrace();
            } finally {
                if (em != null && em.isOpen()) {
                    em.close();
                }
            }
            return null;
        }

        @Override
        protected void done() {
            icono_carga.setVisible(false);

            switch (Modo) {
                case "Cuadricula":
                    contenedor.revalidate();
                    contenedor.repaint();
                    break;
                case "Lista":
                    lista_tabla.revalidate();
                    lista_tabla.repaint();
                    break;
                case "Kardex":
                    kardex_tabla.revalidate();
                    kardex_tabla.repaint();
                    break;
            }
        }
    }.execute();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed

       icono_carga.setVisible(true);

    new SwingWorker<Void, Void>() {
        EntityManager em = null;

        @Override
        protected Void doInBackground() {
            try {
                em = MonituxDBContext.getEntityManager();
                if (em == null || !em.isOpen()) {
                    throw new IllegalStateException("EntityManager no disponible.");
                }

                String seleccionado = (String) jComboBox2.getSelectedItem();
                if (seleccionado == null || !seleccionado.contains("-")) {
                    throw new IllegalArgumentException("Formato de categoría inválido.");
                }

                int secuencialCategoria = Integer.parseInt(seleccionado.split("-")[0].trim());

                switch (Modo) {
                    case "Cuadricula":
                        Filtrar_Cuadricula_Categoria(Secuencial_Empresa, secuencialCategoria, contenedor);
                        break;

                    case "Lista":
                        Filtrar_Lista_Categoria(Secuencial_Empresa, secuencialCategoria, lista_tabla);
                        break;

                    case "Kardex":
                        Filtrar_Kardex_Categoria(Secuencial_Empresa, secuencialCategoria, kardex_tabla);
                        break;

                    default:
                        SwingUtilities.invokeLater(() ->
                            JOptionPane.showMessageDialog(null,
                                "Modo visual no reconocido: " + Modo,
                                "Error", JOptionPane.ERROR_MESSAGE)
                        );
                        break;
                }

            } catch (Exception ex) {
                SwingUtilities.invokeLater(() ->
                    JOptionPane.showMessageDialog(null,
                        "Error al filtrar por categoría: " + ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE)
                );
                ex.printStackTrace();
            } finally {
                if (em != null && em.isOpen()) {
                    em.close();
                }
            }
            return null;
        }

        @Override
        protected void done() {
            icono_carga.setVisible(false);

            switch (Modo) {
                case "Cuadricula":
                    contenedor.revalidate();
                    contenedor.repaint();
                    break;
                case "Lista":
                    lista_tabla.revalidate();
                    lista_tabla.repaint();
                    break;
                case "Kardex":
                    kardex_tabla.revalidate();
                    kardex_tabla.repaint();
                    break;
            }
        }
    }.execute();

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    
    public void Filtrar_Kardex_Categoria(int secuencialEmpresa, int secuencialCategoria, JTable tabla) {
    icono_carga.setVisible(true);

    new SwingWorker<List<Kardex>, Void>() {
        EntityManager em = null;

        @Override
        protected List<Kardex> doInBackground() {
            try {
                em = MonituxDBContext.getEntityManager();
                if (em == null || !em.isOpen()) {
                    throw new IllegalStateException("EntityManager no disponible.");
                }

                return em.createQuery(
                    "SELECT k FROM Kardex k JOIN FETCH k.producto p WHERE k.Secuencial_Empresa = :empresa AND p.Secuencial_Categoria = :categoria",
                    Kardex.class)
                    .setParameter("empresa", secuencialEmpresa)
                    .setParameter("categoria", secuencialCategoria)
                    .getResultList();

            } catch (Exception ex) {
                SwingUtilities.invokeLater(() ->
                    JOptionPane.showMessageDialog(tabla,
                        "Error al consultar Kardex por categoría: " + ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE)
                );
                ex.printStackTrace();
                return Collections.emptyList();
            }
        }

        @Override
        protected void done() {
            try {
                List<Kardex> kardexList = get();

                DefaultTableModel modelo = new DefaultTableModel(new Object[]{
                    "S", "Codigo", "Fecha", "Descripción", "Movimiento", "Cantidad",
                    "Costo", "Costo Total", "Venta", "Venta Total", "Saldo",
                    "Sec. Producto", "Sec. Empresa"
                }, 0) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };

                for (Kardex k : kardexList) {
                    Producto p = k.getProducto();
                    modelo.addRow(new Object[]{
                        k.getSecuencial(),
                        p != null ? p.getCodigo() : "",
                        k.getFecha(),
                        k.getDescripcion(),
                        k.getMovimiento(),
                        k.getCantidad(),
                        Util.redondear(k.getCosto()),
                        Util.redondear(k.getCosto_Total()),
                        Util.redondear(k.getVenta()),
                        Util.redondear(k.getVenta_Total()),
                        Util.redondear(k.getSaldo()),
                        k.getSecuencial_Producto(),
                        k.getSecuencial_Empresa()
                    });
                }

                tabla.setModel(modelo);
                tabla.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                for (MouseListener ml : tabla.getMouseListeners()) {
                    tabla.removeMouseListener(ml);
                }

                tabla.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mousePressed(MouseEvent e) {
                        if (SwingUtilities.isLeftMouseButton(e)) {
                            int fila = tabla.rowAtPoint(e.getPoint());
                            if (fila != -1) {
                                tabla.setRowSelectionInterval(fila, fila);
                            }
                        }
                    }

                    @Override
                    public void mouseClicked(MouseEvent e) {
                        if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {
                            int fila = tabla.rowAtPoint(e.getPoint());
                            if (fila != -1) {
                                tabla.setRowSelectionInterval(fila, fila);

                                int secuencial = Integer.parseInt(tabla.getValueAt(fila, 0).toString());
                                Kardex seleccionado = kardexList.stream()
                                    .filter(k -> k.getSecuencial() == secuencial)
                                    .findFirst()
                                    .orElse(null);

                                if (seleccionado != null && seleccionado.getProducto() != null) {
                                    V_Kardex kardex = new V_Kardex(
                                        seleccionado.getProducto().getSecuencial(),
                                        seleccionado.getProducto().getCodigo()
                                    );
                                    kardex.setVisible(true);
                                    kardex.setLocationRelativeTo(null);
                                }
                            }
                        }
                    }
                });

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(tabla,
                    "Error al procesar Kardex por categoría: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            } finally {
                if (em != null && em.isOpen()) {
                    em.close();
                }
                icono_carga.setVisible(false);
            }
        }
    }.execute();
}

    
    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked

        {
    icono_carga.setVisible(true);

    new SwingWorker<Void, Void>() {
        @Override
        protected Void doInBackground() {
            EntityManager em = null;
            try {
                em = MonituxDBContext.getEntityManager();
                if (em == null || !em.isOpen()) {
                    throw new IllegalStateException("EntityManager no disponible.");
                }

                switch (Modo) {
                    case "Cuadricula":
                        Filtrar_Existencia_Minima_Cuadricula(Secuencial_Empresa, contenedor);
                        break;

                    case "Lista":
                        Filtrar_Existencia_Minima_Lista(Secuencial_Empresa, lista_tabla);
                        break;

                    case "Kardex":
                        Filtrar_Existencia_Minima_Kardex(Secuencial_Empresa, kardex_tabla);
                        break;

                    default:
                        SwingUtilities.invokeLater(() ->
                            JOptionPane.showMessageDialog(null,
                                "Modo visual no reconocido: " + Modo,
                                "Error", JOptionPane.ERROR_MESSAGE)
                        );
                        break;
                }

            } catch (Exception ex) {
                SwingUtilities.invokeLater(() ->
                    JOptionPane.showMessageDialog(null,
                        "Error al cargar productos con existencia mínima: " + ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE)
                );
                ex.printStackTrace();
            } finally {
                if (em != null && em.isOpen()) {
                    try {
                        em.close();
                    } catch (Exception closeEx) {
                        System.err.println("⚠️ Error al cerrar EntityManager: " + closeEx.getMessage());
                    }
                }
            }
            return null;
        }

        @Override
        protected void done() {
            icono_carga.setVisible(false);

            switch (Modo) {
                case "Cuadricula":
                    contenedor.revalidate();
                    contenedor.repaint();
                    break;
                case "Lista":
                    lista_tabla.revalidate();
                    lista_tabla.repaint();
                    break;
                case "Kardex":
                    kardex_tabla.revalidate();
                    kardex_tabla.repaint();
                    break;
            }
        }
    }.execute();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel6MouseClicked

    public void Filtrar_Existencia_Minima_Kardex(int secuencialEmpresa, JTable tabla) {
    icono_carga.setVisible(true);

    new SwingWorker<List<Kardex>, Void>() {
        EntityManager em = null;

        @Override
        protected List<Kardex> doInBackground() {
            try {
                em = MonituxDBContext.getEntityManager();
                if (em == null || !em.isOpen()) {
                    throw new IllegalStateException("EntityManager no disponible.");
                }

                return em.createQuery(
                    "SELECT k FROM Kardex k JOIN FETCH k.producto p WHERE k.Secuencial_Empresa = :empresa AND k.Saldo <= p.Existencia_Minima",
                    Kardex.class)
                    .setParameter("empresa", secuencialEmpresa)
                    .getResultList();

            } catch (Exception ex) {
                SwingUtilities.invokeLater(() ->
                    JOptionPane.showMessageDialog(tabla,
                        "Error al consultar Kardex con existencia mínima: " + ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE)
                );
                ex.printStackTrace();
                return Collections.emptyList();
            }
        }

        @Override
        protected void done() {
            try {
                List<Kardex> kardexList = get();

                DefaultTableModel modelo = new DefaultTableModel(new Object[]{
                    "S", "Codigo", "Fecha", "Descripción", "Movimiento", "Cantidad",
                    "Costo", "Costo Total", "Venta", "Venta Total", "Saldo",
                    "Sec. Producto", "Sec. Empresa"
                }, 0) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };

                for (Kardex k : kardexList) {
                    Producto p = k.getProducto();
                    modelo.addRow(new Object[]{
                        k.getSecuencial(),
                        p != null ? p.getCodigo() : "",
                        k.getFecha(),
                        k.getDescripcion(),
                        k.getMovimiento(),
                        k.getCantidad(),
                        Util.redondear(k.getCosto()),
                        Util.redondear(k.getCosto_Total()),
                        Util.redondear(k.getVenta()),
                        Util.redondear(k.getVenta_Total()),
                        Util.redondear(k.getSaldo()),
                        k.getSecuencial_Producto(),
                        k.getSecuencial_Empresa()
                    });
                }

                tabla.setModel(modelo);
                tabla.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                for (MouseListener ml : tabla.getMouseListeners()) {
                    tabla.removeMouseListener(ml);
                }

                tabla.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mousePressed(MouseEvent e) {
                        if (SwingUtilities.isLeftMouseButton(e)) {
                            int fila = tabla.rowAtPoint(e.getPoint());
                            if (fila != -1) {
                                tabla.setRowSelectionInterval(fila, fila);
                            }
                        }
                    }

                    @Override
                    public void mouseClicked(MouseEvent e) {
                        if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {
                            int fila = tabla.rowAtPoint(e.getPoint());
                            if (fila != -1) {
                                tabla.setRowSelectionInterval(fila, fila);

                                int secuencial = Integer.parseInt(tabla.getValueAt(fila, 0).toString());
                                Kardex seleccionado = kardexList.stream()
                                    .filter(k -> k.getSecuencial() == secuencial)
                                    .findFirst()
                                    .orElse(null);

                                if (seleccionado != null && seleccionado.getProducto() != null) {
                                    V_Kardex kardex = new V_Kardex(
                                        seleccionado.getProducto().getSecuencial(),
                                        seleccionado.getProducto().getCodigo()
                                    );
                                    kardex.setVisible(true);
                                    kardex.setLocationRelativeTo(null);
                                }
                            }
                        }
                    }
                });

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(tabla,
                    "Error al procesar Kardex con existencia mínima: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            } finally {
                if (em != null && em.isOpen()) {
                    em.close();
                }
                icono_carga.setVisible(false);
            }
        }
    }.execute();
}

    
    
    
    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseClicked

    icono_carga.setVisible(true);

    new SwingWorker<Void, Void>() {
        @Override
        protected Void doInBackground() {
            EntityManager em = null;
            try {
                em = MonituxDBContext.getEntityManager();
                if (em == null || !em.isOpen()) {
                    throw new IllegalStateException("EntityManager no disponible.");
                }

                switch (Modo) {
                    case "Cuadricula":
                        Filtrar_Agotados_Cuadricula(Secuencial_Empresa, contenedor);
                        break;

                    case "Lista":
                        Filtrar_Agotados_Lista(Secuencial_Empresa, lista_tabla);
                        break;

                    case "Kardex":
                        Filtrar_Agotados_Kardex(Secuencial_Empresa, kardex_tabla);
                        break;

                    default:
                        SwingUtilities.invokeLater(() ->
                            JOptionPane.showMessageDialog(null,
                                "Modo visual no reconocido: " + Modo,
                                "Error", JOptionPane.ERROR_MESSAGE)
                        );
                        break;
                }

            } catch (Exception ex) {
                SwingUtilities.invokeLater(() ->
                    JOptionPane.showMessageDialog(null,
                        "Error al cargar productos agotados: " + ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE)
                );
                ex.printStackTrace();
            } finally {
                if (em != null && em.isOpen()) {
                    try {
                        em.close();
                    } catch (Exception closeEx) {
                        System.err.println("⚠️ Error al cerrar EntityManager: " + closeEx.getMessage());
                    }
                }
            }
            return null;
        }

        @Override
        protected void done() {
            icono_carga.setVisible(false);

            switch (Modo) {
                case "Cuadricula":
                    contenedor.revalidate();
                    contenedor.repaint();
                    break;
                case "Lista":
                    lista_tabla.revalidate();
                    lista_tabla.repaint();
                    break;
                case "Kardex":
                    kardex_tabla.revalidate();
                    kardex_tabla.repaint();
                    break;
            }
        }
    }.execute();
    }//GEN-LAST:event_jLabel7MouseClicked

    
    public void Filtrar_Agotados_Kardex(int secuencialEmpresa, JTable tabla) {
    icono_carga.setVisible(true);

    new SwingWorker<List<Kardex>, Void>() {
        EntityManager em = null;

        @Override
        protected List<Kardex> doInBackground() {
            try {
                em = MonituxDBContext.getEntityManager();
                if (em == null || !em.isOpen()) {
                    throw new IllegalStateException("EntityManager no disponible.");
                }

                return em.createQuery(
                    "SELECT k FROM Kardex k JOIN FETCH k.producto p WHERE k.Secuencial_Empresa = :empresa AND k.Saldo <= 0",
                    Kardex.class)
                    .setParameter("empresa", secuencialEmpresa)
                    .getResultList();

            } catch (Exception ex) {
                SwingUtilities.invokeLater(() ->
                    JOptionPane.showMessageDialog(tabla,
                        "Error al consultar productos agotados: " + ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE)
                );
                ex.printStackTrace();
                return Collections.emptyList();
            }
        }

        @Override
        protected void done() {
            try {
                List<Kardex> kardexList = get();

                DefaultTableModel modelo = new DefaultTableModel(new Object[]{
                    "S", "Codigo", "Fecha", "Descripción", "Movimiento", "Cantidad",
                    "Costo", "Costo Total", "Venta", "Venta Total", "Saldo",
                    "Sec. Producto", "Sec. Empresa"
                }, 0) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };

                for (Kardex k : kardexList) {
                    Producto p = k.getProducto();
                    modelo.addRow(new Object[]{
                        k.getSecuencial(),
                        p != null ? p.getCodigo() : "",
                        k.getFecha(),
                        k.getDescripcion(),
                        k.getMovimiento(),
                        k.getCantidad(),
                        Util.redondear(k.getCosto()),
                        Util.redondear(k.getCosto_Total()),
                        Util.redondear(k.getVenta()),
                        Util.redondear(k.getVenta_Total()),
                        Util.redondear(k.getSaldo()),
                        k.getSecuencial_Producto(),
                        k.getSecuencial_Empresa()
                    });
                }

                tabla.setModel(modelo);
                tabla.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                for (MouseListener ml : tabla.getMouseListeners()) {
                    tabla.removeMouseListener(ml);
                }

                tabla.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mousePressed(MouseEvent e) {
                        if (SwingUtilities.isLeftMouseButton(e)) {
                            int fila = tabla.rowAtPoint(e.getPoint());
                            if (fila != -1) {
                                tabla.setRowSelectionInterval(fila, fila);
                            }
                        }
                    }

                    @Override
                    public void mouseClicked(MouseEvent e) {
                        if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {
                            int fila = tabla.rowAtPoint(e.getPoint());
                            if (fila != -1) {
                                tabla.setRowSelectionInterval(fila, fila);

                                int secuencial = Integer.parseInt(tabla.getValueAt(fila, 0).toString());
                                Kardex seleccionado = kardexList.stream()
                                    .filter(k -> k.getSecuencial() == secuencial)
                                    .findFirst()
                                    .orElse(null);

                                if (seleccionado != null && seleccionado.getProducto() != null) {
                                    V_Kardex kardex = new V_Kardex(
                                        seleccionado.getProducto().getSecuencial(),
                                        seleccionado.getProducto().getCodigo()
                                    );
                                    kardex.setVisible(true);
                                    kardex.setLocationRelativeTo(null);
                                }
                            }
                        }
                    }
                });

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(tabla,
                    "Error al procesar productos agotados: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            } finally {
                if (em != null && em.isOpen()) {
                    em.close();
                }
                icono_carga.setVisible(false);
            }
        }
    }.execute();
}

    
    
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed

      icono_carga.setVisible(true);

    new SwingWorker<Void, Void>() {
        EntityManager em = null;

        @Override
        protected Void doInBackground() {
            try {
                em = MonituxDBContext.getEntityManager();
                if (em == null || !em.isOpen()) {
                    throw new IllegalStateException("EntityManager no disponible.");
                }

                LocalDate hoy = LocalDate.now();
                LocalDate fechaMas7 = hoy.plusDays(7);
                DateTimeFormatter formato = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                String fechaTexto = fechaMas7.format(formato);

                switch (Modo) {
                    case "Cuadricula":
                        Filtrar_Fecha_Cuadricula(Secuencial_Empresa, fechaTexto, contenedor);
                        break;

                    case "Lista":
                        Filtrar_Lista_Fecha(Secuencial_Empresa, fechaTexto, lista_tabla);
                        break;

                    case "Kardex":
                        Filtrar_Kardex_Fecha(Secuencial_Empresa, fechaTexto, kardex_tabla);
                        break;

                    default:
                        SwingUtilities.invokeLater(() ->
                            JOptionPane.showMessageDialog(null,
                                "Modo visual no reconocido: " + Modo,
                                "Error", JOptionPane.ERROR_MESSAGE)
                        );
                        break;
                }

            } catch (Exception ex) {
                SwingUtilities.invokeLater(() ->
                    JOptionPane.showMessageDialog(null,
                        "Error al filtrar por fecha: " + ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE)
                );
                ex.printStackTrace();
            } finally {
                if (em != null && em.isOpen()) {
                    em.close();
                }
            }
            return null;
        }

        @Override
        protected void done() {
            icono_carga.setVisible(false);

            switch (Modo) {
                case "Cuadricula":
                    contenedor.revalidate();
                    contenedor.repaint();
                    break;
                case "Lista":
                    lista_tabla.revalidate();
                    lista_tabla.repaint();
                    break;
                case "Kardex":
                    kardex_tabla.revalidate();
                    kardex_tabla.repaint();
                    break;
            }
        }
    }.execute();
    }//GEN-LAST:event_jButton7ActionPerformed

    
    public void Filtrar_Kardex_Fecha(int secuencialEmpresa, String fechaTexto, JTable tabla) {
    icono_carga.setVisible(true);

    new SwingWorker<List<Kardex>, Void>() {
        EntityManager em = null;

        @Override
        protected List<Kardex> doInBackground() {
            try {
                em = MonituxDBContext.getEntityManager();
                if (em == null || !em.isOpen()) {
                    throw new IllegalStateException("EntityManager no disponible.");
                }

                return em.createQuery(
                    "SELECT k FROM Kardex k JOIN FETCH k.producto p WHERE k.Secuencial_Empresa = :empresa AND FUNCTION('DATE_FORMAT', k.Fecha, '%d/%m/%Y') = :fecha",
                    Kardex.class)
                    .setParameter("empresa", secuencialEmpresa)
                    .setParameter("fecha", fechaTexto)
                    .getResultList();

            } catch (Exception ex) {
                SwingUtilities.invokeLater(() ->
                    JOptionPane.showMessageDialog(tabla,
                        "Error al consultar Kardex por fecha: " + ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE)
                );
                ex.printStackTrace();
                return Collections.emptyList();
            }
        }

        @Override
        protected void done() {
            try {
                List<Kardex> kardexList = get();

                DefaultTableModel modelo = new DefaultTableModel(new Object[]{
                    "S", "Codigo", "Fecha", "Descripción", "Movimiento", "Cantidad",
                    "Costo", "Costo Total", "Venta", "Venta Total", "Saldo",
                    "Sec. Producto", "Sec. Empresa"
                }, 0) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };

                for (Kardex k : kardexList) {
                    Producto p = k.getProducto();
                    modelo.addRow(new Object[]{
                        k.getSecuencial(),
                        p != null ? p.getCodigo() : "",
                        k.getFecha(),
                        k.getDescripcion(),
                        k.getMovimiento(),
                        k.getCantidad(),
                        Util.redondear(k.getCosto()),
                        Util.redondear(k.getCosto_Total()),
                        Util.redondear(k.getVenta()),
                        Util.redondear(k.getVenta_Total()),
                        Util.redondear(k.getSaldo()),
                        k.getSecuencial_Producto(),
                        k.getSecuencial_Empresa()
                    });
                }

                tabla.setModel(modelo);
                tabla.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                for (MouseListener ml : tabla.getMouseListeners()) {
                    tabla.removeMouseListener(ml);
                }

                tabla.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mousePressed(MouseEvent e) {
                        if (SwingUtilities.isLeftMouseButton(e)) {
                            int fila = tabla.rowAtPoint(e.getPoint());
                            if (fila != -1) {
                                tabla.setRowSelectionInterval(fila, fila);
                            }
                        }
                    }

                    @Override
                    public void mouseClicked(MouseEvent e) {
                        if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {
                            int fila = tabla.rowAtPoint(e.getPoint());
                            if (fila != -1) {
                                tabla.setRowSelectionInterval(fila, fila);

                                int secuencial = Integer.parseInt(tabla.getValueAt(fila, 0).toString());
                                Kardex seleccionado = kardexList.stream()
                                    .filter(k -> k.getSecuencial() == secuencial)
                                    .findFirst()
                                    .orElse(null);

                                if (seleccionado != null && seleccionado.getProducto() != null) {
                                    V_Kardex kardex = new V_Kardex(
                                        seleccionado.getProducto().getSecuencial(),
                                        seleccionado.getProducto().getCodigo()
                                    );
                                    kardex.setVisible(true);
                                    kardex.setLocationRelativeTo(null);
                                }
                            }
                        }
                    }
                });

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(tabla,
                    "Error al procesar Kardex por fecha: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            } finally {
                if (em != null && em.isOpen()) {
                    em.close();
                }
                icono_carga.setVisible(false);
            }
        }
    }.execute();
}

    
    
    
    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed

{
    icono_carga.setVisible(true);

    new SwingWorker<Void, Void>() {
        EntityManager em = null;

        @Override
        protected Void doInBackground() {
            try {
                em = MonituxDBContext.getEntityManager();
                if (em == null || !em.isOpen()) {
                    throw new IllegalStateException("EntityManager no disponible.");
                }

                LocalDate hoy = LocalDate.now();
                LocalDate fechaMas1Mes = hoy.plusMonths(1);
                DateTimeFormatter formato = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                String fechaTexto = fechaMas1Mes.format(formato);

                switch (Modo) {
                    case "Cuadricula":
                        Filtrar_Fecha_Cuadricula(Secuencial_Empresa, fechaTexto, contenedor);
                        break;

                    case "Lista":
                        Filtrar_Lista_Fecha(Secuencial_Empresa, fechaTexto, lista_tabla);
                        break;

                    case "Kardex":
                        Filtrar_Kardex_Fecha(Secuencial_Empresa, fechaTexto, kardex_tabla);
                        break;

                    default:
                        SwingUtilities.invokeLater(() ->
                            JOptionPane.showMessageDialog(null,
                                "Modo visual no reconocido: " + Modo,
                                "Error", JOptionPane.ERROR_MESSAGE)
                        );
                        break;
                }

            } catch (Exception ex) {
                SwingUtilities.invokeLater(() ->
                    JOptionPane.showMessageDialog(null,
                        "Error al filtrar por fecha: " + ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE)
                );
                ex.printStackTrace();
            } finally {
                if (em != null && em.isOpen()) {
                    em.close();
                }
            }
            return null;
        }

        @Override
        protected void done() {
            icono_carga.setVisible(false);

            switch (Modo) {
                case "Cuadricula":
                    contenedor.revalidate();
                    contenedor.repaint();
                    break;
                case "Lista":
                    lista_tabla.revalidate();
                    lista_tabla.repaint();
                    break;
                case "Kardex":
                    kardex_tabla.revalidate();
                    kardex_tabla.repaint();
                    break;
            }
        }
    }.execute();
}
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed

icono_carga.setVisible(true);

    new SwingWorker<Void, Void>() {
        EntityManager em = null;

        @Override
        protected Void doInBackground() {
            try {
                em = MonituxDBContext.getEntityManager();
                if (em == null || !em.isOpen()) {
                    throw new IllegalStateException("EntityManager no disponible.");
                }

                LocalDate hoy = LocalDate.now();
                LocalDate fechaMas1Year = hoy.plusYears(1);
                DateTimeFormatter formato = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                String fechaTexto = fechaMas1Year.format(formato);

                switch (Modo) {
                    case "Cuadricula":
                        Filtrar_Fecha_Cuadricula(Secuencial_Empresa, fechaTexto, contenedor);
                        break;

                    case "Lista":
                        Filtrar_Lista_Fecha(Secuencial_Empresa, fechaTexto, lista_tabla);
                        break;

                    case "Kardex":
                        Filtrar_Kardex_Fecha(Secuencial_Empresa, fechaTexto, kardex_tabla);
                        break;

                    default:
                        SwingUtilities.invokeLater(() ->
                            JOptionPane.showMessageDialog(null,
                                "Modo visual no reconocido: " + Modo,
                                "Error", JOptionPane.ERROR_MESSAGE)
                        );
                        break;
                }

            } catch (Exception ex) {
                SwingUtilities.invokeLater(() ->
                    JOptionPane.showMessageDialog(null,
                        "Error al filtrar por fecha: " + ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE)
                );
                ex.printStackTrace();
            } finally {
                if (em != null && em.isOpen()) {
                    em.close();
                }
            }
            return null;
        }

        @Override
        protected void done() {
            icono_carga.setVisible(false);

            switch (Modo) {
                case "Cuadricula":
                    contenedor.revalidate();
                    contenedor.repaint();
                    break;
                case "Lista":
                    lista_tabla.revalidate();
                    lista_tabla.repaint();
                    break;
                case "Kardex":
                    kardex_tabla.revalidate();
                    kardex_tabla.repaint();
                    break;
            }
        }
    }.execute();
        
    }//GEN-LAST:event_jButton6ActionPerformed

    private void fecha_txtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fecha_txtKeyReleased

    if (evt.getKeyCode() != KeyEvent.VK_ENTER) return;

    String fechaTexto = fecha_txt.getText().trim();
    icono_carga.setVisible(true);

    new SwingWorker<Void, Void>() {
        EntityManager em = null;

        @Override
        protected Void doInBackground() {
            try {
                SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                sdf.setLenient(false);
                sdf.parse(fechaTexto); // Validación estricta

                em = MonituxDBContext.getEntityManager();
                if (em == null || !em.isOpen()) {
                    throw new IllegalStateException("EntityManager no disponible.");
                }

                switch (Modo) {
                    case "Cuadricula":
                        Filtrar_Fecha_Cuadricula(Secuencial_Empresa, fechaTexto, contenedor);
                        break;

                    case "Lista":
                        Filtrar_Lista_Fecha(Secuencial_Empresa, fechaTexto, lista_tabla);
                        break;

                    case "Kardex":
                        Filtrar_Kardex_Fecha(Secuencial_Empresa, fechaTexto, kardex_tabla);
                        break;

                    default:
                        SwingUtilities.invokeLater(() ->
                            JOptionPane.showMessageDialog(null,
                                "Modo visual no reconocido: " + Modo,
                                "Error", JOptionPane.ERROR_MESSAGE)
                        );
                        break;
                }

            } catch (ParseException ex) {
                SwingUtilities.invokeLater(() -> {
                    JOptionPane.showMessageDialog(null,
                        "Formato de fecha inválido. Usa dd/MM/yyyy.",
                        "Error", JOptionPane.ERROR_MESSAGE);
                });
            } catch (Exception ex) {
                SwingUtilities.invokeLater(() ->
                    JOptionPane.showMessageDialog(null,
                        "Error al filtrar por fecha: " + ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE)
                );
                ex.printStackTrace();
            } finally {
                if (em != null && em.isOpen()) {
                    em.close();
                }
            }
            return null;
        }

        @Override
        protected void done() {
            icono_carga.setVisible(false);

            switch (Modo) {
                case "Cuadricula":
                    contenedor.revalidate();
                    contenedor.repaint();
                    break;
                case "Lista":
                    lista_tabla.revalidate();
                    lista_tabla.repaint();
                    break;
                case "Kardex":
                    kardex_tabla.revalidate();
                    kardex_tabla.repaint();
                    break;
            }
        }
    }.execute();
    }//GEN-LAST:event_fecha_txtKeyReleased

    private void fecha_txtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fecha_txtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fecha_txtActionPerformed

    private void jLabel6MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseEntered

         jLabel6.setText("<html><u>Existencia Minima</u></html>");
      

        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel6MouseEntered

    private void jLabel6MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseExited

         jLabel6.setText("<html>Existencia Minima</html>");
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel6MouseExited

    private void jLabel7MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseEntered


         jLabel7.setText("<html><u>Agotados</u></html>");
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel7MouseEntered

    private void jLabel7MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseExited

        jLabel7.setText("<html>Agotados</html>");
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel7MouseExited

    private void jButton9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton9MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton9MouseClicked

   public void filtrarItemsKardexConsulta(String fechaInicioTexto, String fechaFinTexto, String codigo, String movimiento, int secuencialEmpresa, JTable tabla) {
    icono_carga.setVisible(true);

    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
    LocalDate fechaInicio, fechaFin;

    try {
        fechaInicio = LocalDate.parse(fechaInicioTexto, formatter);
        fechaFin = LocalDate.parse(fechaFinTexto, formatter);
    } catch (DateTimeParseException ex) {
        JOptionPane.showMessageDialog(null, "Las fechas ingresadas no son válidas.", "Error", JOptionPane.ERROR_MESSAGE);
        icono_carga.setVisible(false);
        return;
    }

    new SwingWorker<List<Kardex>, Void>() {
        EntityManager em = null;

        @Override
        protected List<Kardex> doInBackground() {
            try {
                em = MonituxDBContext.getEntityManager();
                if (em == null || !em.isOpen()) {
                    throw new IllegalStateException("EntityManager no disponible.");
                }

                List<Kardex> todos = em.createQuery(
                    "SELECT k FROM Kardex k WHERE k.Secuencial_Empresa = :empresa", Kardex.class)
                    .setParameter("empresa", secuencialEmpresa)
                    .getResultList();

                return todos.stream()
                    .filter(k -> {
                        try {
                            LocalDate fechaKardex = LocalDate.parse(k.getFecha(), formatter);
                            return !fechaKardex.isBefore(fechaInicio) &&
                                   !fechaKardex.isAfter(fechaFin) &&
                                   k.getMovimiento().equalsIgnoreCase(movimiento) &&
                                   k.getProducto() != null &&
                                   k.getProducto().getCodigo().equalsIgnoreCase(codigo);
                        } catch (Exception ex) {
                            return false;
                        }
                    })
                    .collect(Collectors.toList());

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(tabla,
                    "Error al consultar registros de Kardex: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
                return Collections.emptyList();
            }
        }

        @Override
        protected void done() {
            try {
                List<Kardex> filtrados = get();

                if (filtrados.isEmpty()) {
                    JOptionPane.showMessageDialog(null,
                        "No se encontraron registros que coincidan con los criterios de búsqueda.",
                        "Kardex", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null,
                        "Registros obtenidos: " + filtrados.size(),
                        "Kardex", JOptionPane.INFORMATION_MESSAGE);
                }

                DefaultTableModel modelo = new DefaultTableModel(new Object[]{
                    "Secuencial", "Codigo", "Fecha", "Descripción", "Movimiento", "Cantidad",
                    "Costo", "Costo Total", "Venta", "Venta Total", "Saldo", "Secuencial Producto", "Secuencial Empresa"
                }, 0) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };

                for (Kardex k : filtrados) {
                    Producto p = k.getProducto();
                    modelo.addRow(new Object[]{
                        k.getSecuencial(),
                        p != null ? p.getCodigo() : "",
                        k.getFecha(),
                        k.getDescripcion(),
                        k.getMovimiento(),
                        k.getCantidad(),
                        Util.redondear(k.getCosto()),
                        Util.redondear(k.getCosto_Total()),
                        Util.redondear(k.getVenta()),
                        Util.redondear(k.getVenta_Total()),
                        Util.redondear(k.getSaldo()),
                        k.getSecuencial_Producto(),
                        k.getSecuencial_Empresa()
                    });
                }

                tabla.setModel(modelo);
                tabla.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(tabla,
                    "Error al procesar registros de Kardex: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            } finally {
                if (em != null && em.isOpen()) {
                    em.close();
                }
                icono_carga.setVisible(false);
            }
        }
    }.execute();
}

    
   
    
    
    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed

   String fechaInicio = jTextField3.getText().trim(); // formato dd/MM/yyyy
    String fechaFin = jTextField4.getText().trim();
    String codigo = jTextField2.getText().trim();
    String movimiento = jComboBox4.getSelectedItem() != null ? jComboBox4.getSelectedItem().toString() : "";
    int empresa = V_Menu_Principal.Secuencial_Empresa;

    icono_carga.setVisible(true);

    new SwingWorker<Void, Void>() {
        EntityManager em = null;

        @Override
        protected Void doInBackground() {
            try {
                SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                sdf.setLenient(false);
                sdf.parse(fechaInicio);
                sdf.parse(fechaFin);

                em = MonituxDBContext.getEntityManager();
                if (em == null || !em.isOpen()) {
                    throw new IllegalStateException("EntityManager no disponible.");
                }

                filtrarItemsKardexConsulta(fechaInicio, fechaFin, codigo, movimiento, empresa, kardex_tabla);

            } catch (ParseException ex) {
                SwingUtilities.invokeLater(() ->
                    JOptionPane.showMessageDialog(null,
                        "Formato de fecha inválido. Usa dd/MM/yyyy.",
                        "Error", JOptionPane.ERROR_MESSAGE)
                );
            } catch (Exception ex) {
                SwingUtilities.invokeLater(() ->
                    JOptionPane.showMessageDialog(null,
                        "Error al consultar Kardex: " + ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE)
                );
                ex.printStackTrace();
            } finally {
                if (em != null && em.isOpen()) {
                    em.close();
                }
            }
            return null;
        }

        @Override
        protected void done() {
            icono_carga.setVisible(false);
            kardex_tabla.revalidate();
            kardex_tabla.repaint();
        }
    }.execute();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jLabel14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel14MouseClicked


        if ("Administrador".equals(V_Menu_Principal.getAcceso_Usuario())) {
        
        if (Modo=="Lista"){
        Util.exportarJTableAExcel(lista_tabla, "Vista_Inventario", "Vista_Inventario");

        }
        if (Modo=="Kardex"){
        Util.exportarJTableAExcel(kardex_tabla, "Vista_Kardex", "Vista_Kardex");

        }
        }else{
        
        JOptionPane.showMessageDialog(null, "No dispone de permiso para ejecutar esta accion.");
        }
        
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel14MouseClicked

    public void cargarItems_Cuadricula(int secuencialEmpresa, JPanel contenedor) {
    icono_carga.setVisible(true);
    contenedor.setLayout(new GridBagLayout());
    contenedor.removeAll();

    new SwingWorker<List<Producto>, Void>() {
        @Override
        protected List<Producto> doInBackground() {
            EntityManager em = null;
            try {
                em = MonituxDBContext.getEntityManager();
                if (em == null || !em.isOpen()) {
                    throw new IllegalStateException("EntityManager no disponible.");
                }

                return em.createQuery(
                    "SELECT p FROM Producto p WHERE p.Secuencial_Empresa = :empresa", Producto.class)
                    .setParameter("empresa", secuencialEmpresa)
                    .getResultList();

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(contenedor,
                    "Error al consultar productos: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
                return Collections.emptyList();
            } finally {
                if (em != null && em.isOpen()) {
                    try {
                        em.close();
                    } catch (Exception ignored) {
                        // Silenciado
                    }
                }
            }
        }

        @Override
        protected void done() {
            try {
                List<Producto> productos = get();

                GridBagConstraints gbc = new GridBagConstraints();
                gbc.insets = new Insets(5, 5, 5, 5);
                gbc.fill = GridBagConstraints.NONE;
                gbc.anchor = GridBagConstraints.NORTHWEST;

                int col = 0, row = 0;

                for (Producto producto : productos) {
                    Miniatura_Producto miniatura = new Miniatura_Producto(producto, false);
                    miniatura.setPreferredSize(new Dimension(120, 170));

                    miniatura.addMouseListener(new MouseAdapter() {
                        @Override
                        public void mouseClicked(MouseEvent e) {
                            if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {
                                Producto productoSeleccionado = miniatura.producto;
                                if (!"Servicio".equals(productoSeleccionado.getTipo())) {
                                    V_Kardex kardex = new V_Kardex(
                                        productoSeleccionado.getProducto().getSecuencial(),
                                        productoSeleccionado.getProducto().getCodigo()
                                    );
                                    kardex.setVisible(true);
                                    kardex.setLocationRelativeTo(null);
                                }
                            }
                        }

                        @Override
                        public void mousePressed(MouseEvent e) {
                            if (e.isPopupTrigger()) {
                                menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                            }
                        }

                        @Override
                        public void mouseReleased(MouseEvent e) {
                            if (e.isPopupTrigger()) {
                                menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                            }
                        }
                    });

                    String comentario = miniatura.cargarComentario();
                    String descripcion = miniatura.producto.getDescripcion();
                    miniatura.setToolTipText(
                        comentario != null
                            ? "<html><b>" + descripcion + "</b><br>" + comentario + "</html>"
                            : "<html><b>" + descripcion + "</b><br></html>"
                    );

                    gbc.gridx = col;
                    gbc.gridy = row;
                    contenedor.add(miniatura, gbc);

                    col++;
                    if (col == 6) {
                        col = 0;
                        row++;
                    }
                }

                contenedor.revalidate();
                contenedor.repaint();

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(contenedor,
                    "Error al procesar productos: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            } finally {
                icono_carga.setVisible(false);
            }
        }
    }.execute();
}

    
// public void cargarItems_Cuadricula(int secuencialEmpresa, JPanel contenedor) {
//    icono_carga.setVisible(true);
//    contenedor.setLayout(new GridBagLayout());
//    contenedor.removeAll();
//
//    new SwingWorker<List<Producto>, Void>() {
//        EntityManager em = null;
//
//        @Override
//        protected List<Producto> doInBackground() {
//            try {
//                em = MonituxDBContext.getEntityManager();
//                if (em == null || !em.isOpen()) {
//                    throw new IllegalStateException("EntityManager no disponible.");
//                }
//
//                return em.createQuery(
//                    "SELECT p FROM Producto p WHERE p.Secuencial_Empresa = :empresa", Producto.class)
//                    .setParameter("empresa", secuencialEmpresa)
//                    .getResultList();
//
//            } catch (Exception ex) {
//                JOptionPane.showMessageDialog(contenedor,
//                    "Error al consultar productos: " + ex.getMessage(),
//                    "Error", JOptionPane.ERROR_MESSAGE);
//                ex.printStackTrace();
//                return Collections.emptyList();
//            }
//        }
//
//        @Override
//        protected void done() {
//            try {
//                List<Producto> productos = get();
//
//                GridBagConstraints gbc = new GridBagConstraints();
//                gbc.insets = new Insets(5, 5, 5, 5);
//                gbc.fill = GridBagConstraints.NONE;
//                gbc.anchor = GridBagConstraints.NORTHWEST;
//
//                int col = 0, row = 0;
//
//                for (Producto producto : productos) {
//                    Miniatura_Producto miniatura = new Miniatura_Producto(producto, false);
//                    miniatura.setPreferredSize(new Dimension(120, 170));
//
//                    miniatura.addMouseListener(new MouseAdapter() {
//                        @Override
//                        public void mouseClicked(MouseEvent e) {
//                            if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {
//                                Producto productoSeleccionado = miniatura.producto;
//                                if (!"Servicio".equals(productoSeleccionado.getTipo())) {
//                                    V_Kardex kardex = new V_Kardex(
//                                        productoSeleccionado.getProducto().getSecuencial(),
//                                        productoSeleccionado.getProducto().getCodigo()
//                                    );
//                                    kardex.setVisible(true);
//                                    kardex.setLocationRelativeTo(null);
//                                }
//                            }
//                        }
//
//                        @Override
//                        public void mousePressed(MouseEvent e) {
//                            if (e.isPopupTrigger()) {
//                                menu_contextual.show(e.getComponent(), e.getX(), e.getY());
//                            }
//                        }
//
//                        @Override
//                        public void mouseReleased(MouseEvent e) {
//                            if (e.isPopupTrigger()) {
//                                menu_contextual.show(e.getComponent(), e.getX(), e.getY());
//                            }
//                        }
//                    });
//
//                    String comentario = miniatura.cargarComentario();
//                    String descripcion = miniatura.producto.getDescripcion();
//                    miniatura.setToolTipText(
//                        comentario != null
//                            ? "<html><b>" + descripcion + "</b><br>" + comentario + "</html>"
//                            : "<html><b>" + descripcion + "</b><br></html>"
//                    );
//
//                    gbc.gridx = col;
//                    gbc.gridy = row;
//                    contenedor.add(miniatura, gbc);
//
//                    col++;
//                    if (col == 6) {
//                        col = 0;
//                        row++;
//                    }
//                }
//
//                contenedor.revalidate();
//                contenedor.repaint();
//
//            } catch (Exception ex) {
//                JOptionPane.showMessageDialog(contenedor,
//                    "Error al procesar productos: " + ex.getMessage(),
//                    "Error", JOptionPane.ERROR_MESSAGE);
//                ex.printStackTrace();
//            } finally {
//                if (em != null && em.isOpen()) {
//                    em.close();
//                }
//                icono_carga.setVisible(false);
//            }
//        }
//    }.execute();
//}


//***********

public void Filtrar_Existencia_Minima_Lista(int secuencialEmpresa, JTable tabla) {
    icono_carga.setVisible(true);

    new SwingWorker<List<Producto>, Void>() {
        EntityManager em = null;

        @Override
        protected List<Producto> doInBackground() {
            try {
                em = MonituxDBContext.getEntityManager();
                if (em == null || !em.isOpen()) {
                    throw new IllegalStateException("EntityManager no disponible.");
                }

                String jpql = "SELECT p FROM Producto p " +
                              "WHERE p.Secuencial_Empresa = :empresa " +
                              "AND p.Cantidad = p.Existencia_Minima " +
                              "AND p.Tipo <> 'Servicio'";

                TypedQuery<Producto> query = em.createQuery(jpql, Producto.class);
                query.setParameter("empresa", secuencialEmpresa);
                return query.getResultList();

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(tabla,
                    "Error al consultar productos con existencia mínima: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
                return new ArrayList<>();
            }
        }

        @Override
        protected void done() {
            try {
                List<Producto> productos = get();

                DefaultTableModel modelo = new DefaultTableModel(new Object[]{
                    "S", "Codigo", "Descripción", "Marca", "Existencia", "E. mínima",
                    "C. Barra", "C. Fabricante", "F. Vencimiento", "P. Costo", "P. Venta"
                }, 0) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };

                for (Producto producto : productos) {
                    modelo.addRow(new Object[]{
                        producto.getSecuencial(),
                        producto.getCodigo(),
                        producto.getDescripcion(),
                        producto.getMarca(),
                        producto.getCantidad(),
                        producto.getExistencia_Minima(),
                        producto.getCodigo_Barra(),
                        producto.getCodigo_Fabricante(),
                        producto.getFecha_Caducidad(),
                        producto.getPrecio_Costo(),
                        producto.getPrecio_Venta()
                    });
                }

                tabla.setModel(modelo);
                tabla.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                for (MouseListener ml : tabla.getMouseListeners()) {
                    tabla.removeMouseListener(ml);
                }

                tabla.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mousePressed(MouseEvent e) {
                        if (SwingUtilities.isLeftMouseButton(e)) {
                            int fila = tabla.rowAtPoint(e.getPoint());
                            if (fila != -1) {
                                tabla.setRowSelectionInterval(fila, fila);
                            }
                        }
                    }

                    @Override
                    public void mouseClicked(MouseEvent e) {
                        if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {
                            int fila = tabla.rowAtPoint(e.getPoint());
                            if (fila != -1) {
                                tabla.setRowSelectionInterval(fila, fila);
                                String codigo = tabla.getValueAt(fila, 1).toString();

                                Producto productoSeleccionado = productos.stream()
                                    .filter(p -> p.getCodigo().equals(codigo))
                                    .findFirst()
                                    .orElse(null);

                                if (productoSeleccionado != null) {
                                    V_Producto form = new V_Producto(false, productoSeleccionado);
                                    form.setOnProductoEditado(() -> cargarItems_Cuadricula());
                                    form.setVisible(true);
                                }
                            }
                        }
                    }
                });

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(tabla,
                    "Error al procesar productos con existencia mínima: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            } finally {
                if (em != null && em.isOpen()) {
                    em.close();
                }
                icono_carga.setVisible(false);
            }
        }
    }.execute();
}

//***********


public void Filtrar_Agotados_Lista(int secuencialEmpresa, JTable tabla) {
    icono_carga.setVisible(true);

    new SwingWorker<List<Producto>, Void>() {
        EntityManager em = null;

        @Override
        protected List<Producto> doInBackground() {
            try {
                em = MonituxDBContext.getEntityManager();
                if (em == null || !em.isOpen()) {
                    throw new IllegalStateException("EntityManager no disponible.");
                }

                String jpql = "SELECT p FROM Producto p " +
                              "WHERE p.Secuencial_Empresa = :empresa " +
                              "AND p.Cantidad < p.Existencia_Minima " +
                              "AND p.Tipo <> 'Servicio'";

                TypedQuery<Producto> query = em.createQuery(jpql, Producto.class);
                query.setParameter("empresa", secuencialEmpresa);
                return query.getResultList();

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(tabla,
                    "Error al consultar productos agotados: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
                return new ArrayList<>();
            }
        }

        @Override
        protected void done() {
            try {
                List<Producto> productos = get();

                DefaultTableModel modelo = new DefaultTableModel(new Object[]{
                    "S", "Codigo", "Descripción", "Marca", "Existencia", "E. mínima",
                    "C. Barra", "C. Fabricante", "F. Vencimiento", "P. Costo", "P. Venta"
                }, 0) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };

                for (Producto producto : productos) {
                    modelo.addRow(new Object[]{
                        producto.getSecuencial(),
                        producto.getCodigo(),
                        producto.getDescripcion(),
                        producto.getMarca(),
                        producto.getCantidad(),
                        producto.getExistencia_Minima(),
                        producto.getCodigo_Barra(),
                        producto.getCodigo_Fabricante(),
                        producto.getFecha_Caducidad(),
                        producto.getPrecio_Costo(),
                        producto.getPrecio_Venta()
                    });
                }

                tabla.setModel(modelo);
                tabla.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                for (MouseListener ml : tabla.getMouseListeners()) {
                    tabla.removeMouseListener(ml);
                }

                tabla.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mousePressed(MouseEvent e) {
                        if (SwingUtilities.isLeftMouseButton(e)) {
                            int fila = tabla.rowAtPoint(e.getPoint());
                            if (fila != -1) {
                                tabla.setRowSelectionInterval(fila, fila);
                            }
                        }
                    }

                    @Override
                    public void mouseClicked(MouseEvent e) {
                        if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {
                            int fila = tabla.rowAtPoint(e.getPoint());
                            if (fila != -1) {
                                tabla.setRowSelectionInterval(fila, fila);
                                String codigo = tabla.getValueAt(fila, 1).toString();

                                Producto productoSeleccionado = productos.stream()
                                    .filter(p -> p.getCodigo().equals(codigo))
                                    .findFirst()
                                    .orElse(null);

                                if (productoSeleccionado != null) {
                                    V_Producto form = new V_Producto(false, productoSeleccionado);
                                    form.setOnProductoEditado(() -> cargarItems_Cuadricula());
                                    form.setVisible(true);
                                }
                            }
                        }
                    }
                });

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(tabla,
                    "Error al procesar productos agotados: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            } finally {
                if (em != null && em.isOpen()) {
                    em.close();
                }
                icono_carga.setVisible(false);
            }
        }
    }.execute();
}



public void cargar_ItemsFiltrados_Lista(int secuencialEmpresa, JComboBox<String> comboFiltro, JTextField campoValorFiltro, JTable tabla) {
    icono_carga.setVisible(true);

    String campoFiltro = (String) comboFiltro.getSelectedItem();
    String valorFiltro = campoValorFiltro.getText();

    boolean aplicarFiltro = campoFiltro != null && !campoFiltro.trim().isEmpty()
                         && valorFiltro != null && !valorFiltro.trim().isEmpty();

    new SwingWorker<List<Producto>, Void>() {
        EntityManager em = null;

        @Override
        protected List<Producto> doInBackground() {
            try {
                em = MonituxDBContext.getEntityManager();
                if (em == null || !em.isOpen()) {
                    throw new IllegalStateException("EntityManager no disponible.");
                }

                String jpql = "SELECT p FROM Producto p WHERE p.Secuencial_Empresa = :empresa"
                            + (aplicarFiltro ? " AND LOWER(p." + campoFiltro + ") LIKE :valorFiltro" : "");

                TypedQuery<Producto> query = em.createQuery(jpql, Producto.class);
                query.setParameter("empresa", secuencialEmpresa);
                if (aplicarFiltro) {
                    query.setParameter("valorFiltro", "%" + valorFiltro.toLowerCase() + "%");
                }

                return query.getResultList();

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(tabla,
                    "Error al consultar productos filtrados: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
                return Collections.emptyList();
            }
        }

        @Override
        protected void done() {
            try {
                List<Producto> productos = get();

                DefaultTableModel modelo = new DefaultTableModel(new Object[]{
                    "S", "Codigo", "Descripción", "Marca", "Existencia", "E. mínima",
                    "C. Barra", "C. Fabricante", "F. Vencimiento", "P. Costo", "P. Venta"
                }, 0) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };

                for (Producto producto : productos) {
                    modelo.addRow(new Object[]{
                        producto.getSecuencial(),
                        producto.getCodigo(),
                        producto.getDescripcion(),
                        producto.getMarca(),
                        producto.getCantidad(),
                        producto.getExistencia_Minima(),
                        producto.getCodigo_Barra(),
                        producto.getCodigo_Fabricante(),
                        producto.getFecha_Caducidad(),
                        producto.getPrecio_Costo(),
                        producto.getPrecio_Venta()
                    });
                }

                tabla.setModel(modelo);
                tabla.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                for (MouseListener ml : tabla.getMouseListeners()) {
                    tabla.removeMouseListener(ml);
                }

                tabla.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mousePressed(MouseEvent e) {
                        if (SwingUtilities.isLeftMouseButton(e)) {
                            int fila = tabla.rowAtPoint(e.getPoint());
                            if (fila != -1) {
                                tabla.setRowSelectionInterval(fila, fila);
                            }
                        }
                    }

                    @Override
                    public void mouseClicked(MouseEvent e) {
                        if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {
                            int fila = tabla.rowAtPoint(e.getPoint());
                            if (fila != -1) {
                                tabla.setRowSelectionInterval(fila, fila);
                                String codigo = tabla.getValueAt(fila, 1).toString();

                                Producto productoSeleccionado = productos.stream()
                                    .filter(p -> p.getCodigo().equals(codigo))
                                    .findFirst()
                                    .orElse(null);

                                if (productoSeleccionado != null) {
                                    V_Producto form = new V_Producto(false, productoSeleccionado);
                                    form.setOnProductoEditado(() -> cargarItems_Cuadricula());
                                    form.setVisible(true);
                                }
                            }
                        }
                    }
                });

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(tabla,
                    "Error al procesar productos filtrados: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            } finally {
                if (em != null && em.isOpen()) {
                    em.close();
                }
                icono_carga.setVisible(false);
            }
        }
    }.execute();
}



public void cargar_ItemsFiltrados_Kardex(int secuencialEmpresa, JComboBox<String> comboFiltro, JTextField campoValorFiltro, JTable tabla) {
    icono_carga.setVisible(true);

    String campoFiltro = comboFiltro.getSelectedItem().toString().trim();
    String valorFiltro = campoValorFiltro.getText().trim().toLowerCase();
    boolean aplicarFiltro = !campoFiltro.isEmpty() && !valorFiltro.isEmpty();

    Set<String> camposProducto = Set.of("Codigo", "Descripcion", "Marca", "Codigo_Barra", "Codigo_Fabricante");

    new SwingWorker<List<Kardex>, Void>() {
        EntityManager em = null;

        @Override
        protected List<Kardex> doInBackground() {
            try {
                em = MonituxDBContext.getEntityManager();
                if (em == null || !em.isOpen()) {
                    throw new IllegalStateException("EntityManager no disponible.");
                }

                String jpql;
                TypedQuery<Kardex> query;

                if (aplicarFiltro && camposProducto.contains(campoFiltro)) {
                    jpql = "SELECT k FROM Kardex k JOIN FETCH k.producto p " +
                           "WHERE k.Secuencial_Empresa = :empresa AND LOWER(p." + campoFiltro + ") LIKE :valorFiltro";
                    query = em.createQuery(jpql, Kardex.class);
                    query.setParameter("empresa", secuencialEmpresa);
                    query.setParameter("valorFiltro", "%" + valorFiltro + "%");
                } else if (aplicarFiltro) {
                    jpql = "SELECT k FROM Kardex k JOIN FETCH k.producto " +
                           "WHERE k.Secuencial_Empresa = :empresa AND LOWER(k." + campoFiltro + ") LIKE :valorFiltro";
                    query = em.createQuery(jpql, Kardex.class);
                    query.setParameter("empresa", secuencialEmpresa);
                    query.setParameter("valorFiltro", "%" + valorFiltro + "%");
                } else {
                    jpql = "SELECT k FROM Kardex k JOIN FETCH k.producto WHERE k.Secuencial_Empresa = :empresa";
                    query = em.createQuery(jpql, Kardex.class);
                    query.setParameter("empresa", secuencialEmpresa);
                }

                return query.getResultList();

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(tabla,
                    "Error al consultar registros de Kardex: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
                return Collections.emptyList();
            }
        }

        @Override
        protected void done() {
            try {
                List<Kardex> kardexList = get();

                DefaultTableModel modelo = new DefaultTableModel(new Object[]{
                    "S", "Código", "Fecha", "Descripción", "Movimiento", "Cantidad",
                    "Costo", "Costo Total", "Venta", "Venta Total", "Saldo",
                    "Sec. Producto", "Sec. Empresa"
                }, 0) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };

                for (Kardex k : kardexList) {
                    Producto p = k.getProducto();
                    modelo.addRow(new Object[]{
                        k.getSecuencial(),
                        p != null ? p.getCodigo() : "",
                        k.getFecha(),
                        k.getDescripcion(),
                        k.getMovimiento(),
                        k.getCantidad(),
                        Util.redondear(k.getCosto()),
                        Util.redondear(k.getCosto_Total()),
                        Util.redondear(k.getVenta()),
                        Util.redondear(k.getVenta_Total()),
                        Util.redondear(k.getSaldo()),
                        k.getSecuencial_Producto(),
                        k.getSecuencial_Empresa()
                    });
                }

                tabla.setModel(modelo);
                tabla.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                for (MouseListener ml : tabla.getMouseListeners()) {
                    tabla.removeMouseListener(ml);
                }

                tabla.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mousePressed(MouseEvent e) {
                        if (SwingUtilities.isLeftMouseButton(e)) {
                            int fila = tabla.rowAtPoint(e.getPoint());
                            if (fila != -1) {
                                tabla.setRowSelectionInterval(fila, fila);
                            }
                        }
                    }

                    @Override
                    public void mouseClicked(MouseEvent e) {
                        if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {
                            int fila = tabla.rowAtPoint(e.getPoint());
                            if (fila != -1) {
                                tabla.setRowSelectionInterval(fila, fila);
                                int secuencial = Integer.parseInt(tabla.getValueAt(fila, 0).toString());

                                Kardex seleccionado = kardexList.stream()
                                    .filter(k -> k.getSecuencial() == secuencial)
                                    .findFirst()
                                    .orElse(null);

                                if (seleccionado != null) {
                                    JOptionPane.showMessageDialog(null,
                                        "Doble clic en: " + seleccionado.getDescripcion());
                                    // Aquí puedes abrir un formulario de edición si lo deseas
                                }
                            }
                        }
                    }
                });

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(tabla,
                    "Error al procesar registros de Kardex: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            } finally {
                if (em != null && em.isOpen()) {
                    em.close();
                }
                icono_carga.setVisible(false);
            }
        }
    }.execute();
}





public void cargarItemsFiltrados_Cuadricula(int secuencialEmpresa, JComboBox<String> comboFiltro, JTextField campoValorFiltro, JPanel contenedor) {
    icono_carga.setVisible(true);
    contenedor.setLayout(new GridBagLayout());
    contenedor.removeAll();

    String campoFiltro = (String) comboFiltro.getSelectedItem();
    String valorFiltro = campoValorFiltro.getText();

    boolean aplicarFiltro = campoFiltro != null && !campoFiltro.trim().isEmpty()
                         && valorFiltro != null && !valorFiltro.trim().isEmpty();

    new SwingWorker<List<Producto>, Void>() {
        EntityManager em = null;

        @Override
        protected List<Producto> doInBackground() {
            try {
                em = MonituxDBContext.getEntityManager();
                if (em == null || !em.isOpen()) {
                    throw new IllegalStateException("EntityManager no disponible.");
                }

                String jpql = "SELECT p FROM Producto p WHERE p.Secuencial_Empresa = :empresa"
                            + (aplicarFiltro ? " AND LOWER(p." + campoFiltro + ") LIKE :valorFiltro" : "");

                TypedQuery<Producto> query = em.createQuery(jpql, Producto.class);
                query.setParameter("empresa", secuencialEmpresa);
                if (aplicarFiltro) {
                    query.setParameter("valorFiltro", "%" + valorFiltro.toLowerCase() + "%");
                }

                return query.getResultList();

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(contenedor,
                    "Error al consultar productos filtrados: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
                return Collections.emptyList();
            }
        }

        @Override
        protected void done() {
            try {
                List<Producto> productos = get();

                GridBagConstraints gbc = new GridBagConstraints();
                gbc.insets = new Insets(5, 5, 5, 5);
                gbc.fill = GridBagConstraints.NONE;
                gbc.anchor = GridBagConstraints.NORTHWEST;

                int col = 0, row = 0;

                for (Producto producto : productos) {
                    Miniatura_Producto miniatura = new Miniatura_Producto(producto, false);
                    miniatura.setPreferredSize(new Dimension(120, 170));

                    miniatura.addMouseListener(new MouseAdapter() {
                        @Override
                        public void mouseClicked(MouseEvent e) {
                            if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {
                                Producto productoSeleccionado = miniatura.producto;
                                V_Kardex kardex = new V_Kardex(
                                    productoSeleccionado.getProducto().getSecuencial(),
                                    productoSeleccionado.getProducto().getCodigo()
                                );
                                kardex.setVisible(true);
                                kardex.setLocationRelativeTo(null);
                            }
                        }

                        @Override
                        public void mousePressed(MouseEvent e) {
                            if (e.isPopupTrigger()) {
                                menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                            }
                        }

                        @Override
                        public void mouseReleased(MouseEvent e) {
                            if (e.isPopupTrigger()) {
                                menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                            }
                        }
                    });

                    String comentario = miniatura.cargarComentario();
                    String descripcion = miniatura.producto.getDescripcion();
                    miniatura.setToolTipText("<html><b>" + descripcion + "</b><br>" + (comentario != null ? comentario : "") + "</html>");

                    gbc.gridx = col;
                    gbc.gridy = row;
                    contenedor.add(miniatura, gbc);

                    col++;
                    if (col == 6) {
                        col = 0;
                        row++;
                    }
                }

                contenedor.revalidate();
                contenedor.repaint();

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(contenedor,
                    "Error al procesar productos filtrados: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            } finally {
                if (em != null && em.isOpen()) {
                    em.close();
                }
                icono_carga.setVisible(false);
            }
        }
    }.execute();
}

//************************************
public void Filtrar_Cuadricula_Proveedor(int secuencialEmpresa, int secuencialProveedor, JPanel contenedor) {
    icono_carga.setVisible(true);
    contenedor.setLayout(new GridBagLayout());
    contenedor.removeAll();

    new SwingWorker<List<Producto>, Void>() {
        EntityManager em = null;

        @Override
        protected List<Producto> doInBackground() {
            try {
                em = MonituxDBContext.getEntityManager();
                if (em == null || !em.isOpen()) {
                    throw new IllegalStateException("EntityManager no disponible.");
                }

                String jpql = "SELECT p FROM Producto p WHERE p.Secuencial_Empresa = :empresa AND p.Secuencial_Proveedor = :proveedor";
                TypedQuery<Producto> query = em.createQuery(jpql, Producto.class);
                query.setParameter("empresa", secuencialEmpresa);
                query.setParameter("proveedor", secuencialProveedor);

                return query.getResultList();

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(contenedor,
                    "Error al consultar productos por proveedor: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
                return new ArrayList<>();
            }
        }

        @Override
        protected void done() {
            try {
                List<Producto> productos = get();

                GridBagConstraints gbc = new GridBagConstraints();
                gbc.insets = new Insets(5, 5, 5, 5);
                gbc.fill = GridBagConstraints.NONE;
                gbc.anchor = GridBagConstraints.NORTHWEST;

                int col = 0, row = 0;

                for (Producto producto : productos) {
                    Miniatura_Producto miniatura = new Miniatura_Producto(producto, false);
                    miniatura.setPreferredSize(new Dimension(120, 170));

                    miniatura.addMouseListener(new MouseAdapter() {
                        @Override
                        public void mouseClicked(MouseEvent e) {
                            if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {
                                Producto productoSeleccionado = miniatura.producto;
                                V_Kardex kardex = new V_Kardex(
                                    productoSeleccionado.getProducto().getSecuencial(),
                                    productoSeleccionado.getProducto().getCodigo()
                                );
                                kardex.setVisible(true);
                                kardex.setLocationRelativeTo(null);
                            }
                        }

                        @Override
                        public void mousePressed(MouseEvent e) {
                            if (e.isPopupTrigger()) {
                                menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                            }
                        }

                        @Override
                        public void mouseReleased(MouseEvent e) {
                            if (e.isPopupTrigger()) {
                                menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                            }
                        }
                    });

                    String comentario = miniatura.cargarComentario();
                    String descripcion = miniatura.producto.getDescripcion();
                    miniatura.setToolTipText("<html><b>" + descripcion + "</b><br>" + (comentario != null ? comentario : "") + "</html>");

                    gbc.gridx = col;
                    gbc.gridy = row;
                    contenedor.add(miniatura, gbc);

                    col++;
                    if (col == 6) {
                        col = 0;
                        row++;
                    }
                }

                contenedor.revalidate();
                contenedor.repaint();

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(contenedor,
                    "Error al procesar productos por proveedor: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            } finally {
                if (em != null && em.isOpen()) {
                    em.close();
                }
                icono_carga.setVisible(false);
            }
        }
    }.execute();
}



//************************************

public void Filtrar_Lista_Proveedor(int secuencialEmpresa, int secuencialProveedor, JTable tabla) {
    icono_carga.setVisible(true);

    new SwingWorker<List<Producto>, Void>() {
        EntityManager em = null;

        @Override
        protected List<Producto> doInBackground() {
            try {
                em = MonituxDBContext.getEntityManager();
                if (em == null || !em.isOpen()) {
                    throw new IllegalStateException("EntityManager no disponible.");
                }

                String jpql = "SELECT p FROM Producto p " +
                              "WHERE p.Secuencial_Empresa = :empresa " +
                              "AND p.Secuencial_Proveedor = :proveedor";

                TypedQuery<Producto> query = em.createQuery(jpql, Producto.class);
                query.setParameter("empresa", secuencialEmpresa);
                query.setParameter("proveedor", secuencialProveedor);

                return query.getResultList();

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(tabla,
                    "Error al consultar productos por proveedor: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
                return Collections.emptyList();
            }
        }

        @Override
        protected void done() {
            try {
                List<Producto> productos = get();

                DefaultTableModel modelo = new DefaultTableModel(new Object[]{
                    "S", "Codigo", "Descripción", "Marca", "Existencia", "E. mínima",
                    "C. Barra", "C. Fabricante", "F. Vencimiento", "P. Costo", "P. Venta"
                }, 0) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };

                for (Producto producto : productos) {
                    modelo.addRow(new Object[]{
                        producto.getSecuencial(),
                        producto.getCodigo(),
                        producto.getDescripcion(),
                        producto.getMarca(),
                        producto.getCantidad(),
                        producto.getExistencia_Minima(),
                        producto.getCodigo_Barra(),
                        producto.getCodigo_Fabricante(),
                        producto.getFecha_Caducidad(),
                        producto.getPrecio_Costo(),
                        producto.getPrecio_Venta()
                    });
                }

                tabla.setModel(modelo);
                tabla.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                for (MouseListener ml : tabla.getMouseListeners()) {
                    tabla.removeMouseListener(ml);
                }

                tabla.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mousePressed(MouseEvent e) {
                        if (SwingUtilities.isLeftMouseButton(e)) {
                            int fila = tabla.rowAtPoint(e.getPoint());
                            if (fila != -1) {
                                tabla.setRowSelectionInterval(fila, fila);
                            }
                        }
                    }

                    @Override
                    public void mouseClicked(MouseEvent e) {
                        if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {
                            int fila = tabla.rowAtPoint(e.getPoint());
                            if (fila != -1) {
                                tabla.setRowSelectionInterval(fila, fila);
                                String codigo = tabla.getValueAt(fila, 1).toString();

                                Producto productoSeleccionado = productos.stream()
                                    .filter(p -> p.getCodigo().equals(codigo))
                                    .findFirst()
                                    .orElse(null);

                                if (productoSeleccionado != null) {
                                    V_Producto form = new V_Producto(false, productoSeleccionado);
                                    form.setOnProductoEditado(() -> cargarItems_Cuadricula());
                                    form.setVisible(true);
                                }
                            }
                        }
                    }
                });

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(tabla,
                    "Error al procesar productos por proveedor: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            } finally {
                if (em != null && em.isOpen()) {
                    em.close();
                }
                icono_carga.setVisible(false);
            }
        }
    }.execute();
}



//*****************************

public void Filtrar_Existencia_Minima_Cuadricula(int secuencialEmpresa, JPanel contenedor) {
    icono_carga.setVisible(true);
    contenedor.setLayout(new GridBagLayout());
    contenedor.removeAll();

    new SwingWorker<List<Producto>, Void>() {
        EntityManager em = null;

        @Override
        protected List<Producto> doInBackground() {
            try {
                em = MonituxDBContext.getEntityManager();
                if (em == null || !em.isOpen()) {
                    throw new IllegalStateException("EntityManager no disponible.");
                }

                String jpql = "SELECT p FROM Producto p " +
                              "WHERE p.Secuencial_Empresa = :empresa " +
                              "AND p.Cantidad = p.Existencia_Minima " +
                              "AND p.Tipo <> 'Servicio'";

                TypedQuery<Producto> query = em.createQuery(jpql, Producto.class);
                query.setParameter("empresa", secuencialEmpresa);
                return query.getResultList();

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(contenedor,
                    "Error al consultar productos con existencia mínima: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
                return new ArrayList<>();
            }
        }

        @Override
        protected void done() {
            try {
                List<Producto> productos = get();

                GridBagConstraints gbc = new GridBagConstraints();
                gbc.insets = new Insets(5, 5, 5, 5);
                gbc.fill = GridBagConstraints.NONE;
                gbc.anchor = GridBagConstraints.NORTHWEST;

                int col = 0, row = 0;

                for (Producto producto : productos) {
                    Miniatura_Producto miniatura = new Miniatura_Producto(producto, false);
                    miniatura.setPreferredSize(new Dimension(120, 170));

                    miniatura.addMouseListener(new MouseAdapter() {
                        @Override
                        public void mouseClicked(MouseEvent e) {
                            if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {
                                Producto productoSeleccionado = miniatura.producto;
                                V_Kardex kardex = new V_Kardex(
                                    productoSeleccionado.getProducto().getSecuencial(),
                                    productoSeleccionado.getProducto().getCodigo()
                                );
                                kardex.setVisible(true);
                                kardex.setLocationRelativeTo(null);
                            }
                        }

                        @Override
                        public void mousePressed(MouseEvent e) {
                            if (e.isPopupTrigger()) {
                                menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                            }
                        }

                        @Override
                        public void mouseReleased(MouseEvent e) {
                            if (e.isPopupTrigger()) {
                                menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                            }
                        }
                    });

                    String comentario = miniatura.cargarComentario();
                    String descripcion = miniatura.producto.getDescripcion();
                    miniatura.setToolTipText("<html><b>" + descripcion + "</b><br>" + (comentario != null ? comentario : "") + "</html>");

                    gbc.gridx = col;
                    gbc.gridy = row;
                    contenedor.add(miniatura, gbc);

                    col++;
                    if (col == 6) {
                        col = 0;
                        row++;
                    }
                }

                contenedor.revalidate();
                contenedor.repaint();

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(contenedor,
                    "Error al procesar productos con existencia mínima: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            } finally {
                if (em != null && em.isOpen()) {
                    em.close();
                }
                icono_carga.setVisible(false);
            }
        }
    }.execute();
}


//************************************




public void Filtrar_Servicios_Cuadricula(int secuencialEmpresa, JPanel contenedor) {
    icono_carga.setVisible(true);
    contenedor.setLayout(new GridBagLayout());
    contenedor.removeAll();

    new SwingWorker<List<Producto>, Void>() {
        @Override
        protected List<Producto> doInBackground() {
            EntityManager em = null;
            try {
                em = MonituxDBContext.getEntityManager();
                if (em == null || !em.isOpen()) {
                    throw new IllegalStateException("EntityManager no disponible.");
                }

                String jpql = "SELECT p FROM Producto p " +
                              "WHERE p.Secuencial_Empresa = :empresa " +
                              "AND p.Tipo = 'Servicio'";

                return em.createQuery(jpql, Producto.class)
                         .setParameter("empresa", secuencialEmpresa)
                         .getResultList();

            } catch (Exception ex) {
                SwingUtilities.invokeLater(() ->
                    JOptionPane.showMessageDialog(contenedor,
                        "Error al consultar servicios: " + ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE)
                );
                ex.printStackTrace();
                return Collections.emptyList();
            } finally {
                if (em != null && em.isOpen()) {
                    try {
                        em.close();
                    } catch (Exception ignored) {
                        // Silenciado
                    }
                }
            }
        }

        @Override
        protected void done() {
            try {
                List<Producto> productos = get();

                GridBagConstraints gbc = new GridBagConstraints();
                gbc.insets = new Insets(5, 5, 5, 5);
                gbc.fill = GridBagConstraints.NONE;
                gbc.anchor = GridBagConstraints.NORTHWEST;

                int col = 0, row = 0;

                for (Producto producto : productos) {
                    Miniatura_Producto miniatura = new Miniatura_Producto(producto, false);
                    miniatura.setPreferredSize(new Dimension(120, 170));

                    miniatura.addMouseListener(new MouseAdapter() {
                        @Override
                        public void mouseClicked(MouseEvent e) {
                            if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {
                                Producto productoSeleccionado = miniatura.producto;
                                if (productoSeleccionado != null) {
                                    V_Producto form = new V_Producto(false, productoSeleccionado);
                                    form.setOnProductoEditado(() -> cargarItems_Cuadricula());
                                    form.setVisible(true);
                                }
                            }
                        }

                        @Override
                        public void mousePressed(MouseEvent e) {
                            if (e.isPopupTrigger()) {
                                menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                            }
                        }

                        @Override
                        public void mouseReleased(MouseEvent e) {
                            if (e.isPopupTrigger()) {
                                menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                            }
                        }
                    });

                    String comentario = miniatura.cargarComentario();
                    String descripcion = miniatura.producto.getDescripcion();
                    miniatura.setToolTipText("<html><b>" + descripcion + "</b><br>" + (comentario != null ? comentario : "") + "</html>");

                    gbc.gridx = col;
                    gbc.gridy = row;
                    contenedor.add(miniatura, gbc);

                    col++;
                    if (col == 6) {
                        col = 0;
                        row++;
                    }
                }

                contenedor.revalidate();
                contenedor.repaint();

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(contenedor,
                    "Error al procesar servicios: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            } finally {
                icono_carga.setVisible(false);
            }
        }
    }.execute();
}










//*************************************

public void Filtrar_Servicios_Lista(int secuencialEmpresa, JTable tabla) {
    icono_carga.setVisible(true);

    new SwingWorker<List<Producto>, Void>() {
        @Override
        protected List<Producto> doInBackground() {
            EntityManager em = null;
            try {
                em = MonituxDBContext.getEntityManager();
                if (em == null || !em.isOpen()) {
                    throw new IllegalStateException("EntityManager no disponible.");
                }

                String jpql = "SELECT p FROM Producto p " +
                              "WHERE p.Secuencial_Empresa = :empresa " +
                              "AND p.Tipo = 'Servicio'";

                return em.createQuery(jpql, Producto.class)
                         .setParameter("empresa", secuencialEmpresa)
                         .getResultList();

            } catch (Exception ex) {
                SwingUtilities.invokeLater(() ->
                    JOptionPane.showMessageDialog(tabla,
                        "❌ Error al consultar servicios: " + ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE)
                );
                ex.printStackTrace();
                return Collections.emptyList();
            } finally {
                if (em != null && em.isOpen()) {
                    try {
                        em.close();
                    } catch (Exception ignored) {
                        // Silenciado
                    }
                }
            }
        }

        @Override
        protected void done() {
            try {
                List<Producto> productos = get();

                DefaultTableModel modelo = new DefaultTableModel(new Object[]{
                    "S", "Codigo", "Descripción", "Marca", "Existencia", "E. mínima",
                    "C. Barra", "C. Fabricante", "F. Vencimiento", "P. Costo", "P. Venta"
                }, 0) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };

                for (Producto producto : productos) {
                    modelo.addRow(new Object[]{
                        producto.getSecuencial(),
                        producto.getCodigo(),
                        producto.getDescripcion(),
                        producto.getMarca(),
                        producto.getCantidad(),
                        producto.getExistencia_Minima(),
                        producto.getCodigo_Barra(),
                        producto.getCodigo_Fabricante(),
                        producto.getFecha_Caducidad(),
                        producto.getPrecio_Costo(),
                        producto.getPrecio_Venta()
                    });
                }

                tabla.setModel(modelo);
                tabla.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                for (MouseListener ml : tabla.getMouseListeners()) {
                    tabla.removeMouseListener(ml);
                }

                tabla.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mousePressed(MouseEvent e) {
                        if (SwingUtilities.isLeftMouseButton(e)) {
                            int fila = tabla.rowAtPoint(e.getPoint());
                            if (fila != -1) {
                                tabla.setRowSelectionInterval(fila, fila);
                            }
                        }
                    }

                    @Override
                    public void mouseClicked(MouseEvent e) {
                        if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {
                            int fila = tabla.rowAtPoint(e.getPoint());
                            if (fila != -1) {
                                tabla.setRowSelectionInterval(fila, fila);
                                String codigo = tabla.getValueAt(fila, 1).toString();

                                Producto productoSeleccionado = productos.stream()
                                    .filter(p -> p.getCodigo().equals(codigo))
                                    .findFirst()
                                    .orElse(null);

                                if (productoSeleccionado != null) {
                                    V_Producto form = new V_Producto(false, productoSeleccionado);
                                    form.setOnProductoEditado(() -> cargarItems_Cuadricula());
                                    form.setVisible(true);
                                }
                            }
                        }
                    }
                });

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(tabla,
                    "❌ Error al procesar servicios: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            } finally {
                icono_carga.setVisible(false);
            }
        }
    }.execute();
}


public void Filtrar_Agotados_Cuadricula(int secuencialEmpresa, JPanel contenedor) {
    icono_carga.setVisible(true);
    contenedor.setLayout(new GridBagLayout());
    contenedor.removeAll();

    new SwingWorker<List<Producto>, Void>() {
        @Override
        protected List<Producto> doInBackground() {
            EntityManager em = null;
            try {
                em = MonituxDBContext.getEntityManager();
                if (em == null || !em.isOpen()) {
                    throw new IllegalStateException("EntityManager no disponible.");
                }

                String jpql = "SELECT p FROM Producto p " +
                              "WHERE p.Secuencial_Empresa = :empresa " +
                              "AND p.Cantidad < p.Existencia_Minima " +
                              "AND p.Tipo <> 'Servicio'";

                return em.createQuery(jpql, Producto.class)
                         .setParameter("empresa", secuencialEmpresa)
                         .getResultList();

            } catch (Exception ex) {
                SwingUtilities.invokeLater(() ->
                    JOptionPane.showMessageDialog(contenedor,
                        "❌ Error al consultar productos agotados: " + ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE)
                );
                ex.printStackTrace();
                return new ArrayList<>();
            } finally {
                if (em != null && em.isOpen()) {
                    try {
                        em.close();
                    } catch (Exception ignored) {
                        // Silenciado
                    }
                }
            }
        }

        @Override
        protected void done() {
            try {
                List<Producto> productos = get();

                GridBagConstraints gbc = new GridBagConstraints();
                gbc.insets = new Insets(5, 5, 5, 5);
                gbc.fill = GridBagConstraints.NONE;
                gbc.anchor = GridBagConstraints.NORTHWEST;

                int col = 0, row = 0;

                for (Producto producto : productos) {
                    Miniatura_Producto miniatura = new Miniatura_Producto(producto, false);
                    miniatura.setPreferredSize(new Dimension(120, 170));

                    miniatura.addMouseListener(new MouseAdapter() {
                        @Override
                        public void mouseClicked(MouseEvent e) {
                            if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {
                                Producto productoSeleccionado = miniatura.producto;
                                V_Kardex kardex = new V_Kardex(
                                    productoSeleccionado.getProducto().getSecuencial(),
                                    productoSeleccionado.getProducto().getCodigo()
                                );
                                kardex.setVisible(true);
                                kardex.setLocationRelativeTo(null);
                            }
                        }

                        @Override
                        public void mousePressed(MouseEvent e) {
                            if (e.isPopupTrigger()) {
                                menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                            }
                        }

                        @Override
                        public void mouseReleased(MouseEvent e) {
                            if (e.isPopupTrigger()) {
                                menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                            }
                        }
                    });

                    String comentario = miniatura.cargarComentario();
                    String descripcion = miniatura.producto.getDescripcion();
                    miniatura.setToolTipText("<html><b>" + descripcion + "</b><br>" + (comentario != null ? comentario : "") + "</html>");

                    gbc.gridx = col;
                    gbc.gridy = row;
                    contenedor.add(miniatura, gbc);

                    col++;
                    if (col == 6) {
                        col = 0;
                        row++;
                    }
                }

                contenedor.revalidate();
                contenedor.repaint();

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(contenedor,
                    "Error al procesar productos agotados: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            } finally {
                icono_carga.setVisible(false);
            }
        }
    }.execute();
}




public void Filtrar_Lista_Categoria(int secuencialEmpresa, int secuencialCategoria, JTable tabla) {
    icono_carga.setVisible(true);

    new SwingWorker<List<Producto>, Void>() {
        EntityManager em = null;

        @Override
        protected List<Producto> doInBackground() {
            try {
                em = MonituxDBContext.getEntityManager();
                if (em == null || !em.isOpen()) {
                    throw new IllegalStateException("EntityManager no disponible.");
                }

                String jpql = "SELECT p FROM Producto p " +
                              "WHERE p.Secuencial_Empresa = :empresa " +
                              "AND p.Secuencial_Categoria = :categoria";

                TypedQuery<Producto> query = em.createQuery(jpql, Producto.class);
                query.setParameter("empresa", secuencialEmpresa);
                query.setParameter("categoria", secuencialCategoria);

                return query.getResultList();

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(tabla,
                    "Error al consultar productos por categoría: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
                return Collections.emptyList();
            }
        }

        @Override
        protected void done() {
            try {
                List<Producto> productos = get();

                DefaultTableModel modelo = new DefaultTableModel(new Object[]{
                    "S", "Codigo", "Descripción", "Marca", "Existencia", "E. mínima",
                    "C. Barra", "C. Fabricante", "F. Vencimiento", "P. Costo", "P. Venta"
                }, 0) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };

                for (Producto producto : productos) {
                    modelo.addRow(new Object[]{
                        producto.getSecuencial(),
                        producto.getCodigo(),
                        producto.getDescripcion(),
                        producto.getMarca(),
                        producto.getCantidad(),
                        producto.getExistencia_Minima(),
                        producto.getCodigo_Barra(),
                        producto.getCodigo_Fabricante(),
                        producto.getFecha_Caducidad(),
                        producto.getPrecio_Costo(),
                        producto.getPrecio_Venta()
                    });
                }

                tabla.setModel(modelo);
                tabla.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                for (MouseListener ml : tabla.getMouseListeners()) {
                    tabla.removeMouseListener(ml);
                }

                tabla.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mousePressed(MouseEvent e) {
                        if (SwingUtilities.isLeftMouseButton(e)) {
                            int fila = tabla.rowAtPoint(e.getPoint());
                            if (fila != -1) {
                                tabla.setRowSelectionInterval(fila, fila);
                            }
                        }
                    }

                    @Override
                    public void mouseClicked(MouseEvent e) {
                        if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {
                            int fila = tabla.rowAtPoint(e.getPoint());
                            if (fila != -1) {
                                tabla.setRowSelectionInterval(fila, fila);
                                String codigo = tabla.getValueAt(fila, 1).toString();

                                Producto productoSeleccionado = productos.stream()
                                    .filter(p -> p.getCodigo().equals(codigo))
                                    .findFirst()
                                    .orElse(null);

                                if (productoSeleccionado != null) {
                                    V_Producto form = new V_Producto(false, productoSeleccionado);
                                    form.setOnProductoEditado(() -> cargarItems_Cuadricula());
                                    form.setVisible(true);
                                }
                            }
                        }
                    }
                });

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(tabla,
                    "Error al procesar productos por categoría: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            } finally {
                if (em != null && em.isOpen()) {
                    em.close();
                }
                icono_carga.setVisible(false);
            }
        }
    }.execute();
}



//************************************
public void Filtrar_Cuadricula_Categoria(int secuencialEmpresa, int secuencialCategoria, JPanel contenedor) {
    icono_carga.setVisible(true);
    contenedor.setLayout(new GridBagLayout());
    contenedor.removeAll();

    new SwingWorker<List<Producto>, Void>() {
        EntityManager em = null;

        @Override
        protected List<Producto> doInBackground() {
            try {
                em = MonituxDBContext.getEntityManager();
                if (em == null || !em.isOpen()) {
                    throw new IllegalStateException("EntityManager no disponible.");
                }

                String jpql = "SELECT p FROM Producto p WHERE p.Secuencial_Empresa = :empresa AND p.Secuencial_Categoria = :categoria";
                TypedQuery<Producto> query = em.createQuery(jpql, Producto.class);
                query.setParameter("empresa", secuencialEmpresa);
                query.setParameter("categoria", secuencialCategoria);

                return query.getResultList();

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(contenedor,
                    "Error al consultar productos por categoría: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
                return new ArrayList<>();
            }
        }

        @Override
        protected void done() {
            try {
                List<Producto> productos = get();

                GridBagConstraints gbc = new GridBagConstraints();
                gbc.insets = new Insets(5, 5, 5, 5);
                gbc.fill = GridBagConstraints.NONE;
                gbc.anchor = GridBagConstraints.NORTHWEST;

                int col = 0, row = 0;

                for (Producto producto : productos) {
                    Miniatura_Producto miniatura = new Miniatura_Producto(producto, false);
                    miniatura.setPreferredSize(new Dimension(120, 170));

                    miniatura.addMouseListener(new MouseAdapter() {
                        @Override
                        public void mouseClicked(MouseEvent e) {
                            if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {
                                Producto productoSeleccionado = miniatura.producto;
                                V_Kardex kardex = new V_Kardex(
                                    productoSeleccionado.getProducto().getSecuencial(),
                                    productoSeleccionado.getProducto().getCodigo()
                                );
                                kardex.setVisible(true);
                                kardex.setLocationRelativeTo(null);
                            }
                        }

                        @Override
                        public void mousePressed(MouseEvent e) {
                            if (e.isPopupTrigger()) {
                                menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                            }
                        }

                        @Override
                        public void mouseReleased(MouseEvent e) {
                            if (e.isPopupTrigger()) {
                                menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                            }
                        }
                    });

                    String comentario = miniatura.cargarComentario();
                    String descripcion = miniatura.producto.getDescripcion();
                    miniatura.setToolTipText("<html><b>" + descripcion + "</b><br>" + (comentario != null ? comentario : "") + "</html>");

                    gbc.gridx = col;
                    gbc.gridy = row;
                    contenedor.add(miniatura, gbc);

                    col++;
                    if (col == 6) {
                        col = 0;
                        row++;
                    }
                }

                contenedor.revalidate();
                contenedor.repaint();

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(contenedor,
                    "Error al procesar productos por categoría: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            } finally {
                if (em != null && em.isOpen()) {
                    em.close();
                }
                icono_carga.setVisible(false);
            }
        }
    }.execute();
}




//************************************
public void cargar_Items_Cuadricula(int secuencialEmpresa, JPanel contenedor) {
    icono_carga.setVisible(true);
    contenedor.setLayout(new GridBagLayout());
    contenedor.removeAll();

    new SwingWorker<List<Producto>, Void>() {
        EntityManager em = null;

        @Override
        protected List<Producto> doInBackground() {
            try {
                em = MonituxDBContext.getEntityManager();
                if (em == null || !em.isOpen()) {
                    throw new IllegalStateException("EntityManager no disponible.");
                }

                return em.createQuery(
                    "SELECT p FROM Producto p WHERE p.Secuencial_Empresa = :empresa", Producto.class)
                    .setParameter("empresa", secuencialEmpresa)
                    .getResultList();

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(contenedor,
                    "Error al consultar productos: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
                return Collections.emptyList();
            }
        }

        @Override
        protected void done() {
            try {
                List<Producto> productos = get();

                GridBagConstraints gbc = new GridBagConstraints();
                gbc.insets = new Insets(5, 5, 5, 5);
                gbc.fill = GridBagConstraints.NONE;
                gbc.anchor = GridBagConstraints.NORTHWEST;

                int col = 0, row = 0;

                for (Producto producto : productos) {
                    Miniatura_Producto miniatura = new Miniatura_Producto(producto, false);
                    miniatura.setPreferredSize(new Dimension(120, 170));

                    miniatura.addMouseListener(new MouseAdapter() {
                        @Override
                        public void mouseClicked(MouseEvent e) {
                            if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {
                                Producto productoSeleccionado = miniatura.producto;
                                if (!"Servicio".equals(productoSeleccionado.getTipo())) {
                                    V_Kardex kardex = new V_Kardex(
                                        productoSeleccionado.getProducto().getSecuencial(),
                                        productoSeleccionado.getProducto().getCodigo()
                                    );
                                    kardex.setVisible(true);
                                    kardex.setLocationRelativeTo(null);
                                }
                            }
                        }

                        @Override
                        public void mousePressed(MouseEvent e) {
                            if (e.isPopupTrigger()) {
                                menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                            }
                        }

                        @Override
                        public void mouseReleased(MouseEvent e) {
                            if (e.isPopupTrigger()) {
                                menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                            }
                        }
                    });

                    String comentario = miniatura.cargarComentario();
                    String descripcion = miniatura.producto.getDescripcion();
                    miniatura.setToolTipText(
                        comentario != null
                            ? "<html><b>" + descripcion + "</b><br>" + comentario + "</html>"
                            : "<html><b>" + descripcion + "</b><br></html>"
                    );

                    gbc.gridx = col;
                    gbc.gridy = row;
                    contenedor.add(miniatura, gbc);

                    col++;
                    if (col == 6) {
                        col = 0;
                        row++;
                    }
                }

                contenedor.revalidate();
                contenedor.repaint();

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(contenedor,
                    "Error al procesar productos: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            } finally {
                if (em != null && em.isOpen()) {
                    em.close();
                }
                icono_carga.setVisible(false);
            }
        }
    }.execute();
}


public void cargar_Items_Lista(int secuencialEmpresa, JTable tabla) {
    icono_carga.setVisible(true);

    new SwingWorker<List<Producto>, Void>() {
        @Override
        protected List<Producto> doInBackground() {
            EntityManager em = null;
            try {
                em = MonituxDBContext.getEntityManager();
                if (em == null || !em.isOpen()) {
                    throw new IllegalStateException("EntityManager no disponible.");
                }

                return em.createQuery(
                    "SELECT p FROM Producto p WHERE p.Secuencial_Empresa = :empresa", Producto.class)
                    .setParameter("empresa", secuencialEmpresa)
                    .getResultList();

            } catch (Exception ex) {
                SwingUtilities.invokeLater(() ->
                    JOptionPane.showMessageDialog(null, "❌ Error al cargar productos: " + ex.getMessage())
                );
                ex.printStackTrace();
                return Collections.emptyList();
            } finally {
                if (em != null && em.isOpen()) {
                    try {
                        em.close();
                    } catch (Exception ignored) {
                        // Silenciado
                    }
                }
            }
        }

        @Override
        protected void done() {
            try {
                List<Producto> productos = get();

                DefaultTableModel modelo = new DefaultTableModel(new Object[]{
                    "S", "Codigo", "Descripción", "Marca", "Existencia", "E. mínima",
                    "C. Barra", "C. Fabricante", "F. Vencimiento", "P. Costo", "P. Venta"
                }, 0) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };

                for (Producto producto : productos) {
                    modelo.addRow(new Object[]{
                        producto.getSecuencial(),
                        producto.getCodigo(),
                        producto.getDescripcion(),
                        producto.getMarca(),
                        producto.getCantidad(),
                        producto.getExistencia_Minima(),
                        producto.getCodigo_Barra(),
                        producto.getCodigo_Fabricante(),
                        producto.getFecha_Caducidad(),
                        producto.getPrecio_Costo(),
                        producto.getPrecio_Venta()
                    });
                }

                tabla.setModel(modelo);
                tabla.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                for (MouseListener ml : tabla.getMouseListeners()) {
                    tabla.removeMouseListener(ml);
                }

                tabla.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mousePressed(MouseEvent e) {
                        if (SwingUtilities.isLeftMouseButton(e)) {
                            int fila = tabla.rowAtPoint(e.getPoint());
                            if (fila != -1) {
                                tabla.setRowSelectionInterval(fila, fila);
                            }
                        }
                    }

                    @Override
                    public void mouseClicked(MouseEvent e) {
                        if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {
                            int fila = tabla.rowAtPoint(e.getPoint());
                            if (fila != -1) {
                                tabla.setRowSelectionInterval(fila, fila);
                                String codigo = tabla.getValueAt(fila, 1).toString();

                                Producto productoSeleccionado = productos.stream()
                                    .filter(p -> p.getCodigo().equals(codigo))
                                    .findFirst()
                                    .orElse(null);

                                if (productoSeleccionado != null) {
                                    V_Producto form = new V_Producto(false, productoSeleccionado);
                                    form.setOnProductoEditado(() -> cargarItems_Cuadricula());
                                    form.setVisible(true);
                                }
                            }
                        }
                    }
                });

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Error al procesar productos: " + ex.getMessage());
                ex.printStackTrace();
            } finally {
                icono_carga.setVisible(false);
            }
        }
    }.execute();
}


//
//public void cargar_Items_Lista(int secuencialEmpresa, JTable tabla) {
//    icono_carga.setVisible(true);
//
//    new SwingWorker<List<Producto>, Void>() {
//        EntityManager em = null;
//
//        @Override
//        protected List<Producto> doInBackground() {
//            try {
//                em = MonituxDBContext.getEntityManager();
//                if (em == null || !em.isOpen()) {
//                    throw new IllegalStateException("EntityManager no disponible.");
//                }
//
//                return em.createQuery(
//                    "SELECT p FROM Producto p WHERE p.Secuencial_Empresa = :empresa", Producto.class)
//                    .setParameter("empresa", secuencialEmpresa)
//                    .getResultList();
//
//            } catch (Exception ex) {
//                SwingUtilities.invokeLater(() ->
//                    JOptionPane.showMessageDialog(null, "Error al cargar productos: " + ex.getMessage())
//                );
//                ex.printStackTrace();
//                return Collections.emptyList();
//            } finally {
//                if (em != null && em.isOpen()) {
//                    em.close();
//                }
//            }
//        }
//
//        @Override
//        protected void done() {
//            try {
//                List<Producto> productos = get();
//
//                DefaultTableModel modelo = new DefaultTableModel(new Object[]{
//                    "S", "Codigo", "Descripción", "Marca", "Existencia", "E. mínima",
//                    "C. Barra", "C. Fabricante", "F. Vencimiento", "P. Costo", "P. Venta"
//                }, 0) {
//                    @Override
//                    public boolean isCellEditable(int row, int column) {
//                        return false;
//                    }
//                };
//
//                for (Producto producto : productos) {
//                    modelo.addRow(new Object[]{
//                        producto.getSecuencial(),
//                        producto.getCodigo(),
//                        producto.getDescripcion(),
//                        producto.getMarca(),
//                        producto.getCantidad(),
//                        producto.getExistencia_Minima(),
//                        producto.getCodigo_Barra(),
//                        producto.getCodigo_Fabricante(),
//                        producto.getFecha_Caducidad(),
//                        producto.getPrecio_Costo(),
//                        producto.getPrecio_Venta()
//                    });
//                }
//
//                tabla.setModel(modelo);
//                tabla.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
//
//                for (MouseListener ml : tabla.getMouseListeners()) {
//                    tabla.removeMouseListener(ml);
//                }
//
//                tabla.addMouseListener(new MouseAdapter() {
//                    @Override
//                    public void mousePressed(MouseEvent e) {
//                        if (SwingUtilities.isLeftMouseButton(e)) {
//                            int fila = tabla.rowAtPoint(e.getPoint());
//                            if (fila != -1) {
//                                tabla.setRowSelectionInterval(fila, fila);
//                            }
//                        }
//                    }
//
//                    @Override
//                    public void mouseClicked(MouseEvent e) {
//                        if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {
//                            int fila = tabla.rowAtPoint(e.getPoint());
//                            if (fila != -1) {
//                                tabla.setRowSelectionInterval(fila, fila);
//                                String codigo = tabla.getValueAt(fila, 1).toString();
//
//                                Producto productoSeleccionado = productos.stream()
//                                    .filter(p -> p.getCodigo().equals(codigo))
//                                    .findFirst()
//                                    .orElse(null);
//
//                                if (productoSeleccionado != null) {
//                                    V_Producto form = new V_Producto(false, productoSeleccionado);
//                                    form.setOnProductoEditado(() -> cargarItems_Cuadricula());
//                                    form.setVisible(true);
//                                }
//                            }
//                        }
//                    }
//                });
//
//            } catch (Exception ex) {
//                JOptionPane.showMessageDialog(null, "Error al procesar productos: " + ex.getMessage());
//                ex.printStackTrace();
//            } finally {
//                icono_carga.setVisible(false);
//            }
//        }
//    }.execute();
//}

public void cargar_Items_Kardex(int secuencialEmpresa, JTable tabla) {
    icono_carga.setVisible(true);

    new SwingWorker<List<Kardex>, Void>() {
        EntityManager em = null;

        @Override
        protected List<Kardex> doInBackground() {
            try {
                em = MonituxDBContext.getEntityManager();
                if (em == null || !em.isOpen()) {
                    throw new IllegalStateException("EntityManager no disponible.");
                }

                return em.createQuery(
                    "SELECT k FROM Kardex k JOIN FETCH k.producto WHERE k.Secuencial_Empresa = :empresa", Kardex.class)
                    .setParameter("empresa", secuencialEmpresa)
                    .getResultList();

            } catch (Exception ex) {
                SwingUtilities.invokeLater(() ->
                    JOptionPane.showMessageDialog(null, "Error al cargar Kardex: " + ex.getMessage())
                );
                ex.printStackTrace();
                return Collections.emptyList();
            } finally {
                if (em != null && em.isOpen()) {
                    em.close();
                }
            }
        }

        @Override
        protected void done() {
            try {
                List<Kardex> kardexList = get();

                DefaultTableModel modelo = new DefaultTableModel(new Object[]{
                    "S", "Codigo", "Fecha", "Descripción", "Movimiento", "Cantidad",
                    "Costo", "Costo Total", "Venta", "Venta Total", "Saldo",
                    "Sec. Producto", "Sec. Empresa"
                }, 0) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };

                for (Kardex k : kardexList) {
                    Producto p = k.getProducto();
                    modelo.addRow(new Object[]{
                        k.getSecuencial(),
                        p != null ? p.getCodigo() : "",
                        k.getFecha(),
                        k.getDescripcion(),
                        k.getMovimiento(),
                        k.getCantidad(),
                        Util.redondear(k.getCosto()),
                        Util.redondear(k.getCosto_Total()),
                        Util.redondear(k.getVenta()),
                        Util.redondear(k.getVenta_Total()),
                        Util.redondear(k.getSaldo()),
                        k.getSecuencial_Producto(),
                        k.getSecuencial_Empresa()
                    });
                }

                tabla.setModel(modelo);
                tabla.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                for (MouseListener ml : tabla.getMouseListeners()) {
                    tabla.removeMouseListener(ml);
                }

                tabla.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mousePressed(MouseEvent e) {
                        if (SwingUtilities.isLeftMouseButton(e)) {
                            int fila = tabla.rowAtPoint(e.getPoint());
                            if (fila != -1) {
                                tabla.setRowSelectionInterval(fila, fila);
                            }
                        }
                    }

                    @Override
                    public void mouseClicked(MouseEvent e) {
                        if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {
                            int fila = tabla.rowAtPoint(e.getPoint());
                            if (fila != -1) {
                                tabla.setRowSelectionInterval(fila, fila);

                                int secuencial = Integer.parseInt(tabla.getValueAt(fila, 0).toString());
                                Kardex seleccionado = kardexList.stream()
                                    .filter(k -> k.getSecuencial() == secuencial)
                                    .findFirst()
                                    .orElse(null);

                                if (seleccionado != null && seleccionado.getProducto() != null) {
                                    V_Kardex kardex = new V_Kardex(
                                        seleccionado.getProducto().getSecuencial(),
                                        seleccionado.getProducto().getCodigo()
                                    );
                                    kardex.setVisible(true);
                                    kardex.setLocationRelativeTo(null);
                                }
                            }
                        }
                    }
                });

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Error al procesar Kardex: " + ex.getMessage());
                ex.printStackTrace();
            } finally {
                icono_carga.setVisible(false);
            }
        }
    }.execute();
}


public void cargar_ItemsFiltrados_Cuadricula(int secuencialEmpresa, JComboBox<String> comboFiltro, JTextField campoValorFiltro, JPanel contenedor) {
    icono_carga.setVisible(true);
    contenedor.setLayout(new GridLayout(0, 6, 5, 5));
    contenedor.removeAll();

    String campoFiltro = (String) comboFiltro.getSelectedItem();
    String valorFiltro = campoValorFiltro.getText();

    boolean aplicarFiltro = campoFiltro != null && !campoFiltro.trim().isEmpty()
                         && valorFiltro != null && !valorFiltro.trim().isEmpty();

    new SwingWorker<List<Producto>, Void>() {
        EntityManager em = null;

        @Override
        protected List<Producto> doInBackground() {
            try {
                em = MonituxDBContext.getEntityManager();
                if (em == null || !em.isOpen()) {
                    throw new IllegalStateException("EntityManager no disponible.");
                }

                String jpql = "SELECT p FROM Producto p WHERE p.Secuencial_Empresa = :empresa"
                            + (aplicarFiltro ? " AND LOWER(p." + campoFiltro + ") LIKE :valorFiltro" : "");

                TypedQuery<Producto> query = em.createQuery(jpql, Producto.class);
                query.setParameter("empresa", secuencialEmpresa);
                if (aplicarFiltro) {
                    query.setParameter("valorFiltro", "%" + valorFiltro.toLowerCase() + "%");
                }

                return query.getResultList();

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(contenedor,
                    "Error al consultar productos filtrados: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
                return Collections.emptyList();
            }
        }

        @Override
        protected void done() {
            try {
                List<Producto> productos = get();

                for (Producto producto : productos) {
                    Miniatura_Producto miniatura = new Miniatura_Producto(producto, false);
                    miniatura.setPreferredSize(new Dimension(120, 170));

                    miniatura.addMouseListener(new MouseAdapter() {
                        @Override
                        public void mouseClicked(MouseEvent e) {
                            if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {
                                Producto productoSeleccionado = miniatura.producto;
                                V_Kardex kardex = new V_Kardex(
                                    productoSeleccionado.getProducto().getSecuencial(),
                                    productoSeleccionado.getProducto().getCodigo()
                                );
                                kardex.setVisible(true);
                                kardex.setLocationRelativeTo(null);
                            }
                        }

                        @Override
                        public void mousePressed(MouseEvent e) {
                            if (e.isPopupTrigger()) {
                                menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                            }
                        }

                        @Override
                        public void mouseReleased(MouseEvent e) {
                            if (e.isPopupTrigger()) {
                                menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                            }
                        }
                    });

                    String comentario = miniatura.cargarComentario();
                    String descripcion = miniatura.producto.getDescripcion();
                    miniatura.setToolTipText("<html><b>" + descripcion + "</b><br>" + (comentario != null ? comentario : "") + "</html>");

                    contenedor.add(miniatura);
                }

                contenedor.revalidate();
                contenedor.repaint();

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(contenedor,
                    "Error al procesar productos filtrados: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            } finally {
                if (em != null && em.isOpen()) {
                    em.close();
                }
                icono_carga.setVisible(false);
            }
        }
    }.execute();
}




 public void cargarItems_Cuadricula() {
    contenedor.removeAll();
    icono_carga.setVisible(true); // Mostrar ícono de carga

    new SwingWorker<Void, Void>() {
        EntityManager em = null;

        @Override
        protected Void doInBackground() {
            try {
                em = MonituxDBContext.getEntityManager();

                // Validar que el EntityManager esté disponible y abierto
                if (em == null || !em.isOpen()) {
                    return null; // Silenciar error y evitar uso
                }

                cargar_Items_Cuadricula(Secuencial_Empresa, contenedor);

            } catch (Exception ex) {
                // Silenciar error sin mostrar ni imprimir
            } finally {
                try {
                    if (em != null && em.isOpen()) {
                        em.close();
                    }
                } catch (Exception cierreEx) {
                    // Silenciar error de cierre
                }
            }
            return null;
        }

        @Override
        protected void done() {
            icono_carga.setVisible(false); // Ocultar ícono de carga
            contenedor.revalidate();
            contenedor.repaint();
        }
    }.execute();
}

    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel contenedor;
    private javax.swing.JFormattedTextField fecha_txt;
    public javax.swing.JLabel icono_carga;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JComboBox<String> jComboBox4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTable kardex_tabla;
    private javax.swing.JTable lista_tabla;
    private javax.swing.JPopupMenu menu_contextual;
    // End of variables declaration//GEN-END:variables
}
