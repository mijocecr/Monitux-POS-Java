/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.monituxpos.Ventanas;

import com.monituxpos.Clases.Miniatura_Producto;
import com.monituxpos.Clases.Producto;
import com.monituxpos.Clases.SelectorCantidad;
import com.monituxpos.Clases.Util;
import static com.monituxpos.Ventanas.V_Factura_Venta.listaDeItems;
import static com.monituxpos.Ventanas.V_Factura_Venta.selectoresCantidad;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.Persistence;
import jakarta.persistence.TypedQuery;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

/**
 *
 * @author Miguel Cerrato
 */
public class V_Inventario extends javax.swing.JPanel {

      public int Secuencial_Empresa=V_Menu_Principal.getSecuencial_Empresa();
      public int Secuencial_Usuario=V_Menu_Principal.getSecuencial_Usuario();
      public String Modo;
    
    /**
     * Creates new form V_Inventario
     */
    public V_Inventario() {
        initComponents();
        
        Util.llenarComboProveedor(jComboBox1, Secuencial_Empresa);
        Util.llenar_Combo_Categoria(jComboBox2, Secuencial_Empresa);
        Modo_Cuadricula();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menu_contextual = new javax.swing.JPopupMenu();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        contenedor = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox<>();
        jTextField1 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        icono_carga = new javax.swing.JLabel();

        jMenu1.setText("Imagen");

        jMenuItem1.setText("Local");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Web");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Hacer Foto");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        menu_contextual.add(jMenu1);

        jMenuItem7.setText("Comentario");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        menu_contextual.add(jMenuItem7);

        jMenu3.setText("Producto");

        jMenuItem4.setText("Agregar Unidades");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem4);

        jMenuItem5.setText("Retirar Unidades");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem5);
        jMenu3.add(jSeparator1);

        jMenuItem6.setText("Ver Producto");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem6);

        menu_contextual.add(jMenu3);

        jMenuItem8.setText("Ampliar");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        menu_contextual.add(jMenuItem8);

        setBackground(new java.awt.Color(44, 117, 255));
        setPreferredSize(new java.awt.Dimension(847, 609));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Inventario");
        jLabel1.setOpaque(true);
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 860, 50));

        jScrollPane1.setBackground(new java.awt.Color(35, 32, 40));
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setHorizontalScrollBar(null);

        contenedor.setBackground(new java.awt.Color(35, 32, 45));
        contenedor.setAutoscrolls(true);
        contenedor.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                contenedorMouseMoved(evt);
            }
        });
        contenedor.setLayout(new java.awt.GridBagLayout());
        jScrollPane1.setViewportView(contenedor);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 152, 840, 410));

        jButton1.setBackground(new java.awt.Color(44, 117, 255));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/box_down.png"))); // NOI18N
        jButton1.setText("<html><b>Nuevo</b><br><i>Producto</i></html>");
        jButton1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 56, 68, 90));

        jButton2.setBackground(new java.awt.Color(44, 117, 255));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/application_view_tile.png"))); // NOI18N
        jButton2.setText("<html><b>Cuadricula</b></html>");
        jButton2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(92, 56, 68, 90));

        jButton3.setBackground(new java.awt.Color(44, 117, 255));
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/application_view_list.png"))); // NOI18N
        jButton3.setText("<html><b>Lista</b></html>");
        jButton3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(166, 56, 68, 90));

        jButton4.setBackground(new java.awt.Color(44, 117, 255));
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/btninventario.png"))); // NOI18N
        jButton4.setText("<html><b>Kardex</b></html>");
        jButton4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 56, 68, 90));

        jButton5.setBackground(new java.awt.Color(44, 117, 255));
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/information.png"))); // NOI18N
        jButton5.setText("<html><b>Servicios</b></html>");
        jButton5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(326, 56, 68, 90));

        jPanel1.setBackground(new java.awt.Color(44, 117, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jPanel1.setVisible(false);

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Proveedor:");
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Categoria:");

        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });
        jComboBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox1MouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jComboBox1MouseReleased(evt);
            }
        });

        jButton7.setText("1 Sem");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("1 Mes");

        jButton6.setText("1 Año");

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Vence en:");

        jButton9.setText("Ver");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("Ver");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(11, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(0, 4, Short.MAX_VALUE))))
        );

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(459, 60, 380, 90));

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Buscar Por:");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 570, -1, 20));

        add(jComboBox3, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 570, 160, -1));

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });
        add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 570, 120, -1));

        jLabel6.setBackground(new java.awt.Color(35, 32, 45));
        jLabel6.setForeground(new java.awt.Color(255, 255, 0));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Existencia Minima");
        jLabel6.setOpaque(true);
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 570, 107, 26));

        jLabel7.setBackground(new java.awt.Color(35, 32, 45));
        jLabel7.setForeground(new java.awt.Color(255, 0, 0));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Agotados");
        jLabel7.setOpaque(true);
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }
        });
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 570, 63, 26));

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/arrow_refresh.png"))); // NOI18N
        jLabel8.setToolTipText("Refrescar Datos.");
        jLabel8.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel8MouseClicked(evt);
            }
        });
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 570, -1, -1));

        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Modo: Cuadricula");
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 570, -1, 30));

        icono_carga.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gifs/spinner1-r.gif"))); // NOI18N
        icono_carga.setVisible(false);
        add(icono_carga, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 570, 32, 32));
    }// </editor-fold>//GEN-END:initComponents

    private void contenedorMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_contenedorMouseMoved
        // TODO add your handling code here:
       
    }//GEN-LAST:event_contenedorMouseMoved

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        
         V_Producto form = new V_Producto();
         if (Modo=="Cuadricula"){
            form.setOnProductoEditado(() -> cargarItems_Cuadricula());
         }
         if (Modo=="Lista"){
         
              //form.setOnProductoEditado(() -> cargarItems_Cuadricula());
         
         }
         
          if (Modo=="Kardex"){
         
              //form.setOnProductoEditado(() -> cargarItems_Cuadricula());
         
         }
         
         
            form.setVisible(true);
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    
    
    
    public void Filtrar_Fecha_Cuadricula(
    int secuencialEmpresa,
    String fechaTexto, // formato dd/MM/yyyy
    JPanel contenedor,
    EntityManager entityManager
) {
    icono_carga.setVisible(true);
    contenedor.setLayout(new GridBagLayout());
    contenedor.removeAll();

    String jpql = "SELECT p FROM Producto p " +
                  "WHERE p.Secuencial_Empresa = :empresa " +
                  "AND p.Fecha_Caducidad = :fecha";

    TypedQuery<Producto> query = entityManager.createQuery(jpql, Producto.class);
    query.setParameter("empresa", secuencialEmpresa);
    query.setParameter("fecha", fechaTexto); // debe coincidir exactamente con el formato en BD

    GridBagConstraints gbc = new GridBagConstraints();
    gbc.insets = new Insets(5, 5, 5, 5);
    gbc.fill = GridBagConstraints.NONE;
    gbc.anchor = GridBagConstraints.NORTHWEST;

    int col = 0, row = 0;

    for (Producto producto : query.getResultList()) {
        Miniatura_Producto miniatura = new Miniatura_Producto(producto, false);
        miniatura.setPreferredSize(new Dimension(120, 170));

        miniatura.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                // Evento click
            }

            @Override
            public void mousePressed(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                }
            }
        });

        String comentario = miniatura.cargarComentario();
        String descripcion = miniatura.producto.getDescripcion();
        miniatura.setToolTipText("<html><b>" + descripcion + "</b><br>" + (comentario != null ? comentario : "") + "</html>");

        gbc.gridx = col;
        gbc.gridy = row;
        contenedor.add(miniatura, gbc);

        col++;
        if (col == 6) {
            col = 0;
            row++;
        }
    }

    contenedor.revalidate();
    contenedor.repaint();
    icono_carga.setVisible(false);
}

    
    
    
    
    
    
    
    public void Modo_Cuadricula(){
    
      Modo="Cuadricula";
        jComboBox3.removeAllItems();
        jComboBox3.addItem("Codigo");
        jComboBox3.addItem("Codigo_Barra");
        jComboBox3.addItem("Codigo_Fabricante");
        jComboBox3.addItem("Descripcion");
        jComboBox3.addItem("Fecha_Caducidad");
        jComboBox3.addItem("Marca");
        jComboBox3.setSelectedIndex(0);
        jLabel9.setText("Modo: Cuadricula");
        jButton5.setVisible(true);
        jPanel1.setVisible(true);
        cargarItems_Cuadricula();
        
    }
    
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

    Modo_Cuadricula();

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

         EntityManagerFactory emf = null;
        EntityManager em = null;

         emf = Persistence.createEntityManagerFactory("MonituxPU");
            em = emf.createEntityManager();


        if (Modo=="Cuadricula"){
         
            Filtrar_Servicios_Cuadricula(Secuencial_Empresa,contenedor,em);
           
        }
        
        if (Modo=="Lista"){
         
            
           
        }
        
        
        

        
        



        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jLabel8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseClicked

        
        
             
        switch (Modo) {
        
            case "Cuadricula":
                
     Modo_Cuadricula();
              
              break;
              
            case "Lista":
                
                break;
                
                
            case "Kardex":
                
                break;
                
            default:
                
                break;
        
        
        
        }
            
        
        
        
        
        
      
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel8MouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

        Component invocador = menu_contextual.getInvoker();
        if (invocador instanceof Miniatura_Producto) {
            Miniatura_Producto miniatura = (Miniatura_Producto) invocador;

            miniatura.actualizarImagenLocal();
            cargarItems_Cuadricula();

        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed

        Component invocador = menu_contextual.getInvoker();
        if (invocador instanceof Miniatura_Producto) {
            Miniatura_Producto miniatura = (Miniatura_Producto) invocador;

            miniatura.actualizarImagenWeb();
            cargarItems_Cuadricula();

        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed

        Component invocador = menu_contextual.getInvoker();
        if (invocador instanceof Miniatura_Producto) {
            Miniatura_Producto miniatura = (Miniatura_Producto) invocador;

            miniatura.actualizarImagenCamara();
            cargarItems_Cuadricula();

        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed

        Component invocador = menu_contextual.getInvoker();
        if (invocador instanceof Miniatura_Producto) {
            Miniatura_Producto miniatura = (Miniatura_Producto) invocador;

            miniatura.Agregar_Comentario(miniatura.getComentario());

            cargarItems_Cuadricula();

        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed

        Component invocador = menu_contextual.getInvoker();
        if (invocador instanceof Miniatura_Producto) {
            Miniatura_Producto miniatura = (Miniatura_Producto) invocador;

            miniatura.actualizarProductoAgregarUnidades();

            cargarItems_Cuadricula();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed

        Component invocador = menu_contextual.getInvoker();
        if (invocador instanceof Miniatura_Producto) {
            Miniatura_Producto miniatura = (Miniatura_Producto) invocador;

            miniatura.actualizarProductoRetirarUnidades();

            cargarItems_Cuadricula();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed

        Component invocador = menu_contextual.getInvoker();
        if (invocador instanceof Miniatura_Producto) {
            Miniatura_Producto miniatura = (Miniatura_Producto) invocador;

            V_Producto form = new V_Producto(false, miniatura.producto);
            form.setOnProductoEditado(() -> cargarItems_Cuadricula());
            form.setVisible(true);
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed

        Component invocador = menu_contextual.getInvoker();
        if (invocador instanceof Miniatura_Producto) {
            Miniatura_Producto miniatura = (Miniatura_Producto) invocador;

            byte[] datosImagen = miniatura.producto.getImagen(); // suponiendo que devuelve byte[]

            ImageIcon imagen = null;

            if (datosImagen != null && datosImagen.length > 0) {
                try {
                    ByteArrayInputStream bis = new ByteArrayInputStream(datosImagen);
                    BufferedImage bufferedImage = ImageIO.read(bis);
                    imagen = new ImageIcon(bufferedImage);
                } catch (IOException e) {
                    e.printStackTrace();
                    // Puedes cargar una imagen por defecto si falla
                    imagen = new ImageIcon(getClass().getResource("/icons/no-image-icon-10.png"));
                }
            } else {
                // Imagen por defecto si no hay datos
                imagen = new ImageIcon(getClass().getResource("/icons/no-image-icon-10.png"));
            }

            try {
                V_Vista_Ampliada v_Vista_Ampliada = new V_Vista_Ampliada(miniatura.producto.getCodigo(),
                    miniatura.producto.getDescripcion(), imagen);
                v_Vista_Ampliada.setVisible(true);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error al cargar la vista ampliada.", "Error", JOptionPane.ERROR_MESSAGE);
            }

        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jComboBox1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox1MouseClicked

        Util.llenarComboProveedor(jComboBox1, Secuencial_Empresa);
        
        
      
        
        
        
        
    
    }//GEN-LAST:event_jComboBox1MouseClicked

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased

      if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
    icono_carga.setVisible(true);

    SwingWorker<Void, Void> worker = new SwingWorker<>() {
        @Override
        protected Void doInBackground() {
            EntityManagerFactory emf = null;
            EntityManager em = null;

            try {
                emf = Persistence.createEntityManagerFactory("MonituxPU");
                em = emf.createEntityManager();

                switch (Modo) {
                    case "Cuadricula": {
                        cargarItemsFiltrados_Cuadricula(Secuencial_Empresa, jComboBox3, jTextField1, contenedor, em);
                        break;
                    }

                    case "Lista":
                        // lógica para modo Lista
                        break;

                    case "Kardex":
                        // lógica para modo Kardex
                        break;

                    default:
                        break;
                }

            } catch (Exception ex) {
                SwingUtilities.invokeLater(() ->
                    JOptionPane.showMessageDialog(null, "Error al cargar vista: " + ex.getMessage())
                );
            } finally {
                if (em != null) em.close();
                if (emf != null) emf.close();
            }

            return null;
        }

        @Override
        protected void done() {
            icono_carga.setVisible(false);
        }
    };

    worker.execute();
}

        
            
        
        
        
       
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1KeyReleased

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged

      
        
        


        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked


        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel2MouseClicked

    private void jComboBox1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox1MouseReleased


        
    

        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1MouseReleased

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed

icono_carga.setVisible(true);

SwingWorker<Void, Void> worker = new SwingWorker<>() {
    @Override
    protected Void doInBackground() {
        EntityManagerFactory emf = null;
        EntityManager em = null;

        try {
            emf = Persistence.createEntityManagerFactory("MonituxPU");
            em = emf.createEntityManager();

            switch (Modo) {
                case "Cuadricula": {
                    String seleccionado = jComboBox1.getSelectedItem().toString();
                    int secuencialProveedor = Integer.parseInt(seleccionado.split("-")[0].trim());

                    Filtrar_Cuadricula_Proveedor(Secuencial_Empresa, secuencialProveedor, contenedor, em);
                    break;
                }

                case "Lista":
                    // lógica para modo Lista
                    break;

                case "Kardex":
                    // lógica para modo Kardex
                    break;

                default:
                    break;
            }

        } catch (Exception ex) {
            SwingUtilities.invokeLater(() -> 
                JOptionPane.showMessageDialog(null, "Error al cargar vista: " + ex.getMessage())
            );
        } finally {
            if (em != null) em.close();
            if (emf != null) emf.close();
        }

        return null;
    }

    @Override
    protected void done() {
        icono_carga.setVisible(false);
    }
};

worker.execute();

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed

        
       icono_carga.setVisible(true);

SwingWorker<Void, Void> worker = new SwingWorker<>() {
    @Override
    protected Void doInBackground() {
        EntityManagerFactory emf = null;
        EntityManager em = null;

        try {
            emf = Persistence.createEntityManagerFactory("MonituxPU");
            em = emf.createEntityManager();

            switch (Modo) {
                case "Cuadricula": {
                    String seleccionado = jComboBox2.getSelectedItem().toString();
                    int secuencialCategoria = Integer.parseInt(seleccionado.split("-")[0].trim());

                    Filtrar_Cuadricula_Categoria(Secuencial_Empresa, secuencialCategoria, contenedor, em);
                    break;
                }

                case "Lista":
                    // lógica para modo Lista
                    break;

                case "Kardex":
                    // lógica para modo Kardex
                    break;

                default:
                    // modo desconocido
                    break;
            }

        } catch (Exception ex) {
            SwingUtilities.invokeLater(() -> 
                JOptionPane.showMessageDialog(null, "Error al cargar vista: " + ex.getMessage())
            );
        } finally {
            if (em != null) em.close();
            if (emf != null) emf.close();
        }

        return null;
    }

    @Override
    protected void done() {
        icono_carga.setVisible(false);
    }
};

worker.execute();



        // TODO add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked

       
        
        switch (Modo){
        
        
            case "Cuadricula":
                
                
       icono_carga.setVisible(true);

SwingWorker<Void, Void> worker = new SwingWorker<>() {
    @Override
    protected Void doInBackground() {
        EntityManagerFactory emf = null;
        EntityManager em = null;

        try {
            emf = Persistence.createEntityManagerFactory("MonituxPU");
            em = emf.createEntityManager();

            Filtrar_Existencia_Minima_Cuadricula(Secuencial_Empresa, contenedor, em);

        } catch (Exception ex) {
            SwingUtilities.invokeLater(() ->
                JOptionPane.showMessageDialog(null, "Error al cargar productos: " + ex.getMessage())
            );
        } finally {
            if (em != null) em.close();
            if (emf != null) emf.close();
        }

        return null;
    }

    @Override
    protected void done() {
        icono_carga.setVisible(false);
    }
};

worker.execute();
     
                break;
                
            case "Lista":
                
                break;
                
                
            case "Kardex":
            
            break;
                
            default:
                break;
        
        
        }
        
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel6MouseClicked

    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseClicked

        
        
        
        switch (Modo){
        
        
            case "Cuadricula":
                
                
       icono_carga.setVisible(true);

SwingWorker<Void, Void> worker = new SwingWorker<>() {
    @Override
    protected Void doInBackground() {
        EntityManagerFactory emf = null;
        EntityManager em = null;

        try {
            emf = Persistence.createEntityManagerFactory("MonituxPU");
            em = emf.createEntityManager();

            Filtrar_Agotados_Cuadricula(Secuencial_Empresa, contenedor, em);

        } catch (Exception ex) {
            SwingUtilities.invokeLater(() ->
                JOptionPane.showMessageDialog(null, "Error al cargar productos: " + ex.getMessage())
            );
        } finally {
            if (em != null) em.close();
            if (emf != null) emf.close();
        }

        return null;
    }

    @Override
    protected void done() {
        icono_carga.setVisible(false);
    }
};

worker.execute();
     
                break;
                
            case "Lista":
                
                break;
                
                
            case "Kardex":
            
            break;
                
            default:
                break;
        
        
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel7MouseClicked

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed

        
                
                 EntityManagerFactory emf = null;
        EntityManager em = null;

        
         emf = Persistence.createEntityManagerFactory("MonituxPU");
            em = emf.createEntityManager();

        
        
        switch (Modo){
            
            
            case "Cuadricula":
                
        
        
        LocalDate hoy = LocalDate.now();

// Sumar 7 días
LocalDate fechaMas7 = hoy.plusDays(7);

// Formatear como dd/MM/yyyy
DateTimeFormatter formato = DateTimeFormatter.ofPattern("dd/MM/yyyy");
String fechaTexto = fechaMas7.format(formato);

// Usar como parámetro en el método de filtrado
Filtrar_Fecha_Cuadricula(Secuencial_Empresa, fechaTexto, contenedor, em);
        
                
                
                break;
                
            case "Lista":
                
                break;
                
            default:
                
                break;
                
        
        }
        

// TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

 
public void cargarItems_Cuadricula(int secuencialEmpresa, JPanel contenedor, EntityManager entityManager) {

    icono_carga.setVisible(true);
    contenedor.setLayout(new GridLayout(0, 5, 5, 5)); // 3 columnas, filas dinámicas
  
    contenedor.removeAll();
   
    
    // 🔍 Consulta JPA
    List<Producto> productos = entityManager
        .createQuery("SELECT p FROM Producto p WHERE p.Secuencial_Empresa = :empresa", Producto.class)
        .setParameter("empresa", secuencialEmpresa)
        .getResultList();

    for (Producto producto : productos) {
        ImageIcon imagenIcon = producto.getImagen() != null && producto.getImagen().length > 0
            ? new ImageIcon(producto.getImagen())
            : new ImageIcon(getClass().getResource("/icons/no-image-icon-10.png"));
//ImageIcon icono = new ImageIcon(getClass().getResource("/icons/no-image-icon-10.png"));

       
        Miniatura_Producto miniatura = new Miniatura_Producto(producto,false);

        
      
        miniatura.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                SelectorCantidad selector = selectoresCantidad.computeIfAbsent(
                    producto.getCodigo(),
                    codigo -> {
                        SelectorCantidad nuevo = new SelectorCantidad(codigo,0);
                        nuevo.setCantidad(0);
                        
                        return nuevo;
                    }
                );

                if (!listaDeItems.containsKey(producto.getCodigo())) {
                    listaDeItems.put(producto.getCodigo(), miniatura);
                    
                } 

            }
        });
        
        
        
// Agregar el menú contextual
miniatura.addMouseListener(new MouseAdapter() {
    @Override
    public void mousePressed(MouseEvent e) {
        if (e.isPopupTrigger()) {
            menu_contextual.show(e.getComponent(), e.getX(), e.getY());
        }
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
            menu_contextual.show(e.getComponent(), e.getX(), e.getY());
        }
    }
});

if (miniatura.cargarComentario()!=null){

 //miniatura.setToolTipText(miniatura.cargarComentario());
 
 
 miniatura.setToolTipText("<html><b>" + miniatura.producto.getDescripcion() + "</b><br>"+miniatura.cargarComentario()+"</html>");
 
 //<html><b>Actualizar</b><br>Detalle</html>
}else{

    miniatura.setToolTipText("<html><b>" + miniatura.producto.getDescripcion() + "</b><br></html>");
 
}

        contenedor.add(miniatura);
    }

    contenedor.revalidate();
    contenedor.repaint();
    
    icono_carga.setVisible(false);
    
}



public void cargarItemsFiltrados_Cuadricula(
    int secuencialEmpresa,
    JComboBox<String> comboFiltro,
    JTextField campoValorFiltro,
    JPanel contenedor,
    
    EntityManager entityManager
) {
    icono_carga.setVisible(true);

    // Usamos GridBagLayout para evitar el ajuste automático de tamaño
    contenedor.setLayout(new GridBagLayout());
    
    contenedor.removeAll();
    

    String campoFiltro = (String) comboFiltro.getSelectedItem();
    String valorFiltro = campoValorFiltro.getText();

    boolean aplicarFiltro = campoFiltro != null && !campoFiltro.trim().isEmpty()
                         && valorFiltro != null && !valorFiltro.trim().isEmpty();

    String jpql = "SELECT p FROM Producto p WHERE p.Secuencial_Empresa = :empresa"
                + (aplicarFiltro ? " AND LOWER(p." + campoFiltro + ") LIKE :valorFiltro" : "");

    TypedQuery<Producto> query = entityManager.createQuery(jpql, Producto.class);
    query.setParameter("empresa", secuencialEmpresa);
    if (aplicarFiltro) {
        query.setParameter("valorFiltro", "%" + valorFiltro.toLowerCase() + "%");
    }

    GridBagConstraints gbc = new GridBagConstraints();
    gbc.insets = new Insets(5, 5, 5, 5); // Espaciado entre miniaturas
    gbc.fill = GridBagConstraints.NONE; // No expandir
    gbc.anchor = GridBagConstraints.NORTHWEST;

    int col = 0, row = 0;

    for (Producto producto : query.getResultList()) {
        Miniatura_Producto miniatura = new Miniatura_Producto(producto, false);
        miniatura.setPreferredSize(new Dimension(120, 170)); // Tamaño fijo

        miniatura.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
               
                //Evento Click
              
            }

            @Override
            public void mousePressed(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                }
            }
        });

        String comentario = miniatura.cargarComentario();
        String descripcion = miniatura.producto.getDescripcion();
        miniatura.setToolTipText("<html><b>" + descripcion + "</b><br>" + (comentario != null ? comentario : "") + "</html>");

        // Posicionamiento en la cuadrícula
        gbc.gridx = col;
        gbc.gridy = row;
        contenedor.add(miniatura, gbc);

        col++;
        if (col == 6) {
            col = 0;
            row++;
        }
    }

    contenedor.revalidate();
    contenedor.repaint();
    icono_carga.setVisible(false);
}

//************************************

public void Filtrar_Cuadricula_Proveedor(
    int secuencialEmpresa,
    int secuencialProveedor,
    JPanel contenedor,
    EntityManager entityManager
) {
    icono_carga.setVisible(true);
    contenedor.setLayout(new GridBagLayout());
    contenedor.removeAll();

    String jpql = "SELECT p FROM Producto p WHERE p.Secuencial_Empresa = :empresa AND p.Secuencial_Proveedor = :proveedor";
    TypedQuery<Producto> query = entityManager.createQuery(jpql, Producto.class);
    query.setParameter("empresa", secuencialEmpresa);
    query.setParameter("proveedor", secuencialProveedor);

    GridBagConstraints gbc = new GridBagConstraints();
    gbc.insets = new Insets(5, 5, 5, 5);
    gbc.fill = GridBagConstraints.NONE;
    gbc.anchor = GridBagConstraints.NORTHWEST;

    int col = 0, row = 0;

    for (Producto producto : query.getResultList()) {
        Miniatura_Producto miniatura = new Miniatura_Producto(producto, false);
        miniatura.setPreferredSize(new Dimension(120, 170));

        miniatura.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                // Evento click
            }

            @Override
            public void mousePressed(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                }
            }
        });

        String comentario = miniatura.cargarComentario();
        String descripcion = miniatura.producto.getDescripcion();
        miniatura.setToolTipText("<html><b>" + descripcion + "</b><br>" + (comentario != null ? comentario : "") + "</html>");

        gbc.gridx = col;
        gbc.gridy = row;
        contenedor.add(miniatura, gbc);

        col++;
        if (col == 6) {
            col = 0;
            row++;
        }
    }

    contenedor.revalidate();
    contenedor.repaint();
    icono_carga.setVisible(false);
}



//************************************

public void Filtrar_Existencia_Minima_Cuadricula(
    int secuencialEmpresa,
    JPanel contenedor,
    EntityManager entityManager
) {
    icono_carga.setVisible(true);
    contenedor.setLayout(new GridBagLayout());
    contenedor.removeAll();

    String jpql = "SELECT p FROM Producto p " +
                  "WHERE p.Secuencial_Empresa = :empresa " +
                  "AND p.Cantidad = p.Existencia_Minima " +
                  "AND p.Tipo <> 'Servicio'";

    TypedQuery<Producto> query = entityManager.createQuery(jpql, Producto.class);
    query.setParameter("empresa", secuencialEmpresa);

    GridBagConstraints gbc = new GridBagConstraints();
    gbc.insets = new Insets(5, 5, 5, 5);
    gbc.fill = GridBagConstraints.NONE;
    gbc.anchor = GridBagConstraints.NORTHWEST;

    int col = 0, row = 0;

    for (Producto producto : query.getResultList()) {
        Miniatura_Producto miniatura = new Miniatura_Producto(producto, false);
        miniatura.setPreferredSize(new Dimension(120, 170));

        miniatura.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                // Evento click
            }

            @Override
            public void mousePressed(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                }
            }
        });

        String comentario = miniatura.cargarComentario();
        String descripcion = miniatura.producto.getDescripcion();
        miniatura.setToolTipText("<html><b>" + descripcion + "</b><br>" + (comentario != null ? comentario : "") + "</html>");

        gbc.gridx = col;
        gbc.gridy = row;
        contenedor.add(miniatura, gbc);

        col++;
        if (col == 6) {
            col = 0;
            row++;
        }
    }

    contenedor.revalidate();
    contenedor.repaint();
    icono_carga.setVisible(false);
}


//************************************


public void Filtrar_Servicios_Cuadricula(
    int secuencialEmpresa,
    JPanel contenedor,
    EntityManager entityManager
) {
    icono_carga.setVisible(true);
    contenedor.setLayout(new GridBagLayout());
    contenedor.removeAll();

    String jpql = "SELECT p FROM Producto p " +
                  "WHERE p.Secuencial_Empresa = :empresa " +
                  "AND p.Tipo = 'Servicio'";

    TypedQuery<Producto> query = entityManager.createQuery(jpql, Producto.class);
    query.setParameter("empresa", secuencialEmpresa);

    GridBagConstraints gbc = new GridBagConstraints();
    gbc.insets = new Insets(5, 5, 5, 5);
    gbc.fill = GridBagConstraints.NONE;
    gbc.anchor = GridBagConstraints.NORTHWEST;

    int col = 0, row = 0;

    for (Producto producto : query.getResultList()) {
        Miniatura_Producto miniatura = new Miniatura_Producto(producto, false);
        miniatura.setPreferredSize(new Dimension(120, 170));

        miniatura.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                // Evento click
            }

            @Override
            public void mousePressed(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                }
            }
        });

        String comentario = miniatura.cargarComentario();
        String descripcion = miniatura.producto.getDescripcion();
        miniatura.setToolTipText("<html><b>" + descripcion + "</b><br>" + (comentario != null ? comentario : "") + "</html>");

        gbc.gridx = col;
        gbc.gridy = row;
        contenedor.add(miniatura, gbc);

        col++;
        if (col == 6) {
            col = 0;
            row++;
        }
    }

    contenedor.revalidate();
    contenedor.repaint();
    icono_carga.setVisible(false);
}





//*************************************

public void Filtrar_Agotados_Cuadricula(
    int secuencialEmpresa,
    JPanel contenedor,
    EntityManager entityManager
) {
    icono_carga.setVisible(true);
    contenedor.setLayout(new GridBagLayout());
    contenedor.removeAll();

    String jpql = "SELECT p FROM Producto p " +
                  "WHERE p.Secuencial_Empresa = :empresa " +
                  "AND p.Cantidad < p.Existencia_Minima " +
                  "AND p.Tipo <> 'Servicio'";

    TypedQuery<Producto> query = entityManager.createQuery(jpql, Producto.class);
    query.setParameter("empresa", secuencialEmpresa);

    GridBagConstraints gbc = new GridBagConstraints();
    gbc.insets = new Insets(5, 5, 5, 5);
    gbc.fill = GridBagConstraints.NONE;
    gbc.anchor = GridBagConstraints.NORTHWEST;

    int col = 0, row = 0;

    for (Producto producto : query.getResultList()) {
        Miniatura_Producto miniatura = new Miniatura_Producto(producto, false);
        miniatura.setPreferredSize(new Dimension(120, 170));

        miniatura.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                // Evento click
            }

            @Override
            public void mousePressed(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                }
            }
        });

        String comentario = miniatura.cargarComentario();
        String descripcion = miniatura.producto.getDescripcion();
        miniatura.setToolTipText("<html><b>" + descripcion + "</b><br>" + (comentario != null ? comentario : "") + "</html>");

        gbc.gridx = col;
        gbc.gridy = row;
        contenedor.add(miniatura, gbc);

        col++;
        if (col == 6) {
            col = 0;
            row++;
        }
    }

    contenedor.revalidate();
    contenedor.repaint();
    icono_carga.setVisible(false);
}




//************************************
public void Filtrar_Cuadricula_Categoria(
    int secuencialEmpresa,
    int secuencialCategoria,
    JPanel contenedor,
    EntityManager entityManager
) {
    icono_carga.setVisible(true);
    contenedor.setLayout(new GridBagLayout());
    contenedor.removeAll();

    String jpql = "SELECT p FROM Producto p WHERE p.Secuencial_Empresa = :empresa AND p.Secuencial_Categoria = :categoria";
    TypedQuery<Producto> query = entityManager.createQuery(jpql, Producto.class);
    query.setParameter("empresa", secuencialEmpresa);
    query.setParameter("categoria", secuencialCategoria);

    GridBagConstraints gbc = new GridBagConstraints();
    gbc.insets = new Insets(5, 5, 5, 5);
    gbc.fill = GridBagConstraints.NONE;
    gbc.anchor = GridBagConstraints.NORTHWEST;

    int col = 0, row = 0;

    for (Producto producto : query.getResultList()) {
        Miniatura_Producto miniatura = new Miniatura_Producto(producto, false);
        miniatura.setPreferredSize(new Dimension(120, 170));

        miniatura.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                // Evento click
            }

            @Override
            public void mousePressed(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                }
            }
        });

        String comentario = miniatura.cargarComentario();
        String descripcion = miniatura.producto.getDescripcion();
        miniatura.setToolTipText("<html><b>" + descripcion + "</b><br>" + (comentario != null ? comentario : "") + "</html>");

        gbc.gridx = col;
        gbc.gridy = row;
        contenedor.add(miniatura, gbc);

        col++;
        if (col == 6) {
            col = 0;
            row++;
        }
    }

    contenedor.revalidate();
    contenedor.repaint();
    icono_carga.setVisible(false);
}





//************************************

public void cargar_Items_Cuadricula(int secuencialEmpresa, JPanel contenedor, EntityManager entityManager) {
    icono_carga.setVisible(true);

    // Usamos GridBagLayout para evitar el ajuste automático de tamaño
    contenedor.setLayout(new GridBagLayout());
    
    contenedor.removeAll();
    
   
    List<Producto> productos = entityManager
        .createQuery("SELECT p FROM Producto p WHERE p.Secuencial_Empresa = :empresa", Producto.class)
        .setParameter("empresa", secuencialEmpresa)
        .getResultList();

    GridBagConstraints gbc = new GridBagConstraints();
    gbc.insets = new Insets(5, 5, 5, 5); // Espaciado entre miniaturas
    gbc.fill = GridBagConstraints.NONE; // No expandir
    gbc.anchor = GridBagConstraints.NORTHWEST;

    int col = 0, row = 0;

    for (Producto producto : productos) {
        Miniatura_Producto miniatura = new Miniatura_Producto(producto, false);
        miniatura.setPreferredSize(new Dimension(120, 170)); // Tamaño fijo para cada miniatura

        miniatura.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
               
                //Evento Click
                
            }

            @Override
            public void mousePressed(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                }
            }
        });

        String comentario = miniatura.cargarComentario();
        String descripcion = miniatura.producto.getDescripcion();
        miniatura.setToolTipText(
            comentario != null
                ? "<html><b>" + descripcion + "</b><br>" + comentario + "</html>"
                : "<html><b>" + descripcion + "</b><br></html>"
        );

        // Posicionamiento en la cuadrícula
        gbc.gridx = col;
        gbc.gridy = row;
        contenedor.add(miniatura, gbc);

        col++;
        if (col == 6) {
            col = 0;
            row++;
        }
    }

    contenedor.revalidate();
    contenedor.repaint();
    icono_carga.setVisible(false);
}





public void cargar_ItemsFiltrados_Cuadricula( //este es el original
    int secuencialEmpresa,
    JComboBox<String> comboFiltro,
    JTextField campoValorFiltro,
    JPanel contenedor,
    
    EntityManager entityManager
) {
    icono_carga.setVisible(true);

    contenedor.setLayout(new GridLayout(0, 6, 5, 5));
    

    
    contenedor.removeAll();

    String campoFiltro = (String) comboFiltro.getSelectedItem();
    String valorFiltro = campoValorFiltro.getText();

    boolean aplicarFiltro = campoFiltro != null && !campoFiltro.trim().isEmpty()
                         && valorFiltro != null && !valorFiltro.trim().isEmpty();

    String jpql = "SELECT p FROM Producto p WHERE p.Secuencial_Empresa = :empresa"
                + (aplicarFiltro ? " AND LOWER(p." + campoFiltro + ") LIKE :valorFiltro" : "");

    TypedQuery<Producto> query = entityManager.createQuery(jpql, Producto.class);
    query.setParameter("empresa", secuencialEmpresa);
    if (aplicarFiltro) {
        query.setParameter("valorFiltro", "%" + valorFiltro.toLowerCase() + "%");
    }

    for (Producto producto : query.getResultList()) {
        ImageIcon imagenIcon = (producto.getImagen() != null && producto.getImagen().length > 0)
            ? new ImageIcon(producto.getImagen())
            : new ImageIcon(getClass().getResource("/icons/no-image-icon-10.png"));


        Miniatura_Producto miniatura = new Miniatura_Producto(producto,false);

        miniatura.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
               
                //Evento Click
            }

            @Override
            public void mousePressed(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                }
            }
        });

        String comentario = miniatura.cargarComentario();
        String descripcion = miniatura.producto.getDescripcion();
        miniatura.setToolTipText("<html><b>" + descripcion + "</b><br>" + (comentario != null ? comentario : "") + "</html>");

        contenedor.add(miniatura);
    }

    contenedor.revalidate();
    contenedor.repaint();
    icono_carga.setVisible(false);
}




     
    public void cargarItems_Cuadricula() {
    
        contenedor.removeAll();
        icono_carga.setVisible(true); // Mostrar ícono de carga

    SwingWorker<Void, Void> worker = new SwingWorker<>() {
        @Override
        protected Void doInBackground() {
            EntityManagerFactory emf = Persistence.createEntityManagerFactory("MonituxPU");
            EntityManager em = emf.createEntityManager();
            cargar_Items_Cuadricula(Secuencial_Empresa, contenedor, em);
            em.close();
            emf.close();
            return null;
        }

        @Override
        protected void done() {
            icono_carga.setVisible(false); // Ocultar ícono de carga
            revalidate();
            repaint();
        }
    };

    worker.execute(); // Ejecutar en segundo plano
}

   
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel contenedor;
    public javax.swing.JLabel icono_carga;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JPopupMenu menu_contextual;
    // End of variables declaration//GEN-END:variables
}
