/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.monituxpos.Ventanas;

import com.monituxpos.Clases.Cliente;
import com.monituxpos.Clases.Compra;
import com.monituxpos.Clases.Cuentas_Cobrar;
import com.monituxpos.Clases.Cuentas_Pagar;
import com.monituxpos.Clases.MonituxDBContext;
import com.monituxpos.Clases.Producto;
import com.monituxpos.Clases.TarjetaDashboard;
import com.monituxpos.Clases.Util;
import com.monituxpos.Clases.Venta;
import jakarta.persistence.EntityManager;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.Point;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Miguel Cerrato
 */
public class V_Dashboard extends javax.swing.JPanel {

    /**
     * Creates new form V_Dashboard
     */
   
    double Total_Compras_Credito;
    double Total_Ventas_Credito;
    double Total_Compras_Contado;
    double Total_Ventas_Contado;
    double Total_CTAS_Cobrar;
    double Total_CTAS_Pagar;
    
    
    
    
    
    public int Secuencial_Empresa= V_Menu_Principal.getSecuencial_Empresa();
    public V_Dashboard() {
        initComponents();
        
        jLabel12.setText(String.valueOf(contarProductosVencidos(Secuencial_Empresa)));
    jLabel9.setText(String.valueOf(contarProductosConExistenciaMinima(Secuencial_Empresa)));
    jLabel7.setText(String.valueOf(contarProductosAgotados(Secuencial_Empresa)));
    
    
  
    List<String> topClientes = obtenerTop3ClientesDelMes(Secuencial_Empresa);

    

    jLabel4.setText(topClientes.size() > 0
    ? "<html>" + topClientes.get(0) + "<br><i>Primer Lugar</i></html>"
    : "<html>—<br><i>Primer Lugar</i></html>");

    jLabel5.setText(topClientes.size() > 1
    ? "<html>" + topClientes.get(1) + "<br><i>Segundo Lugar</i></html>"
    : "<html>—<br><i>Segundo Lugar</i></html>");

    
jLabel6.setText(topClientes.size() > 2
    ? "<html>" + topClientes.get(2) + "<br><i>Tercer Lugar</i></html>"
    : "<html>—<br><i>Tercer Lugar</i></html>");

    
Cargar_Grafico_Operaciones();

Cargar_Grafico_CTAS();


    
    }
    
    
    
    private void Cargar_Grafico_CTAS(){
    
        Total_CTAS_Cobrar=obtenerTotalCuentasPorCobrarDelMes(Secuencial_Empresa);
    
        Total_CTAS_Pagar=obtenerTotalCuentasPorPagarDelMes(Secuencial_Empresa);
        
       
        
        
               jPanel8.removeAll();
jPanel8.setLayout(new BorderLayout());

 jPanel8.add(Util.crearGraficoCuentasPorPagarVsCobrar(Total_CTAS_Pagar,Total_CTAS_Cobrar));
       

jPanel8.revalidate();
jPanel8.repaint();

        
        
    
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel14 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jPanel15 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jButton11 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jPanel16 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 0, 0));

        jPanel5.setBackground(new java.awt.Color(35, 32, 45));
        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        jPanel12.setBackground(new java.awt.Color(26, 32, 44));
        jPanel12.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/oro.png"))); // NOI18N

        jLabel4.setForeground(new java.awt.Color(249, 223, 135));
        jLabel4.setText("<html>Miguel Josue Cerrato Cruz<br><i>Primer Lugar</i></br></html>");
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
            .addComponent(jLabel4)
        );

        jPanel13.setBackground(new java.awt.Color(36, 42, 60));
        jPanel13.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        jLabel2.setForeground(new java.awt.Color(203, 214, 222));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/plata.png"))); // NOI18N

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("<html>Miguel Josue Cerrato Cruz<br><i>Segundo Lugar</i></br></html>");

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
            .addComponent(jLabel5)
        );

        jPanel14.setBackground(new java.awt.Color(46, 50, 66));
        jPanel14.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/bronze.png"))); // NOI18N

        jLabel6.setForeground(new java.awt.Color(250, 178, 94));
        jLabel6.setText("<html>Miguel Josue Cerrato Cruz<br><i>Tercer Lugar</i></br></html>");

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
            .addComponent(jLabel6)
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel13, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel14, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jPanel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel6MouseClicked(evt);
            }
        });
        jPanel6.setLayout(new java.awt.BorderLayout());

        jPanel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel7.setLayout(new java.awt.BorderLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jPanel7.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel2MouseClicked(evt);
            }
        });
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jPanel8.setLayout(new java.awt.BorderLayout());

        jPanel9.setBackground(new java.awt.Color(35, 32, 45));
        jPanel9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Stock Agotado");

        jButton7.setText("Ver");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 0, 0));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("0");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(1, 1, 1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9))))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton7)
                    .addComponent(jLabel7))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jPanel11.setBackground(new java.awt.Color(35, 32, 45));
        jPanel11.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        jButton9.setText("C. Vencidas");
        jButton9.setToolTipText("CTAS. a Cobrar Vencidas");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("P. Vencidas");
        jButton10.setToolTipText("CTAS. a Pagar Vencidas");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jPanel11Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton10, jButton9});

        jPanel15.setBackground(new java.awt.Color(35, 32, 45));
        jPanel15.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Stock Caducado");

        jButton11.setText("Ver");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(204, 0, 255));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("0");

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton11)
                    .addComponent(jLabel12))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jPanel16.setBackground(new java.awt.Color(35, 32, 45));
        jPanel16.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Stock Minimo");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 0));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("0");

        jButton8.setText("Ver");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton8)
                    .addComponent(jLabel9))
                .addGap(18, 18, 18))
        );

        jButton1.setText("jButton1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jPanel11, jPanel15});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(11, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jPanel11, jPanel15, jPanel16, jPanel9});

    }// </editor-fold>//GEN-END:initComponents

    private void jPanel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseClicked

        
       
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel2MouseClicked

    
    
    private void Cargar_Grafico_Operaciones(){
    
       Total_Compras_Credito=obtenerTotalComprasCreditoDelMes(Secuencial_Empresa); 
       Total_Compras_Contado=obtenerTotalComprasContadoDelMes(Secuencial_Empresa);
       Total_Ventas_Credito=obtenerTotalVentasCreditoDelMes(Secuencial_Empresa); 
       Total_Ventas_Contado=obtenerTotalVentasContadoDelMes(Secuencial_Empresa);
       
       
       jPanel6.removeAll();
jPanel6.setLayout(new BorderLayout());
jPanel6.add(Util.crearGraficoCircularOperaciones(
        Total_Ventas_Contado,
        Total_Ventas_Credito,
        Total_Compras_Contado,
        Total_Compras_Credito), BorderLayout.CENTER);

jPanel6.revalidate();
jPanel6.repaint();

       
    }
    
    
    
    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed

        
        jPanel7.removeAll();
jPanel7.add(jScrollPane1);
 jTable1.setVisible(true);
  jPanel7.revalidate();
        jPanel7.repaint();
        

llenarTablaProductosVencidos(jTable1,Secuencial_Empresa);



        // TODO add your handling code here:
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jPanel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel6MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel6MouseClicked

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked


        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel4MouseClicked

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed

        
        jPanel7.removeAll();
jPanel7.add(jScrollPane1);
 jTable1.setVisible(true);
  jPanel7.revalidate();
        jPanel7.repaint();
        
        
        llenarTablaProductosConExistenciaMinima(jTable1,Secuencial_Empresa);
        


        // TODO add your handling code here:
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
jPanel7.removeAll();
jPanel7.add(jScrollPane1);
 jTable1.setVisible(true);
  jPanel7.revalidate();
        jPanel7.repaint();

        llenarTablaProductosAgotados(jTable1,Secuencial_Empresa);
       
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed


       jPanel7.removeAll();
jPanel7.add(jScrollPane1);
 jTable1.setVisible(true);
  jPanel7.revalidate();
        jPanel7.repaint();

        llenarTablaCuentasPorCobrarVencidas(jTable1, Secuencial_Empresa);
        
        jTable1.setToolTipText("Lista de Cuentas a Cobrar Vencidas.");
        

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed

        
        
       jPanel7.removeAll();
jPanel7.add(jScrollPane1);
 jTable1.setVisible(true);
  jPanel7.revalidate();
        jPanel7.repaint();

        llenarTablaCuentasPorPagarVencidas(jTable1, Secuencial_Empresa);
        
        jTable1.setToolTipText("Lista de Cuentas a Pagar Vencidas.");


        // TODO add your handling code here:
    }//GEN-LAST:event_jButton10ActionPerformed

    
    
    public static int contarProductosVencidos(int secuencialEmpresa) {
    EntityManager em = MonituxDBContext.getEntityManager();
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
    LocalDate hoy = LocalDate.now();

    List<Producto> productos = em.createQuery(
        "SELECT p FROM Producto p WHERE p.Secuencial_Empresa = :empresa AND p.Expira = true", Producto.class)
        .setParameter("empresa", secuencialEmpresa)
        .getResultList();

    int contador = 0;

    for (Producto p : productos) {
        try {
            if (p.getFecha_Caducidad() != null && !p.getFecha_Caducidad().isEmpty()) {
                LocalDate fecha = LocalDate.parse(p.getFecha_Caducidad(), formatter);
                if (fecha.isBefore(hoy)) {
                    contador++;
                }
            }
        } catch (Exception e) {
            System.out.println("⚠️ Fecha inválida en producto: " + p.getCodigo() + " → " + p.getFecha_Caducidad());
        }
    }

    return contador;
}

    public static int contarProductosConExistenciaMinima(int secuencialEmpresa) {
    EntityManager em = MonituxDBContext.getEntityManager();

    List<Producto> productos = em.createQuery(
        "SELECT p FROM Producto p WHERE p.Secuencial_Empresa = :empresa", Producto.class)
        .setParameter("empresa", secuencialEmpresa)
        .getResultList();

    int contador = 0;

    for (Producto p : productos) {
    if (p.getCantidad() == p.getExistencia_Minima() && !"Servicio".equals(p.getTipo())) {
        contador++;
    }
}


    return contador;
}

      public static int contarProductosAgotados(int secuencialEmpresa) {
    EntityManager em = MonituxDBContext.getEntityManager();

    List<Producto> productos = em.createQuery(
        "SELECT p FROM Producto p WHERE p.Secuencial_Empresa = :empresa", Producto.class)
        .setParameter("empresa", secuencialEmpresa)
        .getResultList();

    int contador = 0;

    for (Producto p : productos) {
        if (p.getCantidad() < p.getExistencia_Minima()) {
            contador++;
        }
    }

    return contador;
}

      
    
      public static void llenarTablaProductosVencidos(JTable tabla, int secuencialEmpresa) {
    EntityManager em = MonituxDBContext.getEntityManager();
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
    LocalDate hoy = LocalDate.now();

    List<Producto> productos = em.createQuery(
        "SELECT p FROM Producto p WHERE p.Secuencial_Empresa = :empresa AND p.Expira = true", Producto.class)
        .setParameter("empresa", secuencialEmpresa)
        .getResultList();

    DefaultTableModel modelo = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };

    modelo.addColumn("Código");
    modelo.addColumn("Descripción");
    modelo.addColumn("Fecha Caducidad");
    modelo.addColumn("Cantidad");

    for (Producto p : productos) {
        try {
            if (p.getFecha_Caducidad() != null && !p.getFecha_Caducidad().isEmpty()) {
                LocalDate fecha = LocalDate.parse(p.getFecha_Caducidad(), formatter);
                if (fecha.isBefore(hoy)) {
                    modelo.addRow(new Object[] {
                        p.getCodigo(),
                        p.getDescripcion(),
                        p.getFecha_Caducidad(),
                        p.getCantidad()
                    });
                }
            }
        } catch (Exception e) {
            System.out.println("⚠️ Fecha inválida en producto: " + p.getCodigo() + " → " + p.getFecha_Caducidad());
        }
    }

    tabla.setModel(modelo);

    tabla.setBackground(new Color(30, 30, 30));
    tabla.setForeground(new Color(255, 0, 255));
    tabla.setSelectionBackground(new Color(60, 0, 60));
    tabla.setSelectionForeground(Color.WHITE);
    tabla.setFont(new Font("Segoe UI", Font.PLAIN, 14));
    tabla.getTableHeader().setBackground(new Color(60, 60, 60));
    tabla.getTableHeader().setForeground(Color.WHITE);
    tabla.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 14));
}

      
      
    public static void llenarTablaProductosConExistenciaMinima(JTable tabla, int secuencialEmpresa) {
    EntityManager em = MonituxDBContext.getEntityManager();

    List<Producto> productos = em.createQuery(
        "SELECT p FROM Producto p WHERE p.Secuencial_Empresa = :empresa", Producto.class)
        .setParameter("empresa", secuencialEmpresa)
        .getResultList();

    DefaultTableModel modelo = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };

    modelo.addColumn("Código");
    modelo.addColumn("Descripción");
    modelo.addColumn("Cantidad");
    modelo.addColumn("Existencia Mínima");

    for (Producto p : productos) {
        if (p.getCantidad() == p.getExistencia_Minima() && !"Servicio".equals(p.getTipo())) {
            modelo.addRow(new Object[] {
                p.getCodigo(),
                p.getDescripcion(),
                p.getCantidad(),
                p.getExistencia_Minima()
            });
        }
    }

    tabla.setModel(modelo);

    tabla.setBackground(new Color(30, 30, 30));
    tabla.setForeground(Color.YELLOW);
    tabla.setSelectionBackground(new Color(60, 60, 0));
    tabla.setSelectionForeground(Color.WHITE);
    tabla.setFont(new Font("Segoe UI", Font.PLAIN, 14));
    tabla.getTableHeader().setBackground(new Color(60, 60, 60));
    tabla.getTableHeader().setForeground(Color.WHITE);
    tabla.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 14));
}

  
    public static void llenarTablaProductosAgotados(JTable tabla, int secuencialEmpresa) {
    EntityManager em = MonituxDBContext.getEntityManager();

    List<Producto> productos = em.createQuery(
        "SELECT p FROM Producto p WHERE p.Secuencial_Empresa = :empresa", Producto.class)
        .setParameter("empresa", secuencialEmpresa)
        .getResultList();

    DefaultTableModel modelo = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };

    modelo.addColumn("Código");
    modelo.addColumn("Descripción");
    modelo.addColumn("Cantidad");
    modelo.addColumn("Existencia Mínima");

    for (Producto p : productos) {
        if (p.getCantidad() < p.getExistencia_Minima() && !"Servicio".equals(p.getTipo())) {
            modelo.addRow(new Object[] {
                p.getCodigo(),
                p.getDescripcion(),
                p.getCantidad(),
                p.getExistencia_Minima()
            });
        }
    }

    tabla.setModel(modelo);

    tabla.setBackground(new Color(30, 30, 30));
    tabla.setForeground(Color.RED);
    tabla.setSelectionBackground(new Color(80, 0, 0));
    tabla.setSelectionForeground(Color.WHITE);
    tabla.setFont(new Font("Segoe UI", Font.PLAIN, 14));
    tabla.getTableHeader().setBackground(new Color(60, 60, 60));
    tabla.getTableHeader().setForeground(Color.WHITE);
    tabla.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 14));
}

  
    public static void llenarTablaCuentasPorCobrarVencidas(JTable tabla, int secuencialEmpresa) {
    EntityManager em = MonituxDBContext.getEntityManager();
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
    LocalDate hoy = LocalDate.now();

    List<Cuentas_Cobrar> cuentas = em.createQuery(
        "SELECT c FROM Cuentas_Cobrar c WHERE c.Secuencial_Empresa = :empresa", Cuentas_Cobrar.class)
        .setParameter("empresa", secuencialEmpresa)
        .getResultList();

    DefaultTableModel modelo = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };

    modelo.addColumn("Cliente");
    modelo.addColumn("Factura");
    modelo.addColumn("Fecha Vencimiento");
    modelo.addColumn("Saldo");

    for (Cuentas_Cobrar c : cuentas) {
        try {
            if (c.getFecha_Vencimiento() != null && !c.getFecha_Vencimiento().isEmpty()) {
                LocalDate fechaVenc = LocalDate.parse(c.getFecha_Vencimiento(), formatter);
                if (fechaVenc.isBefore(hoy) && c.getSaldo() > 0) {
                    modelo.addRow(new Object[] {
                        c.getCliente() != null ? c.getCliente().getNombre() : "Sin nombre",
                        c.getSecuencial_Factura(),
                        c.getFecha_Vencimiento(),
                        c.getSaldo()
                    });
                }
            }
        } catch (Exception e) {
            System.out.println("⚠️ Fecha inválida en cuenta: " + c.getSecuencial() + " → " + c.getFecha_Vencimiento());
        }
    }

    tabla.setModel(modelo);

    // 🎨 Estilo mejorado: fondo gris oscuro + fuente verde legible + encabezado claro
    Color fondoLegible = new Color(30, 30, 30); // gris oscuro
    Color verdeLegible = new Color(0, 220, 0);  // verde claro

    tabla.setBackground(fondoLegible);
    tabla.setForeground(verdeLegible);
    tabla.setSelectionBackground(new Color(0, 80, 0)); // verde oscuro
    tabla.setSelectionForeground(Color.WHITE);
    tabla.setFont(new Font("Segoe UI", Font.PLAIN, 14));

    tabla.getTableHeader().setBackground(new Color(60, 60, 60)); // gris medio
    tabla.getTableHeader().setForeground(Color.WHITE);           // blanco puro
    tabla.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 14));
}

    
      public static void llenarTablaCuentasPorPagarVencidas(JTable tabla, int secuencialEmpresa) {
    EntityManager em = MonituxDBContext.getEntityManager();
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
    LocalDate hoy = LocalDate.now();

    List<Cuentas_Pagar> cuentas = em.createQuery(
        "SELECT c FROM Cuentas_Pagar c WHERE c.Secuencial_Empresa = :empresa", Cuentas_Pagar.class)
        .setParameter("empresa", secuencialEmpresa)
        .getResultList();

    DefaultTableModel modelo = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };

    modelo.addColumn("Proveedor");
    modelo.addColumn("Factura");
    modelo.addColumn("Fecha Vencimiento");
    modelo.addColumn("Saldo");

    for (Cuentas_Pagar c : cuentas) {
        try {
            if (c.getFecha_Vencimiento() != null && !c.getFecha_Vencimiento().isEmpty()) {
                LocalDate fechaVenc = LocalDate.parse(c.getFecha_Vencimiento(), formatter);
                if (fechaVenc.isBefore(hoy) && c.getSaldo() > 0) {
                    modelo.addRow(new Object[] {
                        c.getProveedor() != null ? c.getProveedor().getNombre() : "Sin nombre",
                        c.getSecuencial_Factura(),
                        c.getFecha_Vencimiento(),
                        c.getSaldo()
                    });
                }
            }
        } catch (Exception e) {
            System.out.println("⚠️ Fecha inválida en cuenta: " + c.getSecuencial() + " → " + c.getFecha_Vencimiento());
        }
    }

    tabla.setModel(modelo);

    // 🎨 Estilo mejorado
    Color fondoLegible = new Color(30, 30, 30); // gris oscuro
    Color azulLegible = new Color(70, 130, 255); // azul claro

    tabla.setBackground(fondoLegible);
    tabla.setForeground(azulLegible);
    tabla.setSelectionBackground(new Color(40, 60, 100)); // azul oscuro
    tabla.setSelectionForeground(Color.WHITE);
    tabla.setFont(new Font("Segoe UI", Font.PLAIN, 14));

    tabla.getTableHeader().setBackground(new Color(60, 60, 60)); // gris medio
    tabla.getTableHeader().setForeground(Color.WHITE);           // blanco puro
    tabla.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 14));
}

     
      
     public static List<String> obtenerTop3ClientesDelMes(int secuencialEmpresa) {
    EntityManager em = null;
    List<String> topClientes = new ArrayList<>();

    try {
        em = MonituxDBContext.getEntityManager();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
        LocalDate primerDiaMes = LocalDate.now().withDayOfMonth(1);

        // Obtener todas las ventas de la empresa
        List<Venta> ventas = em.createQuery(
            "SELECT v FROM Venta v WHERE v.Secuencial_Empresa = :empresa", Venta.class)
            .setParameter("empresa", secuencialEmpresa)
            .getResultList();

        // Agrupar por cliente solo las ventas del mes actual
        Map<Integer, Long> conteoPorCliente = ventas.stream()
            .filter(v -> {
                try {
                    LocalDate fechaVenta = LocalDate.parse(v.getFecha().substring(0, 10), DateTimeFormatter.ofPattern("dd/MM/yyyy"));
                    return !fechaVenta.isBefore(primerDiaMes);
                } catch (Exception e) {
                    return false;
                }
            })
            .collect(Collectors.groupingBy(Venta::getSecuencial_Cliente, Collectors.counting()));

        // Ordenar por cantidad de ventas descendente
        List<Map.Entry<Integer, Long>> top = conteoPorCliente.entrySet().stream()
            .sorted(Map.Entry.<Integer, Long>comparingByValue().reversed())
            .limit(3)
            .collect(Collectors.toList());

        // Obtener nombres de los clientes
        for (Map.Entry<Integer, Long> entry : top) {
            Cliente cliente = em.find(Cliente.class, entry.getKey());
            if (cliente != null) {
                topClientes.add(cliente.getNombre());
            }
        }

    } catch (Exception e) {
        System.out.println("⚠️ Error al obtener clientes destacados: " + e.getMessage());
    } finally {
        if (em != null && em.isOpen()) {
            em.close();
        }
    }

    return topClientes;
}

     
//     public static double obtenerTotalComprasDelMes(int secuencialEmpresa) {
//    EntityManager em = null;
//    double total = 0.0;
//
//    try {
//        em = MonituxDBContext.getEntityManager();
//        LocalDate primerDiaMes = LocalDate.now().withDayOfMonth(1);
//        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
//
//        // Obtener todas las compras de la empresa
//        List<Compra> compras = em.createQuery(
//            "SELECT c FROM Compra c WHERE c.Secuencial_Empresa = :empresa", Compra.class)
//            .setParameter("empresa", secuencialEmpresa)
//            .getResultList();
//
//        // Filtrar por fecha en Java y sumar
//        total = compras.stream()
//            .filter(c -> {
//                try {
//                    LocalDate fechaCompra = LocalDate.parse(c.getFecha().substring(0, 10), formatter);
//                    return !fechaCompra.isBefore(primerDiaMes);
//                } catch (Exception e) {
//                    return false;
//                }
//            })
//            .mapToDouble(Compra::getGran_Total)
//            .sum();
//
//    } catch (Exception e) {
//        System.out.println("⚠️ Error al calcular total de compras del mes: " + e.getMessage());
//    } finally {
//        if (em != null && em.isOpen()) {
//            em.close();
//        }
//    }
//
//    return total;
//}

      
     public static double obtenerTotalComprasContadoDelMes(int secuencialEmpresa) {
    EntityManager em = null;
    double total = 0.0;

    try {
        em = MonituxDBContext.getEntityManager();
        LocalDate primerDiaMes = LocalDate.now().withDayOfMonth(1);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");

        // Obtener todas las compras de la empresa
        List<Compra> compras = em.createQuery(
            "SELECT c FROM Compra c WHERE c.Secuencial_Empresa = :empresa", Compra.class)
            .setParameter("empresa", secuencialEmpresa)
            .getResultList();

        // Filtrar por fecha y tipo "Contado", luego sumar
        total = compras.stream()
            .filter(c -> {
                try {
                    LocalDate fechaCompra = LocalDate.parse(c.getFecha().substring(0, 10), formatter);
                    return !fechaCompra.isBefore(primerDiaMes) && "Contado".equalsIgnoreCase(c.getTipo());
                } catch (Exception e) {
                    return false;
                }
            })
            .mapToDouble(Compra::getGran_Total)
            .sum();

    } catch (Exception e) {
        System.out.println("⚠️ Error al calcular total de compras contado del mes: " + e.getMessage());
    } finally {
        if (em != null && em.isOpen()) {
            em.close();
        }
    }

    return total;
}

     public static double obtenerTotalComprasCreditoDelMes(int secuencialEmpresa) {
    EntityManager em = null;
    double total = 0.0;

    try {
        em = MonituxDBContext.getEntityManager();
        LocalDate primerDiaMes = LocalDate.now().withDayOfMonth(1);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");

        // Obtener todas las compras de la empresa
        List<Compra> compras = em.createQuery(
            "SELECT c FROM Compra c WHERE c.Secuencial_Empresa = :empresa", Compra.class)
            .setParameter("empresa", secuencialEmpresa)
            .getResultList();

        // Filtrar por fecha y tipo "Crédito", luego sumar
        total = compras.stream()
            .filter(c -> {
                try {
                    LocalDate fechaCompra = LocalDate.parse(c.getFecha().substring(0, 10), formatter);
                    return !fechaCompra.isBefore(primerDiaMes) && "Credito".equalsIgnoreCase(c.getTipo());
                } catch (Exception e) {
                    return false;
                }
            })
            .mapToDouble(Compra::getGran_Total)
            .sum();

    } catch (Exception e) {
        System.out.println("⚠️ Error al calcular total de compras crédito del mes: " + e.getMessage());
    } finally {
        if (em != null && em.isOpen()) {
            em.close();
        }
    }

    return total;
}

      public static double obtenerTotalVentasCreditoDelMes(int secuencialEmpresa) {
    EntityManager em = null;
    double total = 0.0;

    try {
        em = MonituxDBContext.getEntityManager();
        LocalDate primerDiaMes = LocalDate.now().withDayOfMonth(1);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");

        List<Venta> ventas = em.createQuery(
            "SELECT v FROM Venta v WHERE v.Secuencial_Empresa = :empresa", Venta.class)
            .setParameter("empresa", secuencialEmpresa)
            .getResultList();

        total = ventas.stream()
            .filter(v -> {
                try {
                    LocalDate fechaVenta = LocalDate.parse(v.getFecha().substring(0, 10), formatter);
                    return !fechaVenta.isBefore(primerDiaMes) && "Credito".equalsIgnoreCase(v.getTipo());
                } catch (Exception e) {
                    System.out.println("⚠️ Error al interpretar fecha en venta " + v.getSecuencial() + ": " + e.getMessage());
                    return false;
                }
            })
            .mapToDouble(Venta::getGran_Total)
            .sum();

    } catch (Exception e) {
        System.out.println("⚠️ Error al calcular total de ventas crédito del mes: " + e.getMessage());
    } finally {
        if (em != null && em.isOpen()) {
            em.close();
        }
    }

    return total;
}

     public static double obtenerTotalVentasContadoDelMes(int secuencialEmpresa) {
    EntityManager em = null;
    double total = 0.0;

    try {
        em = MonituxDBContext.getEntityManager();
        LocalDate primerDiaMes = LocalDate.now().withDayOfMonth(1);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");

        List<Venta> ventas = em.createQuery(
            "SELECT v FROM Venta v WHERE v.Secuencial_Empresa = :empresa", Venta.class)
            .setParameter("empresa", secuencialEmpresa)
            .getResultList();

        total = ventas.stream()
            .filter(v -> {
                try {
                    LocalDate fechaVenta = LocalDate.parse(v.getFecha().substring(0, 10), formatter);
                    return !fechaVenta.isBefore(primerDiaMes) && "Contado".equalsIgnoreCase(v.getTipo());
                } catch (Exception e) {
                    System.out.println("⚠️ Error al interpretar fecha en venta " + v.getSecuencial() + ": " + e.getMessage());
                    return false;
                }
            })
            .mapToDouble(Venta::getGran_Total)
            .sum();

    } catch (Exception e) {
        System.out.println("⚠️ Error al calcular total de ventas contado del mes: " + e.getMessage());
    } finally {
        if (em != null && em.isOpen()) {
            em.close();
        }
    }

    return total;
}

   
     
     public static double obtenerTotalCuentasPorCobrarDelMes(int secuencialEmpresa) {
    EntityManager em = null;
    double total = 0.0;

    try {
        em = MonituxDBContext.getEntityManager();
        LocalDate primerDiaMes = LocalDate.now().withDayOfMonth(1);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");

        List<Cuentas_Cobrar> cuentas = em.createQuery(
            "SELECT c FROM Cuentas_Cobrar c WHERE c.Secuencial_Empresa = :empresa",
            Cuentas_Cobrar.class)
            .setParameter("empresa", secuencialEmpresa)
            .getResultList();

        for (Cuentas_Cobrar c : cuentas) {
            try {
                LocalDate fecha = LocalDate.parse(c.getFecha().substring(0, 10), formatter);
                if (!fecha.isBefore(primerDiaMes) && c.getSaldo() != null && c.getSaldo() > 0) {
                    total += c.getSaldo();
                }
            } catch (Exception e) {
                System.out.println("⚠️ Error al interpretar fecha en cuenta por cobrar " + c.getSecuencial() + ": " + e.getMessage());
            }
        }

    } catch (Exception e) {
        System.out.println("⚠️ Error al calcular cuentas por cobrar del mes: " + e.getMessage());
    } finally {
        if (em != null && em.isOpen()) {
            em.close();
        }
    }

    return total;
}

     public static double obtenerTotalCuentasPorPagarDelMes(int secuencialEmpresa) {
    EntityManager em = null;
    double total = 0.0;

    try {
        em = MonituxDBContext.getEntityManager();
        LocalDate primerDiaMes = LocalDate.now().withDayOfMonth(1);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");

        List<Cuentas_Pagar> cuentas = em.createQuery(
            "SELECT c FROM Cuentas_Pagar c WHERE c.Secuencial_Empresa = :empresa",
            Cuentas_Pagar.class)
            .setParameter("empresa", secuencialEmpresa)
            .getResultList();

        for (Cuentas_Pagar c : cuentas) {
            try {
                LocalDate fecha = LocalDate.parse(c.getFecha().substring(0, 10), formatter);
                if (!fecha.isBefore(primerDiaMes) && c.getSaldo() != null && c.getSaldo() > 0) {
                    total += c.getSaldo();
                }
            } catch (Exception e) {
                System.out.println("⚠️ Error al interpretar fecha en cuenta por pagar " + c.getSecuencial() + ": " + e.getMessage());
            }
        }

    } catch (Exception e) {
        System.out.println("⚠️ Error al calcular cuentas por pagar del mes: " + e.getMessage());
    } finally {
        if (em != null && em.isOpen()) {
            em.close();
        }
    }

    return total;
}

     
      

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
