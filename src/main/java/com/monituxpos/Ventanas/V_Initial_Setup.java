/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.monituxpos.Ventanas;

import com.monituxpos.Clases.AppSettings;

import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;

/**
 *
 * @author Miguel Cerrato
 */
public class V_Initial_Setup extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(V_Initial_Setup.class.getName());

    /**
     * Creates new form V_Initial_Setup
     */
    public V_Initial_Setup() {
        initComponents();
        this.getContentPane().setBackground(new Color(35,32,45));
        this.setLocationRelativeTo(null);
        this.setTitle("Configuraci√≥n Inicial - Primer Arranque");
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel10 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(35, 32, 45));
        setResizable(false);
        setType(java.awt.Window.Type.UTILITY);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(35, 32, 45));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/h2.jpg"))); // NOI18N

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/mysql-logo.jpg"))); // NOI18N

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/postgresql-logo.jpg"))); // NOI18N

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/microsoft-sql-server-logo-png_seeklogo-2982661.jpg"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)))
                .addGap(22, 22, 22))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(0, 6, Short.MAX_VALUE))
        );

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 22)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("<html>üöÄ Novedades en Monitux-POS <br>version. 1.8</br></html>");

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("üóÇÔ∏è Mejora en Compatibilidad  (Windows, Linux, Mac)");

        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("‚úÖ Copias de seguridad Optimizadas\n");

        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("üåê Soporte para sistema distribuido");

        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("üñºÔ∏è Transaccionalidad y gestion de Memoria Optimizadas");

        jPanel2.setBackground(new java.awt.Color(35, 32, 45));

        jCheckBox1.setForeground(new java.awt.Color(255, 102, 0));
        jCheckBox1.setSelected(true);
        jCheckBox1.setText("No inicializar base de datos.");

        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Servidor:");

        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Usuario:");

        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Password:");

        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Proveedor de Datos:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "H2", "MYSQL", "POSTGRESQL", "SQLSERVER" }));

        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Cadena de Conexion:");

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setBackground(new java.awt.Color(35, 32, 45));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("<html><br>Guardar  y</br><br>Continuar</br></html>");
        jButton1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(35, 32, 45));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("<html>Generar<br>Cadena de</br><br>Conexion</br></html>");
        jButton2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(jCheckBox1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(23, 23, 23)
                                        .addComponent(jLabel10)
                                        .addGap(11, 11, 11))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(jLabel11)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel14)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jTextField1)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                                                .addComponent(jLabel12)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(jLabel13)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(12, 12, 12)))))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jCheckBox1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel10))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(14, 14, 14)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel11))
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel12)))
                                .addGap(17, 17, 17)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel13)
                                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(23, 23, 23)
                        .addComponent(jLabel14)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel9))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        jButton1.setEnabled(true);
        String proveedor = jComboBox1.getSelectedItem() != null ? jComboBox1.getSelectedItem().toString() : null;
if (proveedor == null || proveedor.isEmpty()) {
    JOptionPane.showMessageDialog(null, "Seleccione un proveedor de base de datos.", "Advertencia", JOptionPane.WARNING_MESSAGE);
    return;
}

String servidor = jTextField1.getText().trim();
String usuario = jTextField2.getText().trim();
String contrase√±a = jTextField3.getText().trim();

String cadena = "";

switch (proveedor.toUpperCase()) {
   
    case "H2":
   File dbFile = new File(System.getProperty("user.dir"), "Resources/Database/H2-DB");
    String basePath = dbFile.getAbsolutePath().replace("\\", "/");

    // Activamos AUTO_SERVER para permitir m√∫ltiples conexiones sin bloqueo
    // DB_CLOSE_ON_EXIT lo dejamos en TRUE para liberar el archivo al cerrar la JVM
     cadena = "jdbc:h2:file:" + basePath +
                    ";AUTO_SERVER=TRUE" +
                    ";DB_CLOSE_DELAY=-1" +
                    ";DB_CLOSE_ON_EXIT=TRUE";

     break;


    case "MYSQL":
        if (servidor.isEmpty() || usuario.isEmpty() || contrase√±a.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Por favor, complete todos los campos requeridos para MySQL.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        cadena = "jdbc:mysql://" + servidor + ":3306/monitux?useSSL=false&serverTimezone=UTC&user=" + usuario + "&password=" + contrase√±a;
        AppSettings.set_Conexion("MYSQL", cadena);
        AppSettings.setCredenciales(usuario, contrase√±a);
        break;

    case "SQLSERVER":
        if (servidor.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Por favor, indique el servidor SQL.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        cadena = construirCadenaSQLServer(servidor, usuario, contrase√±a);
        AppSettings.set_Conexion("SQLSERVER", cadena);
        AppSettings.setCredenciales(usuario, contrase√±a);
        break;

    case "POSTGRESQL":
        if (servidor.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Por favor, indique el servidor PostgreSQL.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        cadena = construirCadenaPostgres(servidor, usuario, contrase√±a);
        AppSettings.set_Conexion("POSTGRESQL", cadena);
        AppSettings.setCredenciales(usuario, contrase√±a);
        break;

    default:
        JOptionPane.showMessageDialog(null, "Proveedor de base de datos no reconocido.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
}

if (!cadena.isEmpty()) {
    jTextArea1.setText(cadena);
}

        

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        
         if (jCheckBox1.isSelected()) {
        AppSettings.set_Empresa_Creada(true);
        AppSettings.set_Primer_Arranque(false);
    } else {
        AppSettings.set_Primer_Arranque(true);
        AppSettings.set_Empresa_Creada(false);
    }

    try {
        String proveedor = jComboBox1.getSelectedItem() != null
            ? jComboBox1.getSelectedItem().toString().trim().toUpperCase()
            : null;
        String conexion = jTextField1.getText().trim();

        if (!"H2".equals(proveedor)) {
            if (proveedor == null || proveedor.isBlank()) {
                JOptionPane.showMessageDialog(null, "Debe seleccionar un proveedor de base de datos.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                return;
            }
            if (conexion.isBlank()) {
                JOptionPane.showMessageDialog(null, "Debe ingresar una cadena de conexi√≥n v√°lida.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

        String archivo = switch (proveedor) {
            case "MYSQL" -> Paths.get(System.getProperty("user.dir"), "Resources", "Database", "MySQL-DB.sql").toString();
            case "SQLSERVER" -> Paths.get(System.getProperty("user.dir"), "Resources", "Database", "SQL-DB.sql").toString();
            case "POSTGRESQL" -> Paths.get(System.getProperty("user.dir"), "Resources", "Database", "Postgres-DB.sql").toString();
            case "H2" -> Paths.get(System.getProperty("user.dir"), "Resources", "Database", "H2-DB.sql").toString();
            default -> null;
        };

        if (archivo == null || !Files.exists(Paths.get(archivo))) {
            JOptionPane.showMessageDialog(null, "El archivo de respaldo no fue encontrado.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String dbName = "monitux";
        String server = jTextField1.getText().trim();
        String user = jTextField2.getText().trim();
        String password = jTextField3.getText().trim();

        if ("MYSQL".equals(proveedor)) {
            String serverConnection = "jdbc:mysql://" + server + ":3306/?user=" + user + "&password=" + password;

            if (!jCheckBox1.isSelected()) {
                try (Connection conn = DriverManager.getConnection(serverConnection)) {
                    conn.createStatement().execute("DROP DATABASE IF EXISTS `" + dbName + "`;");
                    conn.createStatement().execute("CREATE DATABASE `" + dbName + "` CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;");
                }

                String script = Files.readString(Paths.get(archivo));
                String dbConnection = "jdbc:mysql://" + server + ":3306/" + dbName + "?user=" + user + "&password=" + password;

                try (Connection conn = DriverManager.getConnection(dbConnection)) {
                    for (String sentencia : script.split(";")) {
                        sentencia = sentencia.trim();
                        if (!sentencia.isEmpty()) {
                            conn.createStatement().execute(sentencia);
                        }
                    }
                }
            }

            JOptionPane.showMessageDialog(null, "Base de datos MySQL configurada exitosamente.", "√âxito", JOptionPane.INFORMATION_MESSAGE);

        } else if ("SQLSERVER".equals(proveedor)) {
            String serverConnection = "jdbc:sqlserver://" + server + ";user=" + user + ";password=" + password + ";encrypt=false;trustServerCertificate=true";

            if (!jCheckBox1.isSelected()) {
                try (Connection conn = DriverManager.getConnection(serverConnection)) {
                    String killConnections = """
                        DECLARE @kill varchar(8000) = '';
                        SELECT @kill = @kill + 'KILL ' + CONVERT(varchar(5), session_id) + ';'
                        FROM sys.dm_exec_sessions
                        WHERE database_id = DB_ID('""" + dbName + "'); EXEC(@kill);";

                    conn.createStatement().execute(killConnections);
                    conn.createStatement().execute("IF EXISTS (SELECT name FROM sys.databases WHERE name = N'" + dbName + "') DROP DATABASE [" + dbName + "];");
                    conn.createStatement().execute("CREATE DATABASE [" + dbName + "];");
                }

                String script = Files.readString(Paths.get(archivo));
                String[] bloques = script.split("(?i)^\\s*GO\\s*$");
                String dbConnection = "jdbc:sqlserver://" + server + ";databaseName=" + dbName + ";user=" + user + ";password=" + password + ";encrypt=false;trustServerCertificate=true";

                try (Connection conn = DriverManager.getConnection(dbConnection)) {
                    for (String bloque : bloques) {
                        bloque = bloque.trim();
                        if (!bloque.isEmpty()) {
                            try {
                                conn.createStatement().execute(bloque);
                            } catch (SQLException ex) {
                                JOptionPane.showMessageDialog(null, "Error en bloque SQL:\n" + bloque + "\n\nMensaje: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    }
                }
            }

            JOptionPane.showMessageDialog(null, "Base de datos SQL configurada correctamente.", "√âxito", JOptionPane.INFORMATION_MESSAGE);

        } else if ("POSTGRESQL".equals(proveedor)) {
            String serverConnection = "jdbc:postgresql://" + server + ":5432/postgres?user=" + user + "&password=" + password;

            if (!jCheckBox1.isSelected()) {
                try (Connection conn = DriverManager.getConnection(serverConnection)) {
                    String terminate = """
                        SELECT pg_terminate_backend(pid)
                        FROM pg_stat_activity
                        WHERE datname = '""" + dbName + "' AND pid <> pg_backend_pid();";

                    conn.createStatement().execute(terminate);
                    conn.createStatement().execute("DROP DATABASE IF EXISTS \"" + dbName + "\";");
                    conn.createStatement().execute("CREATE DATABASE \"" + dbName + "\" WITH ENCODING='UTF8';");
                }

                String script = Files.readString(Paths.get(archivo));
                String dbConnection = "jdbc:postgresql://" + server + ":5432/" + dbName + "?user=" + user + "&password=" + password;

                try (Connection conn = DriverManager.getConnection(dbConnection)) {
                    for (String sentencia : script.split(";")) {
                        sentencia = sentencia.trim();
                        if (!sentencia.isEmpty()) {
                            conn.createStatement().execute(sentencia);
                        }
                    }
                }
            }

            JOptionPane.showMessageDialog(null, "Base de datos PostgreSQL configurada exitosamente.", "√âxito", JOptionPane.INFORMATION_MESSAGE);

        } 
        
    
        
        else if ("H2".equals(proveedor)) {
    // Construimos la ruta absoluta del archivo de base de datos
    File dbFile = new File(System.getProperty("user.dir"), "Resources/Database/H2-DB");
    String basePath = dbFile.getAbsolutePath().replace("\\", "/");

    // Cadena de conexi√≥n con defensas contra bloqueo
    String dbConnection = "jdbc:h2:file:" + basePath +
                          ";AUTO_SERVER=TRUE" +           // Permite m√∫ltiples accesos sin conflicto
                          ";DB_CLOSE_DELAY=-1" +          // Mantiene la base abierta mientras haya conexi√≥n
                          ";DB_CLOSE_ON_EXIT=TRUE";       // Libera el archivo al cerrar la JVM

    // Guardamos la cadena en configuraci√≥n
    AppSettings.set_Conexion("H2", dbConnection);
    AppSettings.setCredenciales("sa", ""); // H2 no requiere credenciales

    // Ejecutamos el script de forma segura
    try (Connection conn = DriverManager.getConnection(dbConnection, "sa", "")) {
        String script = Files.readString(Paths.get(archivo));

        // Ejecutamos cada sentencia individualmente
        for (String sentencia : script.split(";")) {
            sentencia = sentencia.trim();
            if (!sentencia.isEmpty()) {
                try (Statement stmt = conn.createStatement()) {
                    stmt.execute(sentencia);
                } catch (SQLException e) {
                    System.err.println("‚ö†Ô∏è Error ejecutando sentencia:\n" + sentencia);
                    e.printStackTrace();
                }
            }
        }

        JOptionPane.showMessageDialog(null,
            "Base de datos H2 configurada exitosamente.",
            "√âxito",
            JOptionPane.INFORMATION_MESSAGE);

    } catch (SQLException | IOException e) {
        JOptionPane.showMessageDialog(null,
            "Error al configurar la base de datos H2:\n" + e.getMessage(),
            "Error",
            JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
}


        JOptionPane.showMessageDialog(null, "Configuraci√≥n aplicada correctamente.", "Informaci√≥n", JOptionPane.INFORMATION_MESSAGE);
        this.setVisible(false);

    } catch (Exception ex) {
        JOptionPane.showMessageDialog(null, "Error inesperado: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        ex.printStackTrace();
    }
        
        
// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
      

if (!AppSettings.getAjustes_Creados()){

AppSettings.setPropiedades_Default();
}        

// TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    
private String construirCadenaSQLServer(String servidor, String usuario, String contrase√±a) {
    String baseDatos = "monitux";
    String puerto = "1433"; // puedes parametrizarlo si lo necesitas

    if (usuario.isEmpty() || contrase√±a.isEmpty()) {
        // Autenticaci√≥n integrada (requiere configuraci√≥n adicional en el sistema)
        return "jdbc:sqlserver://" + servidor + ":" + puerto +
               ";databaseName=" + baseDatos +
               ";integratedSecurity=true" +
               ";encrypt=false";
    } else {
        // Autenticaci√≥n SQL Server con usuario y contrase√±a
        return "jdbc:sqlserver://" + servidor + ":" + puerto +
               ";databaseName=" + baseDatos +
               ";user=" + usuario +
               ";password=" + contrase√±a +
               ";encrypt=true" +
               ";trustServerCertificate=true";
    }
}


private String construirCadenaPostgres(String servidor, String usuario, String contrase√±a) {
    String baseDatos = "monitux";
    String puerto = "5432";

    if (usuario.isEmpty() || contrase√±a.isEmpty()) {
        // Autenticaci√≥n sin credenciales expl√≠citas (no recomendado en JDBC)
        return "jdbc:postgresql://" + servidor + ":" + puerto + "/" + baseDatos + "?sslmode=prefer";
    } else {
        // Autenticaci√≥n est√°ndar con SSL preferido y certificado confiable
        return "jdbc:postgresql://" + servidor + ":" + puerto + "/" + baseDatos +
               "?user=" + usuario +
               "&password=" + contrase√±a +
               "&sslmode=prefer" +
               "&trustServerCertificate=true";
    }
}

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new V_Initial_Setup().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
