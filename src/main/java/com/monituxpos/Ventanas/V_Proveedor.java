/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.monituxpos.Ventanas;

import com.monituxpos.Clases.Cliente;
import com.monituxpos.Clases.Proveedor;
import com.monituxpos.Clases.Util;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.Persistence;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Miguel Cerrato
 */
public class V_Proveedor extends javax.swing.JFrame {

    
     public int Secuencial_Usuario=V_Menu_Principal.getSecuencial_Usuario();//Cambiar esto
    public int Secuencial_Empresa=V_Menu_Principal.getSecuencial_Empresa();//Cambiar esto
    public int Secuencial;
    
    
    private byte[] imagen;

public byte[] getImagen() {
    return imagen;
}

public void setImagen(byte[] imagen) {
    this.imagen = imagen;
}
    
    
    /**
     * Creates new form V_Proveedor
     */
    public V_Proveedor() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        labelImagen = new javax.swing.JLabel();
        checkBoxActivo = new javax.swing.JCheckBox();
        labelImagen1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txt_Nombre = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txt_Telefono = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txt_Direccion = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txt_Email = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txt_Contacto = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        combo_Tipo = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableProveedores = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jTextField3 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        Menu_Nuevo = new javax.swing.JMenuItem();
        Menu_Guardar = new javax.swing.JMenuItem();
        Menu_Eliminar = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        Menu_Salir = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        setType(java.awt.Window.Type.POPUP);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Proveedores");
        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setOpaque(true);

        jPanel1.setBackground(new java.awt.Color(35, 32, 40));

        labelImagen.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        labelImagen.setToolTipText("Click para escoger imagen.");
        labelImagen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelImagenMouseClicked(evt);
            }
        });

        checkBoxActivo.setText("Activo");
        checkBoxActivo.setForeground(new java.awt.Color(255, 255, 255));

        labelImagen1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/camera.png"))); // NOI18N
        labelImagen1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelImagen1MouseClicked(evt);
            }
        });

        jLabel2.setText("Nombre:");
        jLabel2.setForeground(java.awt.Color.white);

        jLabel3.setText("Telefono:");
        jLabel3.setForeground(java.awt.Color.white);

        jLabel4.setText("Direccion:");
        jLabel4.setForeground(java.awt.Color.white);

        jLabel5.setText("Email:");
        jLabel5.setForeground(java.awt.Color.white);

        jLabel7.setText("Contacto:");
        jLabel7.setForeground(java.awt.Color.white);

        jLabel8.setText("Tipo:");
        jLabel8.setForeground(java.awt.Color.white);

        combo_Tipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Local", "Nacional", "Internacional", "Virtual" }));

        tableProveedores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tableProveedores.setAutoscrolls(false);
        tableProveedores.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableProveedores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableProveedoresMouseClicked(evt);
            }
        });
        tableProveedores.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tableProveedoresKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tableProveedores);

        jPanel4.setBackground(new java.awt.Color(35, 32, 40));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });
        jTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField3KeyReleased(evt);
            }
        });

        jLabel6.setText("Buscar por:");
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nombre", "Telefono", "Contacto", "Email" }));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64)
                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2))
                                .addGap(9, 9, 9)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txt_Telefono)
                                    .addComponent(txt_Nombre)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txt_Contacto)
                                    .addComponent(txt_Email)
                                    .addComponent(txt_Direccion))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_Tipo, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(checkBoxActivo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelImagen1)
                        .addGap(4, 4, 4)))
                .addGap(9, 9, 9))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txt_Nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txt_Telefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txt_Direccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txt_Email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txt_Contacto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelImagen1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkBoxActivo)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8)
                        .addComponent(combo_Tipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenu1.setText("Opciones");

        Menu_Nuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/page_white.png"))); // NOI18N
        Menu_Nuevo.setText("Nuevo");
        Menu_Nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Menu_NuevoActionPerformed(evt);
            }
        });
        jMenu1.add(Menu_Nuevo);

        Menu_Guardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/disk.png"))); // NOI18N
        Menu_Guardar.setText("Guardar");
        Menu_Guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Menu_GuardarActionPerformed(evt);
            }
        });
        jMenu1.add(Menu_Guardar);

        Menu_Eliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/exclamation.png"))); // NOI18N
        Menu_Eliminar.setText("Eliminar");
        Menu_Eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Menu_EliminarActionPerformed(evt);
            }
        });
        jMenu1.add(Menu_Eliminar);
        jMenu1.add(jSeparator1);

        Menu_Salir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/door_out.png"))); // NOI18N
        Menu_Salir.setText("Salir");
        Menu_Salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Menu_SalirActionPerformed(evt);
            }
        });
        jMenu1.add(Menu_Salir);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Menu_NuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Menu_NuevoActionPerformed

        Secuencial=0;
        txt_Contacto.setText("");
        txt_Nombre.setText("");
        txt_Direccion.setText("");
        txt_Telefono.setText("");
        txt_Email.setText("");
        checkBoxActivo.setSelected(true);
        labelImagen.setIcon(null);

        // TODO add your handling code here:
    }//GEN-LAST:event_Menu_NuevoActionPerformed

    private void Menu_GuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Menu_GuardarActionPerformed

        //**********************************************************

        //**********************************************************

// Obtener imagen como byte[]
byte[] imagenBytes = null;
Icon icono = labelImagen.getIcon();
if (icono instanceof ImageIcon) {
    Image imagen = ((ImageIcon) icono).getImage();
    BufferedImage copia = new BufferedImage(imagen.getWidth(null), imagen.getHeight(null), BufferedImage.TYPE_INT_RGB);
    Graphics2D g2d = copia.createGraphics();
    g2d.drawImage(imagen, 0, 0, null);
    g2d.dispose();

    imagenBytes = Util.comprimirImagen(copia, 100f); // Calidad ajustable
}

// Validaciones comunes
if (txt_Nombre.getText().isBlank()) {
    JOptionPane.showMessageDialog(null,"El nombre del proveedor no puede estar vacío.");
    return;
}
if (txt_Telefono.getText().isBlank()) {
    JOptionPane.showMessageDialog(null,"El teléfono no puede estar vacío.");
    return;
}
if (txt_Contacto.getText().isBlank()) {
    JOptionPane.showMessageDialog(null,"El contacto no puede estar vacío.");
    return;
}
if (combo_Tipo.getSelectedIndex() == -1) {
    JOptionPane.showMessageDialog(null,"Debe seleccionar un tipo de proveedor.");
    return;
}

EntityManagerFactory emf = Persistence.createEntityManagerFactory("MonituxPU");
EntityManager em = emf.createEntityManager();

if (Secuencial != 0) {
    // MODO EDICIÓN
    Proveedor proveedor = em.find(Proveedor.class, Secuencial);
    if (proveedor != null) {
        em.getTransaction().begin();
        proveedor.setSecuencial_Empresa(Secuencial_Empresa);
        proveedor.setNombre(txt_Nombre.getText());
        proveedor.setTelefono(txt_Telefono.getText());
        proveedor.setDireccion(txt_Direccion.getText());
        proveedor.setEmail(txt_Email.getText());
        proveedor.setContacto(txt_Contacto.getText());
        proveedor.setTipo(combo_Tipo.getSelectedItem().toString());
        proveedor.setActivo(checkBoxActivo.isSelected());
        if (imagenBytes != null) {
            proveedor.setImagen(imagenBytes);
        }
        em.getTransaction().commit();

         Util.registrarActividad(Secuencial_Usuario, "Ha modificado al proveedor: " + proveedor.getNombre(), Secuencial_Empresa);
        JOptionPane.showMessageDialog(null,"Proveedor actualizado correctamente.");
    }
} else {
    // MODO CREACIÓN
    Proveedor proveedor = new Proveedor();
    proveedor.setSecuencial_Empresa(Secuencial_Empresa);
    proveedor.setNombre(txt_Nombre.getText());
    proveedor.setTelefono(txt_Telefono.getText());
    proveedor.setDireccion(txt_Direccion.getText());
    proveedor.setEmail(txt_Email.getText());
    proveedor.setContacto(txt_Contacto.getText());
    proveedor.setTipo(combo_Tipo.getSelectedItem().toString());
    proveedor.setActivo(true);
    proveedor.setImagen(imagenBytes);

    try {
        em.getTransaction().begin();
        em.persist(proveedor);
        em.getTransaction().commit();

        JOptionPane.showMessageDialog(null,"Proveedor creado correctamente.");
         Util.registrarActividad(Secuencial_Usuario, "Ha creado al proveedor: " + proveedor.getNombre(), Secuencial_Empresa);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null,"Error al crear proveedor: Ya existe o los datos proporcionados no son válidos.");
        em.getTransaction().rollback();
        return;
    }
}

em.close();
emf.close();


dispose();     // Cierra el formulario actual

//**********************************************************

        
        
        //**********************************************************

    }//GEN-LAST:event_Menu_GuardarActionPerformed

  
    private void cargarDatos() {
    // Limpiar tabla
    DefaultTableModel model = new DefaultTableModel(
        new String[] { "S", "Nombre", "Telefono", "Direccion", "Email", "Contacto", "Activo", "Tipo" }, 0
    ) {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false; // Todas las celdas no editables
        }
    };

    EntityManagerFactory emf = Persistence.createEntityManagerFactory("MonituxPU");
    EntityManager em = emf.createEntityManager();

    try {
        List<Proveedor> lista = em.createQuery(
            "SELECT p FROM Proveedor p WHERE p.Secuencial_Empresa = :empresa", Proveedor.class)
            .setParameter("empresa", Secuencial_Empresa)
            .getResultList();

        for (Proveedor p : lista) {
            model.addRow(new Object[] {
                p.getSecuencial(),
                p.getNombre(),
                p.getTelefono(),
                p.getDireccion(),
                p.getEmail(),
                p.getContacto(),
                p.getActivo() ? "Sí" : "No",
                p.getTipo()
            });
        }

        tableProveedores.setModel(model);
        tableProveedores.setAutoResizeMode(JTable.AUTO_RESIZE_OFF); // Scroll horizontal

        // Estilo visual
        tableProveedores.setRowHeight(24);
        tableProveedores.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 14));
        tableProveedores.setFont(new Font("Segoe UI", Font.PLAIN, 13));
        tableProveedores.setGridColor(Color.LIGHT_GRAY);

        // Ajustar ancho de columnas automáticamente
        TableColumnModel columnModel = tableProveedores.getColumnModel();
        for (int col = 0; col < tableProveedores.getColumnCount(); col++) {
            int ancho = 75;
            for (int fila = 0; fila < tableProveedores.getRowCount(); fila++) {
                TableCellRenderer renderer = tableProveedores.getCellRenderer(fila, col);
                Component comp = tableProveedores.prepareRenderer(renderer, fila, col);
                ancho = Math.max(comp.getPreferredSize().width + 10, ancho);
            }
            columnModel.getColumn(col).setPreferredWidth(ancho);
        }

    } catch (Exception e) {
        // MenuPrincipal.MSG.show("Error al cargar proveedores: " + e.getMessage(), "Error");
    } finally {
        em.close();
        emf.close();
    }
}

    
    
    
    private void Menu_EliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Menu_EliminarActionPerformed

        
        int res = JOptionPane.showConfirmDialog(null, "¿Está seguro de eliminar este proveedor?", "Confirmación", JOptionPane.YES_NO_OPTION);

if (res == JOptionPane.YES_OPTION) {
    try {
        // Liberar imagen actual
        Icon icono = labelImagen.getIcon();
        if (icono instanceof ImageIcon) {
            ((ImageIcon) icono).getImage().flush(); // Libera recursos
        }
        labelImagen.setIcon(null);
        imagen = null; // Variable de clase si la usas

    } catch (Exception e) {
        // Silenciar errores de liberación de imagen
    }

    EntityManagerFactory emf = Persistence.createEntityManagerFactory("MonituxPU");
    EntityManager em = emf.createEntityManager();

    try {
        Proveedor proveedor = em.createQuery(
            "SELECT p FROM Proveedor p WHERE p.Secuencial = :Secuencial AND p.Secuencial_Empresa = :empresa", Proveedor.class)
        .setParameter("Secuencial", this.Secuencial)
        .setParameter("empresa", Secuencial_Empresa)
        .getResultStream()
        .findFirst()
        .orElse(null);

        if (proveedor != null) {
            // Mostrar imagen antes de eliminar (opcional)
            if (proveedor.getImagen() != null && proveedor.getImagen().length > 0) {
                try (ByteArrayInputStream bis = new ByteArrayInputStream(proveedor.getImagen())) {
                    BufferedImage img = ImageIO.read(bis);
                    labelImagen.setIcon(new ImageIcon(img));
                } catch (IOException ex) {
                    labelImagen.setIcon(null);
                }
            } else {
                labelImagen.setIcon(null);
            }

            // Eliminar proveedor
            em.getTransaction().begin();
            em.remove(proveedor);
            em.getTransaction().commit();

             Util.registrarActividad(Secuencial_Usuario, "Ha eliminado al proveedor: " + proveedor.getNombre(), Secuencial_Empresa);
            JOptionPane.showMessageDialog(null, "Proveedor eliminado correctamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            this.dispose();
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error al eliminar proveedor: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        em.close();
        emf.close();
    }
}

        
        
       
    }//GEN-LAST:event_Menu_EliminarActionPerformed

    private void Menu_SalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Menu_SalirActionPerformed

        this.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_Menu_SalirActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed

        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jTextField3KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyReleased

        
         if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
        String filtroSeleccionado = jComboBox2.getSelectedItem().toString();
        String valorFiltro = jTextField3.getText();

        Filtrar(filtroSeleccionado, valorFiltro); // Ejecuta solo al presionar Enter
    }
        
    }//GEN-LAST:event_jTextField3KeyReleased

    
    
    private void Filtrar(String campo, String valor) {

    tableProveedores.removeAll();

    // Crear modelo si la tabla está vacía
    DefaultTableModel model = (DefaultTableModel) tableProveedores.getModel();
    if (tableProveedores.getColumnCount() == 0) {
        model.setColumnIdentifiers(new String[] { "S", "Codigo", "Nombre", "Teléfono", "Email", "Activo" });

        // Ajustar anchos
        tableProveedores.getColumnModel().getColumn(0).setPreferredWidth(20);  // S
        tableProveedores.getColumnModel().getColumn(1).setPreferredWidth(80);  // Código
        tableProveedores.getColumnModel().getColumn(2).setPreferredWidth(120); // Nombre
        tableProveedores.getColumnModel().getColumn(3).setPreferredWidth(100); // Teléfono
        tableProveedores.getColumnModel().getColumn(4).setPreferredWidth(150); // Email
    }

    // Limpiar filas existentes
    model.setRowCount(0);

    // Conectar con JPA y filtrar proveedores
    EntityManager em = Persistence.createEntityManagerFactory("MonituxPU").createEntityManager();
    try {
        String jpql = "SELECT p FROM Proveedor p WHERE p.Secuencial_Empresa = :empresa AND FUNCTION('REPLACE', p." + campo + ", ' ', '') LIKE :valor";

        List<Proveedor> proveedores = em.createQuery(jpql, Proveedor.class)
            .setParameter("empresa", Secuencial_Empresa)
            .setParameter("valor", "%" + valor.toLowerCase().replace(" ", "") + "%")
            .getResultList();

       for (Proveedor p : proveedores) {
            model.addRow(new Object[] {
                p.getSecuencial(),
                p.getNombre(),
                p.getTelefono(),
                p.getDireccion(),
                p.getEmail(),
                p.getContacto(),
                p.getActivo() ? "Sí" : "No",
                p.getTipo()
            });
        }

        tableProveedores.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        if (tableProveedores.getRowCount() > 0) {
            tableProveedores.setRowSelectionInterval(0, 0);
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error al filtrar proveedores: " + e.getMessage());
        System.err.println(e.getMessage());
    } finally {
        em.close();
    }
}

    
    
    
    
    private void labelImagenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelImagenMouseClicked

      

        try {
            String imagenSeleccionada = Util.abrirDialogoSeleccionFilename();

            if (imagenSeleccionada != null && !imagenSeleccionada.trim().isEmpty()) {
                File archivoImagen = new File(imagenSeleccionada);

                if (archivoImagen.exists() && archivoImagen.isFile()) {
                    // Cargar imagen como BufferedImage
                    BufferedImage buffered = ImageIO.read(archivoImagen);

                    if (buffered != null) {
                        // Redimensionar al tamaño del JLabel
                        int ancho = labelImagen.getWidth();
                        int alto = labelImagen.getHeight();

                        Image imagenEscalada = buffered.getScaledInstance(ancho, alto, Image.SCALE_SMOOTH);

                        // Mostrar imagen redimensionada en el JLabel
                        labelImagen.setIcon(new ImageIcon(imagenEscalada));

                        // Convertir imagen original (no escalada) a byte[] para guardar
                        ByteArrayOutputStream ms = new ByteArrayOutputStream();
                        ImageIO.write(buffered, "png", ms);
                        imagen = ms.toByteArray();
                    } else {
                        imagen = null;
                        System.err.println("Formato de imagen no soportado.");
                    }
                } else {
                    imagen = null;
                    System.err.println("Archivo no encontrado o inválido: " + imagenSeleccionada);
                }
            }
        } catch (IOException e) {
            imagen = null;
            e.printStackTrace();
            // VMenuPrincipal.MSG.showMSG("No se pudo cargar la imagen seleccionada.", "Error");
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_labelImagenMouseClicked

    private void labelImagen1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelImagen1MouseClicked


        
        

        // Abrir ventana de captura
V_Captura_Imagen ventanaCamara = new V_Captura_Imagen(Secuencial, "Capturando...");
ventanaCamara.setModal(true);
ventanaCamara.setVisible(true);

// Obtener imagen capturada
BufferedImage imagenCapturada = V_Captura_Imagen.getImagen();

if (imagenCapturada != null) {
    // Liberar imagen anterior si existe
    if (labelImagen.getIcon() != null) {
        labelImagen.setIcon(null);
    }

    // Mostrar imagen redimensionada en JLabel
    Image imagenEscalada = imagenCapturada.getScaledInstance(
        labelImagen.getWidth(),
        labelImagen.getHeight(),
        Image.SCALE_SMOOTH
    );
    labelImagen.setIcon(new ImageIcon(imagenEscalada));

    // Convertir a byte[] (sin compresión personalizada)
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    try {
        ImageIO.write(imagenCapturada, "png", baos); // Usa "jpg" si deseas compresión
        imagen = baos.toByteArray(); // Variable byte[] para guardar la imagen
    } catch (IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al procesar la imagen capturada.", "Error", JOptionPane.ERROR_MESSAGE);
    }

} else {
    JOptionPane.showMessageDialog(null, "No se pudo capturar la imagen.", "Error", JOptionPane.ERROR_MESSAGE);
}


        
        


        // TODO add your handling code here:
    }//GEN-LAST:event_labelImagen1MouseClicked

    private void tableProveedoresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableProveedoresMouseClicked

      
        
        try {
    int rowIndex = tableProveedores.getSelectedRow();
    if (rowIndex < 0) return; // No hay fila seleccionada

    DefaultTableModel model = (DefaultTableModel) tableProveedores.getModel();

    // Asignar valores si existen
    Object secuencialObj = model.getValueAt(rowIndex, 0); // Columna "S"
    if (secuencialObj != null) {
        this.Secuencial = Integer.parseInt(secuencialObj.toString());
    }

    
    txt_Nombre.setText(getCellValue(model, rowIndex, 1));   // "Nombre"
    txt_Telefono.setText(getCellValue(model, rowIndex, 2)); // "Teléfono"
    txt_Direccion.setText(getCellValue(model, rowIndex, 3));// "Dirección"
    txt_Email.setText(getCellValue(model, rowIndex, 4));    // "Email"
    txt_Contacto.setText(getCellValue(model, rowIndex, 5));    // "Contacto"

    String activo = getCellValue(model, rowIndex, 6);       // "Activo"
    checkBoxActivo.setSelected("Sí".equalsIgnoreCase(activo));
combo_Tipo.setSelectedItem(getCellValue(model, rowIndex, 7));
    
    // Cargar imagen desde la base de datos
    try (EntityManager em = Persistence.createEntityManagerFactory("MonituxPU").createEntityManager()) {
        Proveedor proveedor = em.createQuery(
            "SELECT p FROM Proveedor p WHERE p.Secuencial = :secuencial AND p.Secuencial_Empresa = :empresa", Proveedor.class)
        .setParameter("secuencial", this.Secuencial)
        .setParameter("empresa", Secuencial_Empresa)
        .getResultStream()
        .findFirst()
        .orElse(null);

        if (proveedor != null && proveedor.getImagen() != null && proveedor.getImagen().length > 0) {
            try (ByteArrayInputStream bis = new ByteArrayInputStream(proveedor.getImagen())) {
                BufferedImage img = ImageIO.read(bis);
                labelImagen.setIcon(new ImageIcon(img));
            } catch (IOException ex) {
                labelImagen.setIcon(null);
            }
        } else {
            labelImagen.setIcon(null);
        }
    }

} catch (Exception ex) {
    labelImagen.setIcon(null);
    ex.printStackTrace(); // Para depuración
}

        
        
        
    }//GEN-LAST:event_tableProveedoresMouseClicked

    
    public void primera_carga(){
    
              
        try {
    int rowIndex = 0;
    

    DefaultTableModel model = (DefaultTableModel) tableProveedores.getModel();

    // Asignar valores si existen
    Object secuencialObj = model.getValueAt(rowIndex, 0); // Columna "S"
    if (secuencialObj != null) {
        this.Secuencial = Integer.parseInt(secuencialObj.toString());
    }

    
    txt_Nombre.setText(getCellValue(model, rowIndex, 1));   // "Nombre"
    txt_Telefono.setText(getCellValue(model, rowIndex, 2)); // "Teléfono"
    txt_Direccion.setText(getCellValue(model, rowIndex, 3));// "Dirección"
    txt_Email.setText(getCellValue(model, rowIndex, 4));    // "Email"

     txt_Contacto.setText(getCellValue(model, rowIndex, 5));    // "Contacto"

    String activo = getCellValue(model, rowIndex, 6);       // "Activo"
    
    checkBoxActivo.setSelected("Sí".equalsIgnoreCase(activo));
    combo_Tipo.setSelectedItem(getCellValue(model, rowIndex, 7));
    

    // Cargar imagen desde la base de datos
    try (EntityManager em = Persistence.createEntityManagerFactory("MonituxPU").createEntityManager()) {
        Proveedor proveedor = em.createQuery(
            "SELECT p FROM Proveedor p WHERE p.Secuencial = :Secuencial AND p.Secuencial_Empresa = :empresa", Proveedor.class)
        .setParameter("Secuencial", this.Secuencial)
        .setParameter("empresa", Secuencial_Empresa)
        .getResultStream()
        .findFirst()
        .orElse(null);

        if (proveedor != null && proveedor.getImagen() != null && proveedor.getImagen().length > 0) {
            try (ByteArrayInputStream bis = new ByteArrayInputStream(proveedor.getImagen())) {
                BufferedImage img = ImageIO.read(bis);
                labelImagen.setIcon(new ImageIcon(img));
            } catch (IOException ex) {
                labelImagen.setIcon(null);
            }
        } else {
            labelImagen.setIcon(null);
        }
    }

} catch (Exception ex) {
    labelImagen.setIcon(null);
    ex.printStackTrace(); // Para depuración
}

        
    
    }
    
    
    private void tableProveedoresKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableProveedoresKeyReleased

       
        
        try {
    int rowIndex = tableProveedores.getSelectedRow();
    if (rowIndex < 0) return; // No hay fila seleccionada

    DefaultTableModel model = (DefaultTableModel) tableProveedores.getModel();

    // Asignar valores si existen
    Object secuencialObj = model.getValueAt(rowIndex, 0); // Columna "S"
    if (secuencialObj != null) {
        this.Secuencial = Integer.parseInt(secuencialObj.toString());
    }

    
    txt_Nombre.setText(getCellValue(model, rowIndex, 1));   // "Nombre"
    txt_Telefono.setText(getCellValue(model, rowIndex, 2)); // "Teléfono"
    txt_Direccion.setText(getCellValue(model, rowIndex, 3));// "Dirección"
    txt_Email.setText(getCellValue(model, rowIndex, 4));    // "Email"

     txt_Contacto.setText(getCellValue(model, rowIndex, 5));    // "Contacto"

    String activo = getCellValue(model, rowIndex, 6);       // "Activo"
    
    checkBoxActivo.setSelected("Sí".equalsIgnoreCase(activo));
    combo_Tipo.setSelectedItem(getCellValue(model, rowIndex, 7));
    

    // Cargar imagen desde la base de datos
    try (EntityManager em = Persistence.createEntityManagerFactory("MonituxPU").createEntityManager()) {
        Proveedor proveedor = em.createQuery(
            "SELECT p FROM Proveedor p WHERE p.Secuencial = :secuencial AND p.Secuencial_Empresa = :empresa", Proveedor.class)
        .setParameter("secuencial", this.Secuencial)
        .setParameter("empresa", Secuencial_Empresa)
        .getResultStream()
        .findFirst()
        .orElse(null);

        if (proveedor != null && proveedor.getImagen() != null && proveedor.getImagen().length > 0) {
            try (ByteArrayInputStream bis = new ByteArrayInputStream(proveedor.getImagen())) {
                BufferedImage img = ImageIO.read(bis);
                labelImagen.setIcon(new ImageIcon(img));
            } catch (IOException ex) {
                labelImagen.setIcon(null);
            }
        } else {
            labelImagen.setIcon(null);
        }
    }

} catch (Exception ex) {
    labelImagen.setIcon(null);
    ex.printStackTrace(); // Para depuración
}

        
        

        }

        // Método auxiliar para obtener valor seguro de celda
        private String getCellValue(DefaultTableModel model, int row, int col) {
            Object value = model.getValueAt(row, col);
            return value != null ? value.toString() : "";
    }//GEN-LAST:event_tableProveedoresKeyReleased

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

setTitle("Monitux-POS v." + "");//V_Menu_Principal.VER);
        this.setLocationRelativeTo(null);
        this.getContentPane().setBackground(Color.black);
        cargarDatos();
        primera_carga();
        
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(V_Proveedor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(V_Proveedor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(V_Proveedor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(V_Proveedor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new V_Proveedor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Menu_Eliminar;
    private javax.swing.JMenuItem Menu_Guardar;
    private javax.swing.JMenuItem Menu_Nuevo;
    private javax.swing.JMenuItem Menu_Salir;
    private javax.swing.JCheckBox checkBoxActivo;
    private javax.swing.JComboBox<String> combo_Tipo;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JLabel labelImagen;
    private javax.swing.JLabel labelImagen1;
    private javax.swing.JTable tableProveedores;
    private javax.swing.JTextField txt_Contacto;
    private javax.swing.JTextField txt_Direccion;
    private javax.swing.JTextField txt_Email;
    private javax.swing.JTextField txt_Nombre;
    private javax.swing.JTextField txt_Telefono;
    // End of variables declaration//GEN-END:variables
}
