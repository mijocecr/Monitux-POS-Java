/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.monituxpos.Ventanas;

import com.monituxpos.Clases.Cuentas_Cobrar;
import com.monituxpos.Clases.Ingreso;
import com.monituxpos.Clases.Miniatura_Producto;
import com.monituxpos.Clases.Producto;
import com.monituxpos.Clases.SelectorCantidad;
import com.monituxpos.Clases.Util;
import com.monituxpos.Clases.Venta;
import com.monituxpos.Clases.Venta_Detalle;
import static com.monituxpos.Ventanas.V_Factura_Venta.listaDeItems;
import static com.monituxpos.Ventanas.V_Factura_Venta.selectoresCantidad;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.Persistence;
import jakarta.persistence.TypedQuery;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Miguel Cerrato
 */
public class V_Editar_Factura_Venta extends javax.swing.JFrame {
    
    
     
      public int Secuencial_Usuario = V_Menu_Principal.getSecuencial_Usuario();
      public int Secuencial_Cliente;
    public int Secuencial_Empresa=V_Menu_Principal.getSecuencial_Empresa();
    public int Secuencial;
    public V_Compras_Ventas form;
    public EntityManager em;
           double subTotal = 0.0;
double total = 0.0;
double otrosCargos = 0.0;
double impuesto = 0.0;
double descuento = 0.0;
    
       public static final Map<String, Miniatura_Producto> listaDeItems = new HashMap<>();
       public static final Map<String, SelectorCantidad> selectoresCantidad = new HashMap<>();

    public int getSecuencial_Cliente() {
        return Secuencial_Cliente;
    }

    public int getSecuencial_Usuario() {
        return Secuencial_Usuario;
    }

    public void setSecuencial_Usuario(int Secuencial_Usuario) {
        this.Secuencial_Usuario = Secuencial_Usuario;
    }

    public int getSecuencial_Empresa() {
        return Secuencial_Empresa;
    }

    public void setSecuencial_Empresa(int Secuencial_Empresa) {
        this.Secuencial_Empresa = Secuencial_Empresa;
    }

    public void setSecuencial_Cliente(int Secuencial_Cliente) {
        this.Secuencial_Cliente = Secuencial_Cliente;
    }

    public int getSecuencial() {
        return Secuencial;
    }

    public void setSecuencial(int Secuencial) {
        this.Secuencial = Secuencial;
    }

    
    
    
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(V_Editar_Factura_Venta.class.getName());

    /**
     * Creates new form V_Editar_Factura_Venta
     */
    public V_Editar_Factura_Venta(V_Compras_Ventas x) {
        initComponents();
        
         EntityManagerFactory emf = Persistence.createEntityManagerFactory("MonituxPU");
         em = emf.createEntityManager();
         
         this.getContentPane().setBackground(Color.BLACK);
         
         form=x;
         
         Secuencial_Cliente= form.Secuencial_Cliente;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        menu_contextual = new javax.swing.JPopupMenu();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        comboCliente = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox<>();
        jComboBox4 = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton7 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        lbl_otrosCargos = new javax.swing.JTextField();
        lbl_impuesto = new javax.swing.JTextField();
        lbl_descuento = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        lbl_subTotal = new javax.swing.JLabel();
        lbl_total = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        icono_carga = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jTextField3 = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        contenedor = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        contenedor_selector = new javax.swing.JPanel();
        jButton6 = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(11, 8, 20));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Codigo", "Descripcion", "Marca", "Codigo_Barra" }));

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });

        jLabel1.setText("Buscar Por:");
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox1, 0, 175, Short.MAX_VALUE)
                    .addComponent(jTextField1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenu1.setText("Imagen");

        jMenuItem1.setText("Local");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Web");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Hacer Foto");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        menu_contextual.add(jMenu1);

        jMenuItem7.setText("Comentario");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        menu_contextual.add(jMenuItem7);

        jMenu3.setText("Producto");

        jMenuItem4.setText("Agregar Unidades");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem4);

        jMenuItem5.setText("Retirar Unidades");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem5);
        jMenu3.add(jSeparator1);

        jMenuItem6.setText("Ver Producto");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem6);

        menu_contextual.add(jMenu3);

        jMenuItem8.setText("Ampliar");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        menu_contextual.add(jMenuItem8);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        setType(java.awt.Window.Type.POPUP);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(0, 168, 107));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setText("Cliente:");
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(13, 30, -1, -1));

        comboCliente.setEnabled(false);
        comboCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                comboClienteMouseClicked(evt);
            }
        });
        jPanel2.add(comboCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(59, 25, 221, -1));

        jLabel7.setText("Tipo de Venta:");
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, -1));

        jLabel8.setText("Metodo de Pago:");
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, -1, -1));

        jLabel9.setText("Se Vence:");
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 60, -1, -1));

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Contado", "Credito" }));
        jComboBox3.setEnabled(false);
        jComboBox3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox3ItemStateChanged(evt);
            }
        });
        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });
        jPanel2.add(jComboBox3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 93, -1));

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Efectivo", "Tarjeta", "Otro", "Ninguno" }));
        jComboBox4.setEnabled(false);
        jComboBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox4ActionPerformed(evt);
            }
        });
        jPanel2.add(jComboBox4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 93, -1));

        jLabel10.setText("Detalle:");
        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 150, -1, -1));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Descripcion", "Cantidad", "Precio", "Total", "SP"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 170, 400, 210));

        jButton7.setText("<html><b>Guardar</b><br>Cambios</html>");
        jButton7.setBackground(new java.awt.Color(11, 8, 20));
        jButton7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jButton7.setForeground(new java.awt.Color(0, 255, 0));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 460, 72, 85));

        jLabel12.setText("Sub-Total:");
        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jPanel2.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 380, -1, -1));

        jLabel13.setText("Total:");
        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jPanel2.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 410, -1, -1));

        jLabel14.setText("Otros Cargos:");
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jPanel2.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 450, -1, -1));

        jLabel15.setText("Descuento:");
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jPanel2.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 530, -1, -1));

        jLabel16.setText("%");
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jPanel2.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 490, -1, -1));

        lbl_otrosCargos.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        lbl_otrosCargos.setBackground(new java.awt.Color(0, 204, 204));
        lbl_otrosCargos.setBorder(null);
        lbl_otrosCargos.setForeground(new java.awt.Color(0, 0, 0));
        lbl_otrosCargos.setForeground(Color.BLUE); // Cambia el texto a azul
        lbl_otrosCargos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lbl_otrosCargosActionPerformed(evt);
            }
        });
        lbl_otrosCargos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lbl_otrosCargosKeyReleased(evt);
            }
        });
        jPanel2.add(lbl_otrosCargos, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 450, 80, -1));

        lbl_impuesto.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        lbl_impuesto.setBackground(new java.awt.Color(0, 204, 204));
        lbl_impuesto.setBorder(null);
        lbl_impuesto.setForeground(new java.awt.Color(0, 0, 0));
        lbl_impuesto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lbl_impuestoActionPerformed(evt);
            }
        });
        lbl_impuesto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lbl_impuestoKeyReleased(evt);
            }
        });
        jPanel2.add(lbl_impuesto, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 490, 50, -1));

        lbl_descuento.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        lbl_descuento.setBackground(new java.awt.Color(0, 204, 204));
        lbl_descuento.setBorder(null);
        lbl_descuento.setForeground(new java.awt.Color(0, 0, 0));
        lbl_descuento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lbl_descuentoKeyReleased(evt);
            }
        });
        jPanel2.add(lbl_descuento, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 530, 50, -1));

        jLabel17.setText("Impuesto:");
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jPanel2.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 490, -1, -1));

        jLabel18.setText("%");
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jPanel2.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 530, -1, -1));

        lbl_subTotal.setText("0");
        lbl_subTotal.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lbl_subTotal.setForeground(new java.awt.Color(255, 255, 0));
        jPanel2.add(lbl_subTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 380, 150, -1));

        lbl_total.setText("0");
        lbl_total.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lbl_total.setForeground(new java.awt.Color(255, 255, 0));
        jPanel2.add(lbl_total, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 410, 150, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("-- -- ----");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 80, 160, -1));

        jLabel11.setText("Mecanica: Señale Producto -> Click -> Cantidad -> Actualizar Detalle");
        jLabel11.setForeground(new java.awt.Color(255, 255, 0));

        jLabel4.setText("Modificar Venta");
        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 51));
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });

        icono_carga.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gifs/spinner1-r.gif"))); // NOI18N
        icono_carga.setVisible(false);

        jPanel4.setBackground(new java.awt.Color(0, 0, 0));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/box_down.png"))); // NOI18N
        jButton1.setText("<html><b>Nuevo</b><br><i>Producto</i></html>");
        jButton1.setBackground(new java.awt.Color(11, 8, 20));
        jButton1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(11, 8, 20));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Codigo", "Descripcion", "Marca", "Codigo_Barra" }));

        jTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField3KeyReleased(evt);
            }
        });

        jLabel19.setText("Buscar Por:");
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox2, 0, 175, Short.MAX_VALUE)
                    .addComponent(jTextField3)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel20.setText("<html>El impuesto y el descuento deben recalcularse al editar factura. (si aplica)</html>");
        jLabel20.setForeground(new java.awt.Color(255, 153, 0));
        jLabel20.setToolTipText("");

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setBackground(new java.awt.Color(35, 32, 40));
        jScrollPane1.setHorizontalScrollBar(null);

        contenedor.setBackground(new java.awt.Color(35, 32, 45));
        contenedor.setAutoscrolls(true);
        contenedor.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                contenedorMouseMoved(evt);
            }
        });
        contenedor.setLayout(new java.awt.GridLayout(1, 0));
        jScrollPane1.setViewportView(contenedor);

        jLabel2.setText("Productos en Lista:");
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));

        jLabel3.setText("0");
        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 153, 255));
        jLabel3.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jLabel3MouseMoved(evt);
            }
        });

        jButton4.setText("<html><b>Eliminar</b><br>Factura</html>");
        jButton4.setBackground(new java.awt.Color(11, 8, 20));
        jButton4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 51)));
        jButton4.setForeground(new java.awt.Color(255, 0, 51));
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/delete1.png"))); // NOI18N
        jButton5.setText("<html><b>Quitar</b><br>Elemento</html>");
        jButton5.setBackground(new java.awt.Color(11, 8, 20));
        jButton5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        contenedor_selector.setBackground(new java.awt.Color(35, 32, 45));
        jScrollPane3.setViewportView(contenedor_selector);

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/lightning_go.png"))); // NOI18N
        jButton6.setText("<html><b>Actualizar</b><br>Detalle</html>");
        jButton6.setBackground(new java.awt.Color(11, 8, 20));
        jButton6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 255)));
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton6.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(30, 30, 30)
                                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(8, 8, 8))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel2))
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel20)
                .addGap(471, 471, 471))
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton1, jPanel3});

        jPanel4Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton5, jScrollPane3});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 419, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(jLabel4)
                        .addGap(55, 55, 55)
                        .addComponent(icono_carga, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(8, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(jLabel11))
                    .addComponent(icono_carga, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboClienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_comboClienteMouseClicked

       // Util.llenarComboCliente(comboCliente,Secuencial_Empresa);

        // TODO add your handling code here:
    }//GEN-LAST:event_comboClienteMouseClicked

    private void jComboBox3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox3ItemStateChanged

      

        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox3ItemStateChanged

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed

        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox3ActionPerformed

    private void jComboBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox4ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    private void lbl_otrosCargosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lbl_otrosCargosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lbl_otrosCargosActionPerformed

    private void lbl_otrosCargosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lbl_otrosCargosKeyReleased

        if (lbl_otrosCargos.getText().trim().isEmpty()) {
            otrosCargos = 0.00;
        } else {
            try {
                otrosCargos = Double.parseDouble(lbl_otrosCargos.getText().trim());
            } catch (NumberFormatException e) {
                otrosCargos = 0.00; // Si hay error al convertir, se establece en 0.00
            }

        }

        // TODO add your handling code here:
    }//GEN-LAST:event_lbl_otrosCargosKeyReleased

    
//    
//    public void importarFactura(Map<String, Double> lista, String cliente, EntityManager entityManager) {
//    
////cargarOtrosDatos();
//
//Util.llenarComboCliente(comboCliente, Secuencial_Empresa);
//
//    comboCliente.setSelectedItem(cliente); // Seleccionar el cliente en el comboBox
//
//    List<Producto> productos;
//
//    for (Map.Entry<String, Double> itemC : lista.entrySet()) {
//        productos = entityManager
//            .createQuery("SELECT p FROM Producto p WHERE p.Codigo = :codigo AND p.Secuencial_Empresa = :empresa", Producto.class)
//            .setParameter("codigo", itemC.getKey())
//            .setParameter("empresa", Secuencial_Empresa)
//            .getResultList();
//
//        for (Producto item : productos) {
//            Miniatura_Producto miniaturaProducto = new Miniatura_Producto(item, true);
//
//            miniaturaProducto.setCantidad(item.getCantidad());
//            miniaturaProducto.setImagen(item.getImagen());
//            miniaturaProducto.setSecuencial_Empresa(Secuencial_Empresa);
//            miniaturaProducto.setSecuencial(item.getSecuencial());
//            miniaturaProducto.setCodigo(item.getCodigo());
//            miniaturaProducto.setMarca(item.getMarca());
//            miniaturaProducto.setDescripcion(item.getDescripcion());
//            miniaturaProducto.setPrecio_Venta(item.getPrecio_Venta());
//            miniaturaProducto.setPrecio_Costo(item.getPrecio_Costo());
//            miniaturaProducto.setExistencia_Minima(item.getExistencia_Minima());
//            miniaturaProducto.setCodigo_Barra(item.getCodigo_Barra());
//            miniaturaProducto.setCodigo_Fabricante(item.getCodigo_Fabricante());
//            miniaturaProducto.setSecuencial_Proveedor(item.getSecuencial_Proveedor());
//            miniaturaProducto.setSecuencial_Categoria(item.getSecuencial_Categoria());
//            miniaturaProducto.setSecuencial_Usuario(Secuencial_Usuario);
//            miniaturaProducto.setFecha_Caducidad(item.getFecha_Caducidad());
//            
//            miniaturaProducto.setExpira(item.isExpira());
//           
//            miniaturaProducto.setCantidadSelecccionItem(lista.getOrDefault(itemC.getKey(), 0.0).intValue());
//
//             //miniaturaProducto.setCantidadSelecccionItem(1);
//
//            miniaturaProducto.setTipo(item.getTipo());
//
//            SelectorCantidad selectorCantidad = new SelectorCantidad(item.getCodigo(), miniaturaProducto.getCantidadSelecccion());
//
//            if (listaDeItems.containsKey(miniaturaProducto.getCodigo())) {
//                listaDeItems.remove(miniaturaProducto.getCodigo());
//                listaDeItems.put(miniaturaProducto.getCodigo(), miniaturaProducto);
//
//                selectorCantidad.setCantidad(listaDeItems.get(selectorCantidad.getCodigo()).getCantidadSelecccion());
//            } else {
//                listaDeItems.put(miniaturaProducto.getCodigo(), miniaturaProducto);
//                contenedor_selector.add(selectorCantidad);
//            }
//        }
//    }
//
//    jLabel3.setText(String.valueOf(listaDeItems.size()));
//    jButton6.doClick();
//}
//
//    
//    
    
    public void importarFactura(Map<String, Double> lista, String cliente, EntityManager entityManager) {
    try {
        Util.llenarComboCliente(comboCliente, Secuencial_Empresa);
        comboCliente.setSelectedItem(cliente);

        for (Map.Entry<String, Double> itemC : lista.entrySet()) {
            List<Producto> productos = entityManager
                .createQuery("SELECT p FROM Producto p WHERE p.Codigo = :codigo AND p.Secuencial_Empresa = :empresa", Producto.class)
                .setParameter("codigo", itemC.getKey())
                .setParameter("empresa", Secuencial_Empresa)
                .getResultList();

            for (Producto item : productos) {
                Miniatura_Producto miniaturaProducto = new Miniatura_Producto(item, true);
                // ... todas las asignaciones ...
                SelectorCantidad selectorCantidad = new SelectorCantidad(item.getCodigo(), miniaturaProducto.getCantidadSelecccion());

                if (listaDeItems.containsKey(miniaturaProducto.getCodigo())) {
                    listaDeItems.put(miniaturaProducto.getCodigo(), miniaturaProducto);
                    selectorCantidad.setCantidad(listaDeItems.get(selectorCantidad.getCodigo()).getCantidadSelecccion());
                } else {
                    listaDeItems.put(miniaturaProducto.getCodigo(), miniaturaProducto);
                    contenedor_selector.add(selectorCantidad);
                }
            }
        }

        jLabel3.setText(String.valueOf(listaDeItems.size()));
    } catch (Exception e) {
        e.printStackTrace();
    } 
    
    
}

    
    
    private void lbl_impuestoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lbl_impuestoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lbl_impuestoActionPerformed

    private void lbl_impuestoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lbl_impuestoKeyReleased

        if (lbl_impuesto.getText().trim().isEmpty()) {
            impuesto = 0.00;
        } else {
            try {
                impuesto = Double.parseDouble(lbl_impuesto.getText().trim());
                impuesto = (impuesto / 100) * subTotal; // Convertir el porcentaje a decimal
            } catch (NumberFormatException e) {
                impuesto = 0.00; // Si hay un error al convertir, se establece en 0.00
            }

        }

        // TODO add your handling code here:
    }//GEN-LAST:event_lbl_impuestoKeyReleased

    private void lbl_descuentoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lbl_descuentoKeyReleased

        if (lbl_descuento.getText().trim().isEmpty()) {
            descuento = 0.00;
        } else {
            try {
                descuento = Double.parseDouble(lbl_descuento.getText().trim());
                descuento = (descuento / 100) * subTotal; // Convertir el porcentaje a decimal
            } catch (NumberFormatException e) {
                descuento = 0.00; // Si hay un error al convertir, se establece en 0.00
            }

        }

        // TODO add your handling code here:
    }//GEN-LAST:event_lbl_descuentoKeyReleased

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked

        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel4MouseClicked

    private void jLabel3MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseMoved

        jLabel3.setText(String.valueOf(listaDeItems.size()));
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel3MouseMoved

    
     
    public void Eliminar_Item_Selector() {
    List<Component> paraEliminar = new ArrayList<>();

    for (Component comp : contenedor_selector.getComponents()) {
        if (comp instanceof SelectorCantidad selector) {
            String codigo = selector.getCodigo();

            // Actualizar cantidad si el producto está en la lista
            if (listaDeItems.containsKey(codigo)) {
                Miniatura_Producto item = listaDeItems.get(codigo);
                double cantidad = selector.getCantidadSeleccionada();
                item.setCantidadSelecccion(cantidad);
                selector.setCantidad(cantidad); // reflejar en el spinner
            }

            // Verificar si está marcado para eliminar
            if (selector.isSeleccionado()) {
                if (listaDeItems.containsKey(codigo)) {
                    JOptionPane.showMessageDialog(
                        null,
                        "El item " + codigo + " se removió de la factura",
                        "Ventas",
                        JOptionPane.INFORMATION_MESSAGE
                    );
                    paraEliminar.add(selector);
                    listaDeItems.remove(codigo);
                } else {
                    selector.setBackground(Color.RED); // marcar visualmente si no está en la lista
                }
            }
        }
    }

    // Eliminar selectores marcados
    for (Component comp : paraEliminar) {
        contenedor_selector.remove(comp);
    }

    contenedor_selector.revalidate();
    contenedor_selector.repaint();

    // Recargar visualmente si lo necesitas
    jLabel3.setText(String.valueOf(listaDeItems.size()));
    jButton6.doClick(); // Actualiza la tabla
}

   
    
    
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        
     try {
    int secuencialFactura = Secuencial;

    int confirmResult = JOptionPane.showConfirmDialog(
        null,
        "¿Está seguro de eliminar la Factura No. " + secuencialFactura + "?",
        "Confirmar Eliminación",
        JOptionPane.YES_NO_OPTION
    );

    if (confirmResult != JOptionPane.YES_OPTION) return;

    EntityManagerFactory emf = Persistence.createEntityManagerFactory("MonituxPU");
    try (EntityManager em = emf.createEntityManager()) {
        em.getTransaction().begin();

        Venta factura = em.find(Venta.class, secuencialFactura);
        if (factura == null) {
            JOptionPane.showMessageDialog(null, "Factura no encontrada.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Eliminar ingreso vinculado a la factura antes de eliminar la factura
        Ingreso ingresoAsociado = em.createQuery(
            "SELECT i FROM Ingreso i WHERE i.Secuencial_Factura = :factura AND i.Secuencial_Empresa = :empresa",
            Ingreso.class
        )
        .setParameter("factura", secuencialFactura)
        .setParameter("empresa", Secuencial_Empresa)
        .getResultStream()
        .findFirst()
        .orElse(null);

        if (ingresoAsociado != null) {
            em.remove(ingresoAsociado);
            Util.registrarActividad(
                Secuencial_Usuario,
                "Se eliminó el ingreso relacionado a la Factura No. " + secuencialFactura,
                Secuencial_Empresa
            );
        }

        // Eliminar cuenta por cobrar si existe
        Cuentas_Cobrar ctac = em.createQuery(
            "SELECT c FROM Cuentas_Cobrar c WHERE c.Secuencial_Factura = :factura AND c.Secuencial_Cliente = :cliente AND c.Secuencial_Empresa = :empresa",
            Cuentas_Cobrar.class
        )
        .setParameter("factura", secuencialFactura)
        .setParameter("cliente", Secuencial_Cliente)
        .setParameter("empresa", Secuencial_Empresa)
        .getResultStream()
        .findFirst()
        .orElse(null);

        if (ctac != null) {
            em.remove(ctac);
        }

        // Obtener detalles de la factura
        List<Venta_Detalle> detalles = em.createQuery(
            "SELECT vd FROM Venta_Detalle vd WHERE vd.Secuencial_Factura = :factura",
            Venta_Detalle.class
        )
        .setParameter("factura", secuencialFactura)
        .getResultList();

        // Revertir stock si corresponde
        for (Venta_Detalle detalle : detalles) {
            Producto producto = em.createQuery(
                "SELECT p FROM Producto p WHERE p.Codigo = :codigo",
                Producto.class
            )
            .setParameter("codigo", detalle.getCodigo())
            .getResultStream()
            .findFirst()
            .orElse(null);

            if (producto != null && !"Servicio".equals(producto.getTipo()) && detalle.getCantidad() != null) {
                double cantidadDevuelta = detalle.getCantidad();

                Util.registrarMovimientoKardex(
                    producto.getSecuencial(),
                    producto.getCantidad(),
                    producto.getDescripcion(),
                    cantidadDevuelta,
                    producto.getPrecio_Costo(),
                    producto.getPrecio_Venta(),
                    "Entrada",
                    Secuencial_Empresa
                );

                producto.setCantidad(producto.getCantidad() + cantidadDevuelta);
                em.merge(producto);
            }
        }

        // Eliminar detalles
        for (Venta_Detalle detalle : detalles) {
            em.remove(detalle);
        }

        // Eliminar factura
        em.remove(factura);

        // Registrar actividad
        Util.registrarActividad(
            Secuencial_Usuario,
            "Eliminó la Factura No. " + secuencialFactura + " con " + detalles.size() +
            " productos. Registrada por un monto de " + factura.getGran_Total(),
            Secuencial_Empresa
        );

        em.getTransaction().commit();

        JOptionPane.showMessageDialog(
            null,
            "Factura No. " + secuencialFactura + " eliminada correctamente.",
            "Operación Exitosa",
            JOptionPane.INFORMATION_MESSAGE
        );

        this.dispose(); // Limpieza visual opcional
        form.cargar_Datos_Venta();
    }
} catch (Exception ex) {
    JOptionPane.showMessageDialog(
        null,
        "Error al eliminar factura: " + ex.getMessage(),
        "Error",
        JOptionPane.ERROR_MESSAGE
    );
}

        
        
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

        Eliminar_Item_Selector();

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed

        Actualizar_Detalle();
       

    }//GEN-LAST:event_jButton6ActionPerformed

    
  
    
    public void Actualizar_Detalle(){
    
         //*********************************

        total = 0;
        subTotal = 0;
        //    impuesto = 0;
        //    descuento = 0;
        //    otrosCargos = 0;

        // Reiniciar visualmente
        DefaultTableModel modeloTabla = new DefaultTableModel(
            new Object[]{"Codigo", "Descripcion", "Cantidad", "Precio", "Total", "SP"}, 0
        ) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Solo lectura
            }
        };

        jTable1.setModel(modeloTabla);
        jTable1.setRowHeight(24); // Altura de fila
        jTable1.setFont(new Font("Arial", Font.PLAIN, 13)); // Fuente legible
        jTable1.setGridColor(Color.LIGHT_GRAY); // Líneas suaves
        jTable1.setShowGrid(true); // Mostrar líneas

        lbl_subTotal.setText("0.00");
        lbl_total.setText("0.00");

        // Actualizar cantidades desde los selectores
        for (Component comp : contenedor_selector.getComponents()) {
            if (comp instanceof SelectorCantidad selector) {
                String codigo = selector.getCodigo();
                if (listaDeItems.containsKey(codigo)) {
                    Miniatura_Producto item = listaDeItems.get(codigo);
                    item.cantidadSelecccion = selector.getCantidadSeleccionada();
                }
            }
        }

        // Procesar ítems seleccionados
        for (String clave : listaDeItems.keySet()) {
            Miniatura_Producto item = listaDeItems.get(clave);

            if (item.cantidadSelecccion != 0) {
                double cantidad = item.cantidadSelecccion;
                double precio = item.producto.getPrecio_Venta();
                double totalItem = cantidad * precio;

                modeloTabla.addRow(new Object[] {
                    item.producto.getCodigo(),
                    item.producto.getDescripcion(),
                    cantidad,
                    precio,
                    totalItem,
                    item.producto.getSecuencial()
                });

                subTotal += totalItem;

            } else {
                JOptionPane.showMessageDialog(
                    null,
                    "Revise la cantidad que desea agregar.\n -- " + item.producto.getCodigo() + " --\n" + item.producto.getDescripcion(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE
                );
                return;
            }
        }

        // Actualizar totales
        ActualizarNumeros();

        //********************************
    
    }
    
//    
// public Object[] obtenerDatosVenta(EntityManager em, int secuencialEmpresa, int secuencialFactura) {
//    return em.createQuery(
//        "SELECT v.Tipo, c.Fecha_Vencimiento, v.Forma_Pago,v.Otros_Cargos " +
//        "FROM Cuentas_Cobrar c JOIN c.Venta v " +
//        "WHERE v.Secuencial_Empresa = :empresa AND v.Secuencial = :factura",
//        Object[].class
//    )
//    .setParameter("empresa", secuencialEmpresa)
//    .setParameter("factura", secuencialFactura)
//    .getResultStream()
//    .findFirst()
//    .orElse(null);
//}

    
    public Object[] obtenerDatosVenta(EntityManager em, int secuencialEmpresa, int secuencialFactura) {
    // Paso 1: Obtener los datos base desde Venta
    Object[] datosVenta = em.createQuery(
        "SELECT v.Tipo, v.Forma_Pago, v.Otros_Cargos " +
        "FROM Venta v " +
        "WHERE v.Secuencial_Empresa = :empresa AND v.Secuencial = :factura",
        Object[].class
    )
    .setParameter("empresa", secuencialEmpresa)
    .setParameter("factura", secuencialFactura)
    .getResultStream()
    .findFirst()
    .orElse(null);

    if (datosVenta == null) {
        return null; // No se encontró la venta
    }

    String tipo = (String) datosVenta[0];
    String formaPago = (String) datosVenta[1];
    Double otrosCargos = (Double) datosVenta[2];

    // Paso 2: Si es crédito, obtener la fecha de vencimiento desde Cuentas_Cobrar
    String fechaVencimiento = null;
    if ("Credito".equalsIgnoreCase(tipo)) {
        fechaVencimiento = em.createQuery(
            "SELECT c.Fecha_Vencimiento " +
            "FROM Cuentas_Cobrar c " +
            "WHERE c.Secuencial_Empresa = :empresa AND c.Secuencial_Factura = :factura",
            String.class
        )
        .setParameter("empresa", secuencialEmpresa)
        .setParameter("factura", secuencialFactura)
        .getResultStream()
        .findFirst()
        .orElse(null);
    }

    // Retornar todos los datos en un arreglo
    return new Object[] { tipo, fechaVencimiento, formaPago, otrosCargos };
}

    
    
    
 private void ActualizarNumeros() {
      jLabel3.setText(String.valueOf(listaDeItems.size()));
     total = subTotal + impuesto + otrosCargos - descuento;

    lbl_subTotal.setText(String.format("%.2f", subTotal));
    //lbl_impuesto.setText(String.format("%.2f", impuesto));
    lbl_otrosCargos.setText(String.format("%.2f", otrosCargos));
    //lbl_descuento.setText(String.format("%.2f", descuento));
    lbl_total.setText(String.format("%.2f", total));
}

    
 
 //*************
 
 
public void cargarItemsFiltrados(
    int secuencialEmpresa,
    JComboBox<String> comboFiltro,
    JTextField campoValorFiltro,
    JPanel contenedor,
    JPanel contenedor_selector,
    EntityManager entityManager
) {
    icono_carga.setVisible(true);

    // Usamos GridBagLayout para evitar el ajuste automático de tamaño
    contenedor.setLayout(new GridBagLayout());
    contenedor_selector.setLayout(new GridLayout(0, 1, 5, 5));
    contenedor.removeAll();
    //contenedor_selector.removeAll();

    String campoFiltro = (String) comboFiltro.getSelectedItem();
    String valorFiltro = campoValorFiltro.getText();

    boolean aplicarFiltro = campoFiltro != null && !campoFiltro.trim().isEmpty()
                         && valorFiltro != null && !valorFiltro.trim().isEmpty();

    String jpql = "SELECT p FROM Producto p WHERE p.Secuencial_Empresa = :empresa"
                + (aplicarFiltro ? " AND LOWER(p." + campoFiltro + ") LIKE :valorFiltro" : "");

    TypedQuery<Producto> query = entityManager.createQuery(jpql, Producto.class);
    query.setParameter("empresa", secuencialEmpresa);
    if (aplicarFiltro) {
        query.setParameter("valorFiltro", "%" + valorFiltro.toLowerCase() + "%");
    }

    GridBagConstraints gbc = new GridBagConstraints();
    gbc.insets = new Insets(5, 5, 5, 5); // Espaciado entre miniaturas
    gbc.fill = GridBagConstraints.NONE; // No expandir
    gbc.anchor = GridBagConstraints.NORTHWEST;

    int col = 0, row = 0;

    for (Producto producto : query.getResultList()) {
        Miniatura_Producto miniatura = new Miniatura_Producto(producto, false);
        miniatura.setPreferredSize(new Dimension(120, 170)); // Tamaño fijo

        miniatura.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                SelectorCantidad selector = selectoresCantidad.computeIfAbsent(
                    producto.getCodigo(),
                    codigo -> new SelectorCantidad(codigo, 0)
                );

                selector.setCantidad(0);

                if (!listaDeItems.containsKey(producto.getCodigo())) {
                    listaDeItems.put(producto.getCodigo(), miniatura);

                    if (!Arrays.asList(contenedor_selector.getComponents()).contains(selector)) {
                        contenedor_selector.add(selector);
                    }
                }

                contenedor_selector.revalidate();
                contenedor_selector.repaint();
            }

            @Override
            public void mousePressed(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                }
            }
        });

        String comentario = miniatura.cargarComentario();
        String descripcion = miniatura.producto.getDescripcion();
        miniatura.setToolTipText("<html><b>" + descripcion + "</b><br>" + (comentario != null ? comentario : "") + "</html>");

        // Posicionamiento en la cuadrícula
        gbc.gridx = col;
        gbc.gridy = row;
        contenedor.add(miniatura, gbc);

        col++;
        if (col == 3) {
            col = 0;
            row++;
        }
    }

    contenedor.revalidate();
    contenedor.repaint();
    icono_carga.setVisible(false);
    
    System.err.println("Campo filtro: " + comboFiltro.getSelectedItem());
System.err.println("Valor filtro: '" + campoValorFiltro.getText() + "'");

}


 
 //*************
 
 
 
 
    
    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            EntityManagerFactory emf = Persistence.createEntityManagerFactory("MonituxPU");
            EntityManager em = emf.createEntityManager();

            cargarItemsFiltrados(Secuencial_Empresa, jComboBox2, jTextField1, contenedor, contenedor_selector, em);

            // Opcional: cerrar el EntityManager si no lo necesitas después
            em.close();
            emf.close();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1KeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        V_Producto x = new V_Producto();

        x.setLocationRelativeTo(null);
        x.setVisible(true);

        //**********************************

        //Producto productoPrueba = new Producto();
        //
        //productoPrueba.setSecuencial_Proveedor(1);
        //productoPrueba.setCodigo("PRD-001");
        //productoPrueba.setDescripcion("Ratón inalámbrico ergonómico");
        //productoPrueba.setCantidad(50);
        //productoPrueba.setPrecio_Costo(8.50);
        //productoPrueba.setPrecio_Venta(14.99);
        //productoPrueba.setMarca("Logitech");
        //productoPrueba.setCodigo_Barra("1234567890123");
        //productoPrueba.setCodigo_Fabricante("LG-MOUSE-2025");
        //
        //// Imagen de prueba como byte[] (puedes cargarla desde archivo si lo deseas)
        //productoPrueba.setImagen(new byte[0]); // vacío por ahora
        //
        //productoPrueba.setFecha_Caducidad("2026-12-31");
        //productoPrueba.setTipo("Producto");
        //productoPrueba.setSecuencial_Categoria(3);
        //productoPrueba.setExpira(false);
        //productoPrueba.setExistencia_Minima(10);

        //**********************************

        //
        //

        //
        //   Miniatura_Producto miniatura = new Miniatura_Producto(productoPrueba);
        //
        //miniatura.setVisible(true);
        //miniatura.setSize(110, 130);
        //
        //// Agregar el menú contextual
        //miniatura.addMouseListener(new MouseAdapter() {
            //    @Override
            //    public void mousePressed(MouseEvent e) {
                //        if (e.isPopupTrigger()) {
                    //            //jPopupMenu1.show(e.getComponent(), e.getX(), e.getY());
                    //        }
                //    }
            //
            //    @Override
            //    public void mouseReleased(MouseEvent e) {
                //        if (e.isPopupTrigger()) {
                    //           // jPopupMenu1.show(e.getComponent(), e.getX(), e.getY());
                    //        }
                //    }
            //});
    //
    //miniatura.setBackground(Color.green);
    //
    //contenedor.add(miniatura);
    //contenedor.revalidate();  // Mejor que repaint para layouts dinámicos
    //contenedor.repaint();
    //
    //

    //**********************************

    // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField3KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyReleased

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            EntityManagerFactory emf = Persistence.createEntityManagerFactory("MonituxPU");
            EntityManager em = emf.createEntityManager();

            cargarItemsFiltrados(Secuencial_Empresa, jComboBox2, jTextField3, contenedor, contenedor_selector, em);

            // Opcional: cerrar el EntityManager si no lo necesitas después
            em.close();
            emf.close();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3KeyReleased

    
    
public void cargar_Items(int secuencialEmpresa, JPanel contenedor, JPanel contenedor_selector, EntityManager entityManager) {
    icono_carga.setVisible(true);

    // Usamos GridBagLayout para evitar el ajuste automático de tamaño
    contenedor.setLayout(new GridBagLayout());
    contenedor_selector.setLayout(new GridLayout(0, 1, 5, 5)); // Selector puede seguir con GridLayout

    contenedor.removeAll();
    //contenedor_selector.removeAll();
   // listaDeItems.clear();
    //selectoresCantidad.clear();

    List<Producto> productos = entityManager
        .createQuery("SELECT p FROM Producto p WHERE p.Secuencial_Empresa = :empresa", Producto.class)
        .setParameter("empresa", secuencialEmpresa)
        .getResultList();

    GridBagConstraints gbc = new GridBagConstraints();
    gbc.insets = new Insets(5, 5, 5, 5); // Espaciado entre miniaturas
    gbc.fill = GridBagConstraints.NONE; // No expandir
    gbc.anchor = GridBagConstraints.NORTHWEST;

    int col = 0, row = 0;

    for (Producto producto : productos) {
        Miniatura_Producto miniatura = new Miniatura_Producto(producto, false);
        miniatura.setPreferredSize(new Dimension(120, 170)); // Tamaño fijo para cada miniatura

        miniatura.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                SelectorCantidad selector = selectoresCantidad.computeIfAbsent(
                    producto.getCodigo(),
                    codigo -> new SelectorCantidad(codigo, 0)
                );

                if (!listaDeItems.containsKey(producto.getCodigo())) {
                    listaDeItems.put(producto.getCodigo(), miniatura);
                    if (!Arrays.asList(contenedor_selector.getComponents()).contains(selector)) {
                        contenedor_selector.add(selector);
                    }
                }

                contenedor_selector.revalidate();
                contenedor_selector.repaint();
            }

            @Override
            public void mousePressed(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                }
            }
        });

        String comentario = miniatura.cargarComentario();
        String descripcion = miniatura.producto.getDescripcion();
        miniatura.setToolTipText(
            comentario != null
                ? "<html><b>" + descripcion + "</b><br>" + comentario + "</html>"
                : "<html><b>" + descripcion + "</b><br></html>"
        );

        // Posicionamiento en la cuadrícula
        gbc.gridx = col;
        gbc.gridy = row;
        contenedor.add(miniatura, gbc);
        
        

        col++;
        if (col == 3) {
            col = 0;
            row++;
        }
    }

    contenedor.revalidate();
    contenedor.repaint();
    icono_carga.setVisible(false);
    
}

    
     
    public void cargarItems() {
    
        contenedor.removeAll();
        icono_carga.setVisible(true); // Mostrar ícono de carga

    SwingWorker<Void, Void> worker = new SwingWorker<>() {
        @Override
        protected Void doInBackground() {
            EntityManagerFactory emf = Persistence.createEntityManagerFactory("MonituxPU");
            EntityManager em = emf.createEntityManager();
            cargar_Items(Secuencial_Empresa, contenedor, contenedor_selector, em);
            em.close();
            emf.close();
            return null;
        }

        @Override
        protected void done() {
            icono_carga.setVisible(false); // Ocultar ícono de carga
            revalidate();
            repaint();
        }
    };

    worker.execute(); // Ejecutar en segundo plano
}

   
    
    
public void cargarItems(int secuencialEmpresa, JPanel contenedor, JPanel contenedor_selector, EntityManager entityManager) {

    icono_carga.setVisible(true);
    contenedor.setLayout(new GridLayout(0, 3, 5, 5)); // 3 columnas, filas dinámicas
  
  
   contenedor_selector.setLayout(new GridLayout(0, 1, 5, 5)); // 4 columnas, filas dinámicas
    

    contenedor.removeAll();
    contenedor_selector.removeAll();
    listaDeItems.clear();
    selectoresCantidad.clear();

    // 🔍 Consulta JPA
    List<Producto> productos = entityManager
        .createQuery("SELECT p FROM Producto p WHERE p.Secuencial_Empresa = :empresa", Producto.class)
        .setParameter("empresa", secuencialEmpresa)
        .getResultList();

    for (Producto producto : productos) {
        ImageIcon imagenIcon = producto.getImagen() != null && producto.getImagen().length > 0
            ? new ImageIcon(producto.getImagen())
            : new ImageIcon(getClass().getResource("/icons/no-image-icon-10.png"));
//ImageIcon icono = new ImageIcon(getClass().getResource("/icons/no-image-icon-10.png"));

       
        Miniatura_Producto miniatura = new Miniatura_Producto(producto,false);

        
      
        miniatura.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                SelectorCantidad selector = selectoresCantidad.computeIfAbsent(
                    producto.getCodigo(),
                    codigo -> {
                        SelectorCantidad nuevo = new SelectorCantidad(codigo,0);
                        nuevo.setCantidad(0);
                        
                        return nuevo;
                    }
                );

                if (!listaDeItems.containsKey(producto.getCodigo())) {
                    listaDeItems.put(producto.getCodigo(), miniatura);
                   // miniatura.checkBoxSeleccionado.setSelected(true);

                    if (!Arrays.asList(contenedor_selector.getComponents()).contains(selector)) {
                        contenedor_selector.add(selector);
                    }
                } else {
//                    contenedor_selector.remove(selector);
//                    listaDeItems.remove(producto.getCodigo());
//                    miniatura.checkBoxSeleccionado.setSelected(false);
                }

                contenedor_selector.revalidate();
                contenedor_selector.repaint();
            }
        });
        
        
        
// Agregar el menú contextual
miniatura.addMouseListener(new MouseAdapter() {
    @Override
    public void mousePressed(MouseEvent e) {
        if (e.isPopupTrigger()) {
            menu_contextual.show(e.getComponent(), e.getX(), e.getY());
        }
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
            menu_contextual.show(e.getComponent(), e.getX(), e.getY());
        }
    }
});

if (miniatura.cargarComentario()!=null){

 //miniatura.setToolTipText(miniatura.cargarComentario());
 
 
 miniatura.setToolTipText("<html><b>" + miniatura.producto.getDescripcion() + "</b><br>"+miniatura.cargarComentario()+"</html>");
 
 //<html><b>Actualizar</b><br>Detalle</html>
}else{

    miniatura.setToolTipText("<html><b>" + miniatura.producto.getDescripcion() + "</b><br></html>");
 
}

        contenedor.add(miniatura);
    }

    contenedor.revalidate();
    contenedor.repaint();
    
    icono_carga.setVisible(false);
    
}

    
    
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

        Component invocador = menu_contextual.getInvoker();
        if (invocador instanceof Miniatura_Producto) {
            Miniatura_Producto miniatura = (Miniatura_Producto) invocador;

            miniatura.actualizarImagenLocal();
            cargarItems();

        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed

        Component invocador = menu_contextual.getInvoker();
        if (invocador instanceof Miniatura_Producto) {
            Miniatura_Producto miniatura = (Miniatura_Producto) invocador;

            miniatura.actualizarImagenWeb();
            cargarItems();

        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed

        Component invocador = menu_contextual.getInvoker();
        if (invocador instanceof Miniatura_Producto) {
            Miniatura_Producto miniatura = (Miniatura_Producto) invocador;

            miniatura.actualizarImagenCamara();
            cargarItems();

        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed

        Component invocador = menu_contextual.getInvoker();
        if (invocador instanceof Miniatura_Producto) {
            Miniatura_Producto miniatura = (Miniatura_Producto) invocador;

            miniatura.Agregar_Comentario(miniatura.getComentario());

            cargarItems();

        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed

        Component invocador = menu_contextual.getInvoker();
        if (invocador instanceof Miniatura_Producto) {
            Miniatura_Producto miniatura = (Miniatura_Producto) invocador;

            miniatura.actualizarProductoAgregarUnidades();

            cargarItems();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed

        Component invocador = menu_contextual.getInvoker();
        if (invocador instanceof Miniatura_Producto) {
            Miniatura_Producto miniatura = (Miniatura_Producto) invocador;

            miniatura.actualizarProductoRetirarUnidades();

            cargarItems();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed

        Component invocador = menu_contextual.getInvoker();
        if (invocador instanceof Miniatura_Producto) {
            Miniatura_Producto miniatura = (Miniatura_Producto) invocador;

            V_Producto form = new V_Producto(false, miniatura.producto);
            form.setOnProductoEditado(() -> cargarItems());
            form.setVisible(true);
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed

        Component invocador = menu_contextual.getInvoker();
        if (invocador instanceof Miniatura_Producto) {
            Miniatura_Producto miniatura = (Miniatura_Producto) invocador;

            byte[] datosImagen = miniatura.producto.getImagen(); // suponiendo que devuelve byte[]

            ImageIcon imagen = null;

            if (datosImagen != null && datosImagen.length > 0) {
                try {
                    ByteArrayInputStream bis = new ByteArrayInputStream(datosImagen);
                    BufferedImage bufferedImage = ImageIO.read(bis);
                    imagen = new ImageIcon(bufferedImage);
                } catch (IOException e) {
                    e.printStackTrace();
                    // Puedes cargar una imagen por defecto si falla
                    imagen = new ImageIcon(getClass().getResource("/icons/no-image-icon-10.png"));
                }
            } else {
                // Imagen por defecto si no hay datos
                imagen = new ImageIcon(getClass().getResource("/icons/no-image-icon-10.png"));
            }

            try {
                V_Vista_Ampliada v_Vista_Ampliada = new V_Vista_Ampliada(miniatura.producto.getCodigo(),
                    miniatura.producto.getDescripcion(), imagen);
                v_Vista_Ampliada.setVisible(true);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error al cargar la vista ampliada.", "Error", JOptionPane.ERROR_MESSAGE);
            }

        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened


    Object[] resultado = obtenerDatosVenta(em, Secuencial_Empresa, Secuencial);


    
    if (resultado != null) {
    String tipo = (String) resultado[0];
    String fechaVencimientoStr = (String) resultado[1];
    String formaPago = (String) resultado[2];
    otrosCargos=(double) resultado [3];
    lbl_otrosCargos.setText(String.valueOf(otrosCargos));
    
    

    jComboBox3.setSelectedItem(tipo);
    jComboBox4.setSelectedItem(formaPago);
    jLabel6.setText(fechaVencimientoStr);
   
    System.out.println("Tipo: " + tipo);
    System.out.println("Fecha_Vencimiento: " + fechaVencimientoStr);
    System.out.println("Forma de pago: " + formaPago);
    System.out.println("Otros Gastos: " + otrosCargos);
    
} else {
    System.err.println("No se encontraron datos de venta para la factura " + Secuencial);
}

        
        
        
        
        this.setTitle("Factura No: " + Secuencial);



lbl_descuento.setText(String.format("%.2f", descuento));
lbl_impuesto.setText(String.format("%.2f", impuesto));
lbl_otrosCargos.setText(String.format("%.2f", otrosCargos));
lbl_subTotal.setText(String.format("%.2f", subTotal));
lbl_total.setText(String.format("%.2f", total));





//comboBox2.setSelectedIndex(0);
//comboBox3.setSelectedIndex(0);
//comboBox1.setSelectedIndex(0);

//configurarDataGridView();




cargarItemsDesdeLista(V_Compras_Ventas.lista,Secuencial_Empresa,contenedor,contenedor_selector,em);

ActualizarNumeros(); // Actualizar totales y visuales

        Actualizar_Detalle();
        
        this.setLocationRelativeTo(null);
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    
public void cargarItemsDesdeLista(Map<String, Double> lista, int secuencialEmpresa, JPanel contenedor, JPanel contenedor_selector, EntityManager entityManager) {
    icono_carga.setVisible(true);

    contenedor.setLayout(new GridBagLayout()); // Igual que el método original
    contenedor_selector.setLayout(new GridLayout(0, 1, 5, 5));

    contenedor.removeAll();
    contenedor_selector.removeAll();
    listaDeItems.clear();
    selectoresCantidad.clear();

    GridBagConstraints gbc = new GridBagConstraints();
    gbc.insets = new Insets(5, 5, 5, 5); // Espaciado entre miniaturas
    gbc.fill = GridBagConstraints.NONE;
    gbc.anchor = GridBagConstraints.NORTHWEST;

    int col = 0, row = 0;

    for (Map.Entry<String, Double> itemC : lista.entrySet()) {
        List<Producto> productos = entityManager
            .createQuery("SELECT p FROM Producto p WHERE p.Codigo = :codigo AND p.Secuencial_Empresa = :empresa", Producto.class)
            .setParameter("codigo", itemC.getKey())
            .setParameter("empresa", secuencialEmpresa)
            .getResultList();

        for (Producto producto : productos) {
            Miniatura_Producto miniatura = new Miniatura_Producto(producto, true);
            miniatura.setCantidadSelecccionItem(itemC.getValue().intValue());
            miniatura.setPreferredSize(new Dimension(120, 170)); // Igual que en cargar_Items

            SelectorCantidad selector = new SelectorCantidad(producto.getCodigo(), itemC.getValue().intValue());
            selectoresCantidad.put(producto.getCodigo(), selector);

            listaDeItems.put(producto.getCodigo(), miniatura);
            contenedor_selector.add(selector);

            String comentario = miniatura.cargarComentario();
            if (comentario != null) {
                miniatura.setToolTipText("<html><b>" + producto.getDescripcion() + "</b><br>" + comentario + "</html>");
            } else {
                miniatura.setToolTipText("<html><b>" + producto.getDescripcion() + "</b><br></html>");
            }

            miniatura.addMouseListener(new MouseAdapter() {
                @Override
                public void mousePressed(MouseEvent e) {
                    if (e.isPopupTrigger()) {
                        menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                    }
                }

                @Override
                public void mouseReleased(MouseEvent e) {
                    if (e.isPopupTrigger()) {
                        menu_contextual.show(e.getComponent(), e.getX(), e.getY());
                    }
                }
            });

            // Posicionamiento visual en la cuadrícula
            gbc.gridx = col;
            gbc.gridy = row;
            contenedor.add(miniatura, gbc);

            col++;
            if (col == 3) {
                col = 0;
                row++;
            }
        }
    }

    contenedor.revalidate();
    contenedor.repaint();
    contenedor_selector.revalidate();
    contenedor_selector.repaint();
    icono_carga.setVisible(false);
}
   
    
    private void contenedorMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_contenedorMouseMoved
        // TODO add your handling code here:
        jLabel3.setText(String.valueOf(listaDeItems.size()));
    }//GEN-LAST:event_contenedorMouseMoved

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked



        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4MouseClicked

    /**
     * @param args the command line arguments
     */
  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> comboCliente;
    private javax.swing.JPanel contenedor;
    private javax.swing.JPanel contenedor_selector;
    public javax.swing.JLabel icono_carga;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    public javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JComboBox<String> jComboBox4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField lbl_descuento;
    private javax.swing.JTextField lbl_impuesto;
    private javax.swing.JTextField lbl_otrosCargos;
    private javax.swing.JLabel lbl_subTotal;
    private javax.swing.JLabel lbl_total;
    private javax.swing.JPopupMenu menu_contextual;
    // End of variables declaration//GEN-END:variables
}
