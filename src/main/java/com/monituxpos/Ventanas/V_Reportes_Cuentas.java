/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.monituxpos.Ventanas;

import com.lowagie.text.Chunk;
import com.lowagie.text.Document;
import com.lowagie.text.Element;
import com.lowagie.text.PageSize;
import com.lowagie.text.Paragraph;
import com.lowagie.text.Phrase;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;
import com.monituxpos.Clases.Cuentas_Cobrar;
import com.monituxpos.Clases.MonituxDBContext;
import com.monituxpos.Clases.Util;
import jakarta.persistence.EntityManager;
import java.awt.Color;
import java.io.ByteArrayOutputStream;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Comparator;
import java.util.List;
import javax.swing.JOptionPane;
import com.lowagie.text.Font; 
import com.monituxpos.Clases.Cliente;
import com.monituxpos.Clases.Cuentas_Pagar;
import com.monituxpos.Clases.Proveedor;
import java.io.FileOutputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.format.DateTimeFormatterBuilder;
import java.util.Date;
import java.util.Locale;
import java.util.Map;
import java.util.stream.Collectors;


/**
 *
 * @author Miguel Cerrato
 */
public class V_Reportes_Cuentas extends javax.swing.JPanel {

    private int Secuencial_Empresa=V_Menu_Principal.getSecuencial_Empresa();
    
    /**
     * Creates new form V_Reportes_Cuentas
     */
    public V_Reportes_Cuentas() {
        initComponents();
        Util.llenarComboCliente(jComboBox2,Secuencial_Empresa);
        Util.llenarComboProveedor(jComboBox3, Secuencial_Empresa);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jButton3 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        datePicker1 = new com.github.lgooddatepicker.components.DatePicker();
        datePicker2 = new com.github.lgooddatepicker.components.DatePicker();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox<>();
        jButton7 = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 0, 0));

        jPanel1.setBackground(new java.awt.Color(0, 168, 107));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        jPanel4.setBackground(new java.awt.Color(35, 32, 45));

        jLabel1.setText("Todas las Cuentas Registradas");
        jLabel1.setForeground(new java.awt.Color(255, 255, 0));

        jButton2.setText("Generar");
        jButton2.setBackground(new java.awt.Color(255, 255, 0));
        jButton2.setForeground(new java.awt.Color(0, 0, 0));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(19, 19, 19))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBackground(new java.awt.Color(35, 32, 45));

        jLabel2.setText("Cuentas por Rango de Saldos:");
        jLabel2.setForeground(new java.awt.Color(255, 255, 0));

        jLabel3.setText("De:");
        jLabel3.setBackground(new java.awt.Color(35, 32, 45));
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));

        jLabel4.setText("A:");
        jLabel4.setBackground(new java.awt.Color(35, 32, 45));
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));

        jButton1.setText("Generar");
        jButton1.setBackground(new java.awt.Color(255, 255, 0));
        jButton1.setForeground(new java.awt.Color(0, 0, 0));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel2))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jButton1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBackground(new java.awt.Color(35, 32, 45));

        jLabel5.setText("Cuentas por Cliente:");
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));

        jButton3.setText("Generar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3)
                        .addGap(19, 19, 19))))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel7.setBackground(new java.awt.Color(35, 32, 45));

        jLabel6.setText("Todas las Cuentas Vencidas");
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));

        jButton4.setText("Generar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton4)
                .addGap(16, 16, 16))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jButton4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("Por Cobrar");
        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(0, 0, 0));

        jLabel15.setText("Desde:");
        jLabel15.setBackground(new java.awt.Color(0, 0, 0));
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));

        jLabel16.setText("Hasta:");
        jLabel16.setBackground(new java.awt.Color(0, 0, 0));
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(152, 152, 152)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(datePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(datePicker2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(datePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(datePicker2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(jLabel16))
                .addContainerGap(11, Short.MAX_VALUE))
        );

        jPanel8.setBackground(new java.awt.Color(0, 102, 255));
        jPanel8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        jPanel9.setBackground(new java.awt.Color(35, 32, 45));

        jLabel7.setText("Todas las Cuentas Registradas");
        jLabel7.setForeground(new java.awt.Color(255, 255, 0));

        jButton5.setText("Generar");
        jButton5.setBackground(new java.awt.Color(255, 255, 0));
        jButton5.setForeground(new java.awt.Color(0, 0, 0));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton5)
                .addGap(19, 19, 19))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jButton5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel10.setBackground(new java.awt.Color(35, 32, 45));

        jLabel8.setText("Cuentas por Rango de Saldos:");
        jLabel8.setForeground(new java.awt.Color(255, 255, 0));

        jLabel9.setText("De:");
        jLabel9.setBackground(new java.awt.Color(35, 32, 45));
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));

        jLabel10.setText("A:");
        jLabel10.setBackground(new java.awt.Color(35, 32, 45));
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));

        jButton6.setText("Generar");
        jButton6.setBackground(new java.awt.Color(255, 255, 0));
        jButton6.setForeground(new java.awt.Color(0, 0, 0));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel8)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton6)
                .addGap(17, 17, 17))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jButton6))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel11.setBackground(new java.awt.Color(35, 32, 45));

        jLabel11.setText("Cuentas por Proveedor:");
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));

        jButton7.setText("Generar");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addContainerGap(246, Short.MAX_VALUE))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton7)
                        .addGap(19, 19, 19))))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton7))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel12.setBackground(new java.awt.Color(35, 32, 45));

        jLabel12.setText("Todas las Cuentas Vencidas");
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));

        jButton8.setText("Generar");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton8)
                .addGap(16, 16, 16))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jButton8))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Por Pagar");
        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("Los reportes con distinción amarilla requieren un rango de fechas.");
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel17)
                .addGap(0, 6, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 8, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jPanel1, jPanel8});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        String seleccionado=jComboBox2.getSelectedItem().toString();
         int secuencialCliente = Integer.parseInt(seleccionado.split("-")[0].trim());
        RPT_CTA_Cliente(Secuencial_Empresa,secuencialCliente);
        


        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed

         String seleccionado=jComboBox3.getSelectedItem().toString();
         int secuencialProveedor = Integer.parseInt(seleccionado.split("-")[0].trim());
        RPT_CTA_Proveedor(Secuencial_Empresa,secuencialProveedor);
        

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

//********************

try {
    // Obtener fechas desde los JDatePickers
    LocalDate fechaInicio = datePicker1.getDate();
    LocalDate fechaFin = datePicker2.getDate();

    // Validar fechas
    if (fechaInicio == null || fechaFin == null) {
        JOptionPane.showMessageDialog(this, "Debe seleccionar ambas fechas.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    if (fechaFin.isBefore(fechaInicio)) {
        JOptionPane.showMessageDialog(this, "La fecha final no puede ser anterior a la fecha inicial.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Convertir a java.util.Date
    ZoneId zona = ZoneId.systemDefault();
    Date fechaInicioDate = Date.from(fechaInicio.atStartOfDay(zona).toInstant());
    Date fechaFinDate = Date.from(fechaFin.plusDays(1).atStartOfDay(zona).minusSeconds(1).toInstant());

    // Validar y obtener rangos de saldo
    String minText = jTextField1.getText().trim();
    String maxText = jTextField2.getText().trim();

    if (minText.isEmpty() || maxText.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Debe ingresar ambos valores de saldo.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    double saldoMinimo;
    double saldoMaximo;

    try {
        saldoMinimo = Double.parseDouble(minText);
        saldoMaximo = Double.parseDouble(maxText);
    } catch (NumberFormatException nfe) {
        JOptionPane.showMessageDialog(this, "Los valores de saldo deben ser numéricos válidos.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    if (saldoMinimo < 0 || saldoMaximo < 0) {
        JOptionPane.showMessageDialog(this, "Los valores de saldo no pueden ser negativos.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    if (saldoMinimo > saldoMaximo) {
        JOptionPane.showMessageDialog(this, "El saldo mínimo no puede ser mayor que el saldo máximo.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Ejecutar el reporte
    RPT_CTAC_FYS(Secuencial_Empresa, fechaInicioDate, fechaFinDate, saldoMinimo, saldoMaximo);

} catch (Exception ex) {
    JOptionPane.showMessageDialog(this, "Error inesperado al generar el reporte:\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    ex.printStackTrace();
}



//********************
        
        
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed


        try {
    // Obtener fechas desde los JDatePickers
    LocalDate fechaInicio = datePicker1.getDate();
    LocalDate fechaFin = datePicker2.getDate();

    // Validar fechas
    if (fechaInicio == null || fechaFin == null) {
        JOptionPane.showMessageDialog(this, "Debe seleccionar ambas fechas.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    if (fechaFin.isBefore(fechaInicio)) {
        JOptionPane.showMessageDialog(this, "La fecha final no puede ser anterior a la fecha inicial.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Convertir a java.util.Date
    ZoneId zona = ZoneId.systemDefault();
    Date fechaInicioDate = Date.from(fechaInicio.atStartOfDay(zona).toInstant());
    Date fechaFinDate = Date.from(fechaFin.plusDays(1).atStartOfDay(zona).minusSeconds(1).toInstant());

    // Validar y obtener rangos de saldo
    String minText = jTextField3.getText().trim();
    String maxText = jTextField4.getText().trim();

    if (minText.isEmpty() || maxText.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Debe ingresar ambos valores de saldo.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    double saldoMinimo;
    double saldoMaximo;

    try {
        saldoMinimo = Double.parseDouble(minText);
        saldoMaximo = Double.parseDouble(maxText);
    } catch (NumberFormatException nfe) {
        JOptionPane.showMessageDialog(this, "Los valores de saldo deben ser numéricos válidos.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    if (saldoMinimo < 0 || saldoMaximo < 0) {
        JOptionPane.showMessageDialog(this, "Los valores de saldo no pueden ser negativos.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    if (saldoMinimo > saldoMaximo) {
        JOptionPane.showMessageDialog(this, "El saldo mínimo no puede ser mayor que el saldo máximo.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Ejecutar el nuevo reporte de cuentas por pagar
    RPT_CTAP_FYS(Secuencial_Empresa, fechaInicioDate, fechaFinDate, saldoMinimo, saldoMaximo);

} catch (Exception ex) {
    JOptionPane.showMessageDialog(this, "Error inesperado al generar el reporte:\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    ex.printStackTrace();
}



        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        RPT_CTAC_Vencidas(Secuencial_Empresa);
        
        

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed


        RPT_CTAP_Vencidas(Secuencial_Empresa);
        
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed


        try {
    // Obtener fechas desde los JDatePickers
    LocalDate fechaInicio = datePicker1.getDate();
    LocalDate fechaFin = datePicker2.getDate();

    // Validar fechas
    if (fechaInicio == null || fechaFin == null) {
        JOptionPane.showMessageDialog(this, "Debe seleccionar ambas fechas.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    if (fechaFin.isBefore(fechaInicio)) {
        JOptionPane.showMessageDialog(this, "La fecha final no puede ser anterior a la fecha inicial.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Convertir a java.util.Date incluyendo todo el día final
    ZoneId zona = ZoneId.systemDefault();
    Date fechaInicioDate = Date.from(fechaInicio.atStartOfDay(zona).toInstant());
    Date fechaFinDate = Date.from(fechaFin.atTime(23, 59, 59).atZone(zona).toInstant());

    // Ejecutar el reporte en memoria con fechas compatibles con texto tipo "dd/MM/yyyy hh:mm:ss a"
    RPT_CTAC_RangoFechas(Secuencial_Empresa, fechaInicioDate, fechaFinDate);

} catch (Exception ex) {
    JOptionPane.showMessageDialog(this, "Error inesperado al generar el reporte:\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    ex.printStackTrace();
}

        

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

        
        try {
    // Obtener fechas desde los JDatePickers
    LocalDate fechaInicio = datePicker1.getDate();
    LocalDate fechaFin = datePicker2.getDate();

    // Validar fechas
    if (fechaInicio == null || fechaFin == null) {
        JOptionPane.showMessageDialog(this, "Debe seleccionar ambas fechas.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    if (fechaFin.isBefore(fechaInicio)) {
        JOptionPane.showMessageDialog(this, "La fecha final no puede ser anterior a la fecha inicial.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Convertir a java.util.Date incluyendo todo el día final
    ZoneId zona = ZoneId.systemDefault();
    Date fechaInicioDate = Date.from(fechaInicio.atStartOfDay(zona).toInstant());
    Date fechaFinDate = Date.from(fechaFin.atTime(23, 59, 59).atZone(zona).toInstant());

    // Ejecutar el reporte de cuentas por pagar en memoria
    RPT_CTAP_RangoFechas(Secuencial_Empresa, fechaInicioDate, fechaFinDate);

} catch (Exception ex) {
    JOptionPane.showMessageDialog(this, "Error inesperado al generar el reporte:\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    ex.printStackTrace();
}




        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

 public void RPT_CTA_Cliente(int secuencialEmpresa, int secuencialCliente) {
    EntityManager em = null;

    try {
        MonituxDBContext.ensureEntityManagerFactoryReady();
        em = MonituxDBContext.getEntityManager();

        // Obtener nombre del cliente
        String nombreCliente = em.createQuery(
            "SELECT c.Nombre FROM Cliente c WHERE c.Secuencial = :id", String.class)
            .setParameter("id", secuencialCliente)
            .getResultStream()
            .findFirst()
            .orElse("Sin nombre");

        // Obtener cuentas por cobrar
        List<Cuentas_Cobrar> cuentas = em.createQuery(
            "SELECT c FROM Cuentas_Cobrar c WHERE c.Secuencial_Empresa = :empresa AND c.Secuencial_Cliente = :cliente", Cuentas_Cobrar.class)
            .setParameter("empresa", secuencialEmpresa)
            .setParameter("cliente", secuencialCliente)
            .getResultList();

        cuentas.sort(Comparator.comparing(c ->
            LocalDateTime.parse(c.getFecha().trim(), DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss")))
        );

        double totalDeuda = cuentas.stream()
            .mapToDouble(Cuentas_Cobrar::getSaldo)
            .sum();

        // Generar PDF en memoria
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        Document document = new Document(PageSize.A4);
        PdfWriter.getInstance(document, baos);
        document.open();

        // Fuentes estándar sin dependencias externas
        Font fontHeader = new Font(Font.HELVETICA, 16, Font.BOLD);
        Font fontNormal = new Font(Font.HELVETICA, 9, Font.NORMAL);
        Font fontBold   = new Font(Font.HELVETICA, 9, Font.BOLD);

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");

        // Encabezado
        document.add(new Paragraph("📑 Reporte de cuentas por cobrar", (com.lowagie.text.Font) fontHeader));
        document.add(new Paragraph("Cliente: " + nombreCliente + " (Código: " + secuencialCliente + ")", (com.lowagie.text.Font) fontNormal));
        document.add(new Paragraph("Generado el: " + LocalDateTime.now().format(formatter), (com.lowagie.text.Font) fontNormal));
        document.add(Chunk.NEWLINE);

        // Tabla
        PdfPTable table = new PdfPTable(5);
        table.setWidthPercentage(100);
        table.setSpacingBefore(10f);
        table.setSpacingAfter(10f);

        String[] columnas = { "Fecha", "Factura No.", "Total", "Pagado", "Saldo" };
        for (String columna : columnas) {
            PdfPCell cell = new PdfPCell(new Phrase(columna, (com.lowagie.text.Font) fontBold));
            cell.setBackgroundColor(Color.LIGHT_GRAY);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setPadding(5f);
            table.addCell(cell);
        }

        for (Cuentas_Cobrar cuenta : cuentas) {
            table.addCell(new Phrase(cuenta.getFecha().trim().substring(0, 10), (com.lowagie.text.Font) fontNormal));
            table.addCell(new Phrase(String.valueOf(cuenta.getSecuencial_Factura()), (com.lowagie.text.Font) fontNormal));
            table.addCell(new Phrase(String.format("%.2f", cuenta.getTotal()), (com.lowagie.text.Font) fontNormal));
            table.addCell(new Phrase(String.format("%.2f", cuenta.getPagado()), (com.lowagie.text.Font) fontNormal));
            table.addCell(new Phrase(String.format("%.2f", cuenta.getSaldo()), (com.lowagie.text.Font) fontNormal));
        }

        PdfPCell resumenLabel = new PdfPCell(new Phrase("🔢 Total deuda acumulada:", (com.lowagie.text.Font) fontBold));
        resumenLabel.setColspan(4);
        resumenLabel.setHorizontalAlignment(Element.ALIGN_RIGHT);
        resumenLabel.setPadding(6f);
        table.addCell(resumenLabel);

        PdfPCell resumenValor = new PdfPCell(new Phrase(String.format("%.2f", totalDeuda), (com.lowagie.text.Font) fontBold));
        resumenValor.setBackgroundColor(Color.LIGHT_GRAY);
        resumenValor.setHorizontalAlignment(Element.ALIGN_RIGHT);
        resumenValor.setPadding(6f);
        table.addCell(resumenValor);

        document.add(table);
        document.add(new Paragraph("Sistema Monitux-POS · Reporte generado automáticamente", (com.lowagie.text.Font) fontNormal));
        document.close();

        // Mostrar visor
        V_Visor_Factura visor = new V_Visor_Factura();
        visor.setDocumentoEnBytes(baos.toByteArray());
        visor.setTitulo("Cuentas por cobrar - Cliente " + secuencialCliente);
        visor.mostrar();

      

    } catch (Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(null, "❌ Error al generar el reporte:\n" + ex.getMessage(), "Monitux-POS", JOptionPane.ERROR_MESSAGE);
    } finally {
        if (em != null && em.isOpen()) em.close();
    }
}

    
 public void RPT_CTA_Proveedor(int secuencialEmpresa, int secuencialProveedor) {
    EntityManager em = null;

    try {
        MonituxDBContext.ensureEntityManagerFactoryReady();
        em = MonituxDBContext.getEntityManager();

        // Obtener nombre del proveedor
        String nombreProveedor = em.createQuery(
            "SELECT p.Nombre FROM Proveedor p WHERE p.Secuencial = :id", String.class)
            .setParameter("id", secuencialProveedor)
            .getResultStream()
            .findFirst()
            .orElse("Sin nombre");

        // Obtener cuentas por pagar
        List<Cuentas_Pagar> cuentas = em.createQuery(
            "SELECT c FROM Cuentas_Pagar c WHERE c.Secuencial_Empresa = :empresa AND c.Secuencial_Proveedor = :proveedor", Cuentas_Pagar.class)
            .setParameter("empresa", secuencialEmpresa)
            .setParameter("proveedor", secuencialProveedor)
            .getResultList();

        cuentas.sort(Comparator.comparing(c ->
            LocalDateTime.parse(c.getFecha().trim(), DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss")))
        );

        double totalDeuda = cuentas.stream()
            .mapToDouble(Cuentas_Pagar::getSaldo)
            .sum();

        // Generar PDF en memoria
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        Document document = new Document(PageSize.A4);
        PdfWriter.getInstance(document, baos);
        document.open();

        Font fontHeader = new Font(Font.HELVETICA, 16, Font.BOLD);
        Font fontNormal = new Font(Font.HELVETICA, 9, Font.NORMAL);
        Font fontBold   = new Font(Font.HELVETICA, 9, Font.BOLD);

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");

        // Encabezado
        document.add(new Paragraph("📄 Reporte de cuentas por pagar", fontHeader));
        document.add(new Paragraph("Proveedor: " + nombreProveedor + " (Código: " + secuencialProveedor + ")", fontNormal));
        document.add(new Paragraph("Generado el: " + LocalDateTime.now().format(formatter), fontNormal));
        document.add(Chunk.NEWLINE);

        // Tabla
        PdfPTable table = new PdfPTable(5);
        table.setWidthPercentage(100);
        table.setSpacingBefore(10f);
        table.setSpacingAfter(10f);

        String[] columnas = { "Fecha", "Factura No.", "Total", "Pagado", "Saldo" };
        for (String columna : columnas) {
            PdfPCell cell = new PdfPCell(new Phrase(columna, fontBold));
            cell.setBackgroundColor(Color.LIGHT_GRAY);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setPadding(5f);
            table.addCell(cell);
        }

        for (Cuentas_Pagar cuenta : cuentas) {
            table.addCell(new Phrase(cuenta.getFecha().trim().substring(0, 10), fontNormal));
            table.addCell(new Phrase(String.valueOf(cuenta.getSecuencial_Factura()), fontNormal));
            table.addCell(new Phrase(String.format("%.2f", cuenta.getTotal()), fontNormal));
            table.addCell(new Phrase(String.format("%.2f", cuenta.getPagado()), fontNormal));
            table.addCell(new Phrase(String.format("%.2f", cuenta.getSaldo()), fontNormal));
        }

        PdfPCell resumenLabel = new PdfPCell(new Phrase("🔢 Total deuda acumulada:", fontBold));
        resumenLabel.setColspan(4);
        resumenLabel.setHorizontalAlignment(Element.ALIGN_RIGHT);
        resumenLabel.setPadding(6f);
        table.addCell(resumenLabel);

        PdfPCell resumenValor = new PdfPCell(new Phrase(String.format("%.2f", totalDeuda), fontBold));
        resumenValor.setBackgroundColor(Color.LIGHT_GRAY);
        resumenValor.setHorizontalAlignment(Element.ALIGN_RIGHT);
        resumenValor.setPadding(6f);
        table.addCell(resumenValor);

        document.add(table);
        document.add(new Paragraph("Sistema Monitux-POS · Reporte generado automáticamente", fontNormal));
        document.close();

        // Mostrar visor
        V_Visor_Factura visor = new V_Visor_Factura();
        visor.setDocumentoEnBytes(baos.toByteArray());
        visor.setTitulo("Cuentas por pagar - Proveedor " + secuencialProveedor);
        visor.mostrar();

    } catch (Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(null, "❌ Error al generar el reporte:\n" + ex.getMessage(), "Monitux-POS", JOptionPane.ERROR_MESSAGE);
    } finally {
        if (em != null && em.isOpen()) em.close();
    }
}

public void RPT_CTAC_FYS(int secuencialEmpresa, Date fechaInicio, Date fechaFin, double saldoMinimo, double saldoMaximo) {
    EntityManager em = null;

    try {
        MonituxDBContext.ensureEntityManagerFactoryReady();
        em = MonituxDBContext.getEntityManager();

        // Obtener todas las cuentas por cobrar de la empresa
        List<Cuentas_Cobrar> cuentas = em.createQuery(
            "SELECT c FROM Cuentas_Cobrar c WHERE c.Secuencial_Empresa = :empresa", Cuentas_Cobrar.class)
            .setParameter("empresa", secuencialEmpresa)
            .getResultList();

        // Formato para fecha con hora y AM/PM en español
        DateTimeFormatter parser = new DateTimeFormatterBuilder()
            .parseCaseInsensitive()
            .appendPattern("dd/MM/yyyy hh:mm:ss a")
            .toFormatter(new Locale("es", "ES"));

        ZoneId zona = ZoneId.systemDefault();
        LocalDateTime inicio = fechaInicio.toInstant().atZone(zona).toLocalDate().atStartOfDay();
        LocalDateTime fin = fechaFin.toInstant().atZone(zona).toLocalDate().atTime(23, 59, 59);

        // Filtrar por fecha y saldo
        List<Cuentas_Cobrar> cuentasFiltradas = cuentas.stream()
            .filter(c -> {
                try {
                    String fechaRaw = c.getFecha().trim()
                        .replace("a. m.", "AM")
                        .replace("p. m.", "PM")
                        .replace("a.m.", "AM")
                        .replace("p.m.", "PM");

                    LocalDateTime fecha = LocalDateTime.parse(fechaRaw, parser);
                    return !fecha.isBefore(inicio) && !fecha.isAfter(fin)
                        && c.getSaldo() >= saldoMinimo && c.getSaldo() <= saldoMaximo;
                } catch (Exception e) {
                    return false;
                }
            })
            .sorted(Comparator.comparing(c -> {
                try {
                    String fechaRaw = c.getFecha().trim()
                        .replace("a. m.", "AM")
                        .replace("p. m.", "PM")
                        .replace("a.m.", "AM")
                        .replace("p.m.", "PM");
                    return LocalDateTime.parse(fechaRaw, parser);
                } catch (Exception e) {
                    return LocalDateTime.MIN;
                }
            }))
            .toList();

        // Obtener clientes
        Map<Integer, String> mapaClientes = em.createQuery("SELECT c FROM Cliente c", Cliente.class)
            .getResultStream()
            .collect(Collectors.toMap(Cliente::getSecuencial, Cliente::getNombre));

        // Preparar datos para el reporte
        List<Object[]> cuentasConNombre = cuentasFiltradas.stream()
            .map(c -> new Object[] {
                mapaClientes.getOrDefault(c.getSecuencial_Cliente(), "Sin nombre"),
                c.getFecha(),
                c.getFecha_Vencimiento(),
                c.getSecuencial_Factura(),
                c.getTotal(),
                c.getPagado(),
                c.getSaldo()
            })
            .toList();

        double totalDeuda = cuentasConNombre.stream()
            .mapToDouble(c -> (double) c[6])
            .sum();

        // Generar PDF en memoria
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        Document document = new Document(PageSize.A4);
        PdfWriter.getInstance(document, baos);
        document.open();

        Font fontHeader = new Font(Font.HELVETICA, 16, Font.BOLD);
        Font fontNormal = new Font(Font.HELVETICA, 9, Font.NORMAL);
        Font fontBold   = new Font(Font.HELVETICA, 9, Font.BOLD);

        document.add(new Paragraph("📆 Reporte de CTAS por cobrar en rango de fechas y saldos", fontHeader));
        document.add(new Paragraph("Fechas: " + new SimpleDateFormat("dd/MM/yyyy").format(fechaInicio)
            + " al " + new SimpleDateFormat("dd/MM/yyyy").format(fechaFin), fontNormal));
        document.add(new Paragraph(String.format("Saldos: entre %.2f y %.2f", saldoMinimo, saldoMaximo), fontNormal));
        document.add(new Paragraph("Generado el: " + new SimpleDateFormat("dd/MM/yyyy HH:mm").format(new Date()), fontNormal));
        document.add(Chunk.NEWLINE);

        PdfPTable table = new PdfPTable(7);
        table.setWidthPercentage(100);
        table.setSpacingBefore(10f);
        table.setSpacingAfter(10f);

        String[] columnas = { "Cliente", "Fecha", "Vencimiento", "Factura No.", "Total", "Pagado", "Saldo" };
        for (String col : columnas) {
            PdfPCell cell = new PdfPCell(new Phrase(col, fontBold));
            cell.setBackgroundColor(Color.LIGHT_GRAY);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setPadding(5f);
            table.addCell(cell);
        }

        for (Object[] fila : cuentasConNombre) {
            table.addCell(new Phrase((String) fila[0], fontNormal));
            table.addCell(new Phrase(fila[1].toString().substring(0, 10), fontNormal));
            table.addCell(new Phrase((String) fila[2], fontNormal));
            table.addCell(new Phrase(String.valueOf(fila[3]), fontNormal));
            table.addCell(new Phrase(String.format("%.2f", fila[4]), fontNormal));
            table.addCell(new Phrase(String.format("%.2f", fila[5]), fontNormal));
            table.addCell(new Phrase(String.format("%.2f", fila[6]), fontNormal));
        }

        PdfPCell resumenLabel = new PdfPCell(new Phrase("💰 Total en el rango:", fontBold));
        resumenLabel.setColspan(6);
        resumenLabel.setHorizontalAlignment(Element.ALIGN_RIGHT);
        resumenLabel.setPadding(6f);
        table.addCell(resumenLabel);

        PdfPCell resumenValor = new PdfPCell(new Phrase(String.format("%.2f", totalDeuda), fontBold));
        resumenValor.setBackgroundColor(Color.LIGHT_GRAY);
        resumenValor.setHorizontalAlignment(Element.ALIGN_RIGHT);
        resumenValor.setPadding(6f);
        table.addCell(resumenValor);

        document.add(table);
        document.add(new Paragraph("Sistema Monitux-POS · Reporte generado automáticamente", fontNormal));
        document.close();

        // Mostrar visor directamente desde memoria
        V_Visor_Factura visor = new V_Visor_Factura();
        visor.setDocumentoEnBytes(baos.toByteArray());
        visor.setTitulo("Reporte de cuentas por cobrar");
        visor.mostrar();

      

    } catch (Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(null, "❌ Error al generar el reporte:\n" + ex.getMessage(), "Monitux-POS", JOptionPane.ERROR_MESSAGE);
    } finally {
        if (em != null && em.isOpen()) em.close();
    }
}


public void RPT_CTAP_FYS(int secuencialEmpresa, Date fechaInicio, Date fechaFin, double saldoMinimo, double saldoMaximo) {
    EntityManager em = null;

    try {
        MonituxDBContext.ensureEntityManagerFactoryReady();
        em = MonituxDBContext.getEntityManager();

        List<Cuentas_Pagar> cuentas = em.createQuery(
            "SELECT c FROM Cuentas_Pagar c WHERE c.Secuencial_Empresa = :empresa", Cuentas_Pagar.class)
            .setParameter("empresa", secuencialEmpresa)
            .getResultList();

        DateTimeFormatter parser = new DateTimeFormatterBuilder()
            .parseCaseInsensitive()
            .appendPattern("dd/MM/yyyy hh:mm:ss a")
            .toFormatter(new Locale("es", "ES"));

        ZoneId zona = ZoneId.systemDefault();
        LocalDateTime inicio = fechaInicio.toInstant().atZone(zona).toLocalDate().atStartOfDay();
        LocalDateTime fin = fechaFin.toInstant().atZone(zona).toLocalDate().atTime(23, 59, 59);

        List<Cuentas_Pagar> cuentasFiltradas = cuentas.stream()
            .filter(c -> {
                try {
                    String fechaRaw = c.getFecha().trim()
                        .replace("a. m.", "AM")
                        .replace("p. m.", "PM")
                        .replace("a.m.", "AM")
                        .replace("p.m.", "PM");

                    LocalDateTime fecha = LocalDateTime.parse(fechaRaw, parser);
                    return !fecha.isBefore(inicio) && !fecha.isAfter(fin)
                        && c.getSaldo() >= saldoMinimo && c.getSaldo() <= saldoMaximo;
                } catch (Exception e) {
                    return false;
                }
            })
            .sorted(Comparator.comparing(c -> {
                try {
                    String fechaRaw = c.getFecha().trim()
                        .replace("a. m.", "AM")
                        .replace("p. m.", "PM")
                        .replace("a.m.", "AM")
                        .replace("p.m.", "PM");
                    return LocalDateTime.parse(fechaRaw, parser);
                } catch (Exception e) {
                    return LocalDateTime.MIN;
                }
            }))
            .toList();

        Map<Integer, String> mapaProveedores = em.createQuery("SELECT p FROM Proveedor p", Proveedor.class)
            .getResultStream()
            .collect(Collectors.toMap(Proveedor::getSecuencial, Proveedor::getNombre));

        List<Object[]> cuentasConNombre = cuentasFiltradas.stream()
            .map(c -> new Object[] {
                mapaProveedores.getOrDefault(c.getSecuencial_Proveedor(), "Sin nombre"),
                c.getFecha(),
                c.getFecha_Vencimiento(),
                c.getSecuencial_Factura(),
                c.getTotal(),
                c.getPagado(),
                c.getSaldo()
            })
            .toList();

        double totalDeuda = cuentasConNombre.stream()
            .mapToDouble(c -> (double) c[6])
            .sum();

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        Document document = new Document(PageSize.A4);
        PdfWriter.getInstance(document, baos);
        document.open();

        Font fontHeader = new Font(Font.HELVETICA, 16, Font.BOLD);
        Font fontNormal = new Font(Font.HELVETICA, 9, Font.NORMAL);
        Font fontBold   = new Font(Font.HELVETICA, 9, Font.BOLD);

        document.add(new Paragraph("📄 Reporte de CTAS por pagar en rango de fechas y saldos", fontHeader));
        document.add(new Paragraph("Fechas: " + new SimpleDateFormat("dd/MM/yyyy").format(fechaInicio)
            + " al " + new SimpleDateFormat("dd/MM/yyyy").format(fechaFin), fontNormal));
        document.add(new Paragraph(String.format("Saldos: entre %.2f y %.2f", saldoMinimo, saldoMaximo), fontNormal));
        document.add(new Paragraph("Generado el: " + new SimpleDateFormat("dd/MM/yyyy HH:mm").format(new Date()), fontNormal));
        document.add(Chunk.NEWLINE);

        PdfPTable table = new PdfPTable(7);
        table.setWidthPercentage(100);
        table.setSpacingBefore(10f);
        table.setSpacingAfter(10f);

        String[] columnas = { "Proveedor", "Fecha", "Vencimiento", "Factura No.", "Total", "Pagado", "Saldo" };
        for (String col : columnas) {
            PdfPCell cell = new PdfPCell(new Phrase(col, fontBold));
            cell.setBackgroundColor(Color.LIGHT_GRAY);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setPadding(5f);
            table.addCell(cell);
        }

        for (Object[] fila : cuentasConNombre) {
            table.addCell(new Phrase((String) fila[0], fontNormal));
            table.addCell(new Phrase(fila[1].toString().substring(0, 10), fontNormal));
            table.addCell(new Phrase((String) fila[2], fontNormal));
            table.addCell(new Phrase(String.valueOf(fila[3]), fontNormal));
            table.addCell(new Phrase(String.format("%.2f", fila[4]), fontNormal));
            table.addCell(new Phrase(String.format("%.2f", fila[5]), fontNormal));
            table.addCell(new Phrase(String.format("%.2f", fila[6]), fontNormal));
        }

        PdfPCell resumenLabel = new PdfPCell(new Phrase("💰 Total en el rango:", fontBold));
        resumenLabel.setColspan(6);
        resumenLabel.setHorizontalAlignment(Element.ALIGN_RIGHT);
        resumenLabel.setPadding(6f);
        table.addCell(resumenLabel);

        PdfPCell resumenValor = new PdfPCell(new Phrase(String.format("%.2f", totalDeuda), fontBold));
        resumenValor.setBackgroundColor(Color.LIGHT_GRAY);
        resumenValor.setHorizontalAlignment(Element.ALIGN_RIGHT);
        resumenValor.setPadding(6f);
        table.addCell(resumenValor);

        document.add(table);
        document.add(new Paragraph("Sistema Monitux-POS · Reporte generado automáticamente", fontNormal));
        document.close();

        V_Visor_Factura visor = new V_Visor_Factura();
        visor.setDocumentoEnBytes(baos.toByteArray());
        visor.setTitulo("Reporte de cuentas por pagar");
        visor.mostrar();

       

    } catch (Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(null, "❌ Error al generar el reporte:\n" + ex.getMessage(), "Monitux-POS", JOptionPane.ERROR_MESSAGE);
    } finally {
        if (em != null && em.isOpen()) em.close();
    }
}


public void RPT_CTAC_Vencidas(int secuencialEmpresa) {
    EntityManager em = null;

    try {
        MonituxDBContext.ensureEntityManagerFactoryReady();
        em = MonituxDBContext.getEntityManager();

        List<Cuentas_Cobrar> cuentas = em.createQuery(
            "SELECT c FROM Cuentas_Cobrar c WHERE c.Secuencial_Empresa = :empresa", Cuentas_Cobrar.class)
            .setParameter("empresa", secuencialEmpresa)
            .getResultList();

        DateTimeFormatter formatoVencimiento = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        DateTimeFormatter formatoFecha = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
        LocalDate hoy = LocalDate.now();

        List<Cuentas_Cobrar> cuentasVencidas = cuentas.stream()
            .filter(c -> {
                try {
                    LocalDate venc = LocalDate.parse(c.getFecha_Vencimiento().trim(), formatoVencimiento);
                    return venc.isBefore(hoy) && c.getSaldo() > 0;
                } catch (Exception e) {
                    return false;
                }
            })
            .sorted(Comparator.comparing(c -> {
                try {
                    return LocalDate.parse(c.getFecha_Vencimiento().trim(), formatoVencimiento);
                } catch (Exception e) {
                    return LocalDate.MIN;
                }
            }))
            .toList();

        Map<Integer, String> mapaClientes = em.createQuery("SELECT c FROM Cliente c", Cliente.class)
            .getResultStream()
            .collect(Collectors.toMap(Cliente::getSecuencial, Cliente::getNombre));

        List<Object[]> cuentasConNombre = cuentasVencidas.stream()
            .map(c -> new Object[] {
                mapaClientes.getOrDefault(c.getSecuencial_Cliente(), "Sin nombre"),
                c.getFecha(),
                c.getFecha_Vencimiento(),
                c.getSecuencial_Factura(),
                c.getTotal(),
                c.getPagado(),
                c.getSaldo()
            })
            .toList();

        double totalPendiente = cuentasConNombre.stream()
            .mapToDouble(c -> (double) c[6])
            .sum();

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        Document document = new Document(PageSize.A4);
        PdfWriter.getInstance(document, baos);
        document.open();

        Font fontHeader = new Font(Font.HELVETICA, 16, Font.BOLD);
        Font fontNormal = new Font(Font.HELVETICA, 9, Font.NORMAL);
        Font fontBold   = new Font(Font.HELVETICA, 9, Font.BOLD);

        document.add(new Paragraph("📅 Reporte de cuentas por cobrar vencidas", fontHeader));
        document.add(new Paragraph("Generado el: " + new SimpleDateFormat("dd/MM/yyyy HH:mm").format(new Date()), fontNormal));
        document.add(Chunk.NEWLINE);

        PdfPTable table = new PdfPTable(7);
        table.setWidthPercentage(100);
        table.setSpacingBefore(10f);
        table.setSpacingAfter(10f);

        String[] columnas = { "Cliente", "Fecha", "Vencimiento", "Factura No.", "Total", "Pagado", "Saldo" };
        for (String col : columnas) {
            PdfPCell cell = new PdfPCell(new Phrase(col, fontBold));
            cell.setBackgroundColor(Color.PINK);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setPadding(5f);
            table.addCell(cell);
        }

     for (Object[] fila : cuentasConNombre) {
    table.addCell(new Phrase((String) fila[0], fontNormal));

    String fechaRaw = ((String) fila[1]).trim();
    String soloFecha = fechaRaw.contains(" ") ? fechaRaw.split(" ")[0] : fechaRaw;

    table.addCell(new Phrase(soloFecha, fontNormal));
    table.addCell(new Phrase((String) fila[2], fontNormal));
    table.addCell(new Phrase(String.valueOf(fila[3]), fontNormal));
    table.addCell(new Phrase(String.format("%.2f", fila[4]), fontNormal));
    table.addCell(new Phrase(String.format("%.2f", fila[5]), fontNormal));
    table.addCell(new Phrase(String.format("%.2f", fila[6]), fontNormal));
}

        PdfPCell resumenLabel = new PdfPCell(new Phrase("🔻 Total vencido acumulado:", fontBold));
        resumenLabel.setColspan(6);
        resumenLabel.setHorizontalAlignment(Element.ALIGN_RIGHT);
        resumenLabel.setPadding(6f);
        table.addCell(resumenLabel);

        PdfPCell resumenValor = new PdfPCell(new Phrase(String.format("%.2f", totalPendiente), fontBold));
        resumenValor.setBackgroundColor(Color.PINK);
        resumenValor.setHorizontalAlignment(Element.ALIGN_RIGHT);
        resumenValor.setPadding(6f);
        table.addCell(resumenValor);

        document.add(table);
        document.add(new Paragraph("Sistema Monitux-POS · Reporte generado automáticamente", fontNormal));
        document.close();

        V_Visor_Factura visor = new V_Visor_Factura();
        visor.setDocumentoEnBytes(baos.toByteArray());
        visor.setTitulo("Reporte de cuentas vencidas");
        visor.mostrar();

      

    } catch (Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(null, "❌ Error al generar el reporte:\n" + ex.getMessage(), "Monitux-POS", JOptionPane.ERROR_MESSAGE);
    } finally {
        if (em != null && em.isOpen()) em.close();
    }
}

public void RPT_CTAP_Vencidas(int secuencialEmpresa) {
    EntityManager em = null;

    try {
        MonituxDBContext.ensureEntityManagerFactoryReady();
        em = MonituxDBContext.getEntityManager();

        List<Cuentas_Pagar> cuentas = em.createQuery(
            "SELECT c FROM Cuentas_Pagar c WHERE c.Secuencial_Empresa = :empresa", Cuentas_Pagar.class)
            .setParameter("empresa", secuencialEmpresa)
            .getResultList();

        DateTimeFormatter formatoVencimiento = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        LocalDate hoy = LocalDate.now();

        List<Cuentas_Pagar> cuentasVencidas = cuentas.stream()
            .filter(c -> {
                try {
                    LocalDate venc = LocalDate.parse(c.getFecha_Vencimiento().trim(), formatoVencimiento);
                    return venc.isBefore(hoy) && c.getSaldo() > 0;
                } catch (Exception e) {
                    return false;
                }
            })
            .sorted(Comparator.comparing(c -> {
                try {
                    return LocalDate.parse(c.getFecha_Vencimiento().trim(), formatoVencimiento);
                } catch (Exception e) {
                    return LocalDate.MIN;
                }
            }))
            .toList();

        Map<Integer, String> mapaProveedores = em.createQuery("SELECT p FROM Proveedor p", Proveedor.class)
            .getResultStream()
            .collect(Collectors.toMap(Proveedor::getSecuencial, Proveedor::getNombre));

        List<Object[]> cuentasConNombre = cuentasVencidas.stream()
            .map(c -> new Object[] {
                mapaProveedores.getOrDefault(c.getSecuencial_Proveedor(), "Sin nombre"),
                c.getFecha(),
                c.getFecha_Vencimiento(),
                c.getSecuencial_Factura(),
                c.getTotal(),
                c.getPagado(),
                c.getSaldo()
            })
            .toList();

        double totalPendiente = cuentasConNombre.stream()
            .mapToDouble(c -> (double) c[6])
            .sum();

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        Document document = new Document(PageSize.A4);
        PdfWriter.getInstance(document, baos);
        document.open();

        Font fontHeader = new Font(Font.HELVETICA, 16, Font.BOLD);
        Font fontNormal = new Font(Font.HELVETICA, 9, Font.NORMAL);
        Font fontBold   = new Font(Font.HELVETICA, 9, Font.BOLD);

        document.add(new Paragraph("📅 Reporte de cuentas por pagar vencidas", fontHeader));
        document.add(new Paragraph("Generado el: " + new SimpleDateFormat("dd/MM/yyyy HH:mm").format(new Date()), fontNormal));
        document.add(Chunk.NEWLINE);

        PdfPTable table = new PdfPTable(7);
        table.setWidthPercentage(100);
        table.setSpacingBefore(10f);
        table.setSpacingAfter(10f);

        String[] columnas = { "Proveedor", "Fecha", "Vencimiento", "Factura No.", "Total", "Pagado", "Saldo" };
        for (String col : columnas) {
            PdfPCell cell = new PdfPCell(new Phrase(col, fontBold));
            cell.setBackgroundColor(Color.PINK);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setPadding(5f);
            table.addCell(cell);
        }

        for (Object[] fila : cuentasConNombre) {
            table.addCell(new Phrase((String) fila[0], fontNormal));

            String fechaRaw = ((String) fila[1]).trim();
            String soloFecha = fechaRaw.contains(" ") ? fechaRaw.split(" ")[0] : fechaRaw;

            table.addCell(new Phrase(soloFecha, fontNormal));
            table.addCell(new Phrase((String) fila[2], fontNormal));
            table.addCell(new Phrase(String.valueOf(fila[3]), fontNormal));
            table.addCell(new Phrase(String.format("%.2f", fila[4]), fontNormal));
            table.addCell(new Phrase(String.format("%.2f", fila[5]), fontNormal));
            table.addCell(new Phrase(String.format("%.2f", fila[6]), fontNormal));
        }

        PdfPCell resumenLabel = new PdfPCell(new Phrase("🔻 Total vencido acumulado:", fontBold));
        resumenLabel.setColspan(6);
        resumenLabel.setHorizontalAlignment(Element.ALIGN_RIGHT);
        resumenLabel.setPadding(6f);
        table.addCell(resumenLabel);

        PdfPCell resumenValor = new PdfPCell(new Phrase(String.format("%.2f", totalPendiente), fontBold));
        resumenValor.setBackgroundColor(Color.PINK);
        resumenValor.setHorizontalAlignment(Element.ALIGN_RIGHT);
        resumenValor.setPadding(6f);
        table.addCell(resumenValor);

        document.add(table);
        document.add(new Paragraph("Sistema Monitux-POS · Reporte generado automáticamente", fontNormal));
        document.close();

        V_Visor_Factura visor = new V_Visor_Factura();
        visor.setDocumentoEnBytes(baos.toByteArray());
        visor.setTitulo("Reporte de cuentas por pagar vencidas");
        visor.mostrar();

    } catch (Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(null, "❌ Error al generar el reporte:\n" + ex.getMessage(), "Monitux-POS", JOptionPane.ERROR_MESSAGE);
    } finally {
        if (em != null && em.isOpen()) em.close();
    }
}


public void RPT_CTAC_RangoFechas(int secuencialEmpresa, Date fechaInicio, Date fechaFin) {
    EntityManager em = null;

    try {
        MonituxDBContext.ensureEntityManagerFactoryReady();
        em = MonituxDBContext.getEntityManager();

        List<Cuentas_Cobrar> cuentas = em.createQuery(
            "SELECT c FROM Cuentas_Cobrar c WHERE c.Secuencial_Empresa = :empresa", Cuentas_Cobrar.class)
            .setParameter("empresa", secuencialEmpresa)
            .getResultList();

        DateTimeFormatter formatoFecha = new DateTimeFormatterBuilder()
            .parseCaseInsensitive()
            .appendPattern("dd/MM/yyyy hh:mm:ss a")
            .toFormatter(new Locale("es", "ES"));

        ZoneId zona = ZoneId.systemDefault();
        LocalDateTime inicio = fechaInicio.toInstant().atZone(zona).toLocalDate().atStartOfDay();
        LocalDateTime fin = fechaFin.toInstant().atZone(zona).toLocalDate().atTime(23, 59, 59);

        List<Cuentas_Cobrar> cuentasFiltradas = cuentas.stream()
            .filter(c -> {
                try {
                    String fechaRaw = c.getFecha().trim()
                        .replace("a. m.", "AM")
                        .replace("p. m.", "PM")
                        .replace("a.m.", "AM")
                        .replace("p.m.", "PM");

                    LocalDateTime fecha = LocalDateTime.parse(fechaRaw, formatoFecha);
                    return !fecha.isBefore(inicio) && !fecha.isAfter(fin);
                } catch (Exception e) {
                    return false;
                }
            })
            .sorted(Comparator.comparing(c -> {
                try {
                    String fechaRaw = c.getFecha().trim()
                        .replace("a. m.", "AM")
                        .replace("p. m.", "PM")
                        .replace("a.m.", "AM")
                        .replace("p.m.", "PM");

                    return LocalDateTime.parse(fechaRaw, formatoFecha);
                } catch (Exception e) {
                    return LocalDateTime.MIN;
                }
            }))
            .toList();

        Map<Integer, String> mapaClientes = em.createQuery("SELECT c FROM Cliente c", Cliente.class)
            .getResultStream()
            .collect(Collectors.toMap(Cliente::getSecuencial, Cliente::getNombre));

        List<Object[]> cuentasConNombre = cuentasFiltradas.stream()
            .map(c -> new Object[] {
                mapaClientes.getOrDefault(c.getSecuencial_Cliente(), "Sin nombre"),
                c.getFecha(),
                c.getFecha_Vencimiento(),
                c.getSecuencial_Factura(),
                c.getTotal(),
                c.getPagado(),
                c.getSaldo()
            })
            .toList();

        double totalDeuda = cuentasConNombre.stream()
            .mapToDouble(c -> (double) c[6])
            .sum();

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        Document document = new Document(PageSize.A4);
        PdfWriter.getInstance(document, baos);
        document.open();

        Font fontHeader = new Font(Font.HELVETICA, 16, Font.BOLD);
        Font fontNormal = new Font(Font.HELVETICA, 9, Font.NORMAL);
        Font fontBold   = new Font(Font.HELVETICA, 9, Font.BOLD);

        document.add(new Paragraph("📆 Reporte de cuentas por cobrar en rango de fechas", fontHeader));
        document.add(new Paragraph("Desde: " + new SimpleDateFormat("dd/MM/yyyy").format(fechaInicio)
            + "  Hasta: " + new SimpleDateFormat("dd/MM/yyyy").format(fechaFin), fontNormal));
        document.add(new Paragraph("Generado el: " + new SimpleDateFormat("dd/MM/yyyy HH:mm").format(new Date()), fontNormal));
        document.add(Chunk.NEWLINE);

        PdfPTable table = new PdfPTable(7);
        table.setWidthPercentage(100);
        table.setSpacingBefore(10f);
        table.setSpacingAfter(10f);

        String[] columnas = { "Cliente", "Fecha", "Vencimiento", "Factura No.", "Total", "Pagado", "Saldo" };
        for (String col : columnas) {
            PdfPCell cell = new PdfPCell(new Phrase(col, fontBold));
            cell.setBackgroundColor(Color.LIGHT_GRAY);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setPadding(5f);
            table.addCell(cell);
        }

        for (Object[] fila : cuentasConNombre) {
            table.addCell(new Phrase((String) fila[0], fontNormal));

            String fechaRaw = ((String) fila[1]).trim();
            String soloFecha = fechaRaw.contains(" ") ? fechaRaw.split(" ")[0] : fechaRaw;

            table.addCell(new Phrase(soloFecha, fontNormal));
            table.addCell(new Phrase((String) fila[2], fontNormal));
            table.addCell(new Phrase(String.valueOf(fila[3]), fontNormal));
            table.addCell(new Phrase(String.format("%.2f", fila[4]), fontNormal));
            table.addCell(new Phrase(String.format("%.2f", fila[5]), fontNormal));
            table.addCell(new Phrase(String.format("%.2f", fila[6]), fontNormal));
        }

        PdfPCell resumenLabel = new PdfPCell(new Phrase("💰 Total en el rango:", fontBold));
        resumenLabel.setColspan(6);
        resumenLabel.setHorizontalAlignment(Element.ALIGN_RIGHT);
        resumenLabel.setPadding(6f);
        table.addCell(resumenLabel);

        PdfPCell resumenValor = new PdfPCell(new Phrase(String.format("%.2f", totalDeuda), fontBold));
        resumenValor.setBackgroundColor(Color.LIGHT_GRAY);
        resumenValor.setHorizontalAlignment(Element.ALIGN_RIGHT);
        resumenValor.setPadding(6f);
        table.addCell(resumenValor);

        document.add(table);
        document.add(new Paragraph("Sistema Monitux-POS · Reporte generado automáticamente", fontNormal));
        document.close();

        V_Visor_Factura visor = new V_Visor_Factura();
        visor.setDocumentoEnBytes(baos.toByteArray());
        visor.setTitulo("Reporte de cuentas por cobrar en rango de fechas");
        visor.mostrar();

       

    } catch (Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(null, "❌ Error al generar el reporte:\n" + ex.getMessage(), "Monitux-POS", JOptionPane.ERROR_MESSAGE);
    } finally {
        if (em != null && em.isOpen()) em.close();
    }
}

public void RPT_CTAP_RangoFechas(int secuencialEmpresa, Date fechaInicio, Date fechaFin) {
    EntityManager em = null;

    try {
        MonituxDBContext.ensureEntityManagerFactoryReady();
        em = MonituxDBContext.getEntityManager();

        List<Cuentas_Pagar> cuentas = em.createQuery(
            "SELECT c FROM Cuentas_Pagar c WHERE c.Secuencial_Empresa = :empresa", Cuentas_Pagar.class)
            .setParameter("empresa", secuencialEmpresa)
            .getResultList();

        DateTimeFormatter formatoFecha = new DateTimeFormatterBuilder()
            .parseCaseInsensitive()
            .appendPattern("dd/MM/yyyy hh:mm:ss a")
            .toFormatter(new Locale("es", "ES"));

        ZoneId zona = ZoneId.systemDefault();
        LocalDateTime inicio = fechaInicio.toInstant().atZone(zona).toLocalDate().atStartOfDay();
        LocalDateTime fin = fechaFin.toInstant().atZone(zona).toLocalDate().atTime(23, 59, 59);

        List<Cuentas_Pagar> cuentasFiltradas = cuentas.stream()
            .filter(c -> {
                try {
                    String fechaRaw = c.getFecha().trim()
                        .replace("a. m.", "AM")
                        .replace("p. m.", "PM")
                        .replace("a.m.", "AM")
                        .replace("p.m.", "PM");

                    LocalDateTime fecha = LocalDateTime.parse(fechaRaw, formatoFecha);
                    return !fecha.isBefore(inicio) && !fecha.isAfter(fin);
                } catch (Exception e) {
                    return false;
                }
            })
            .sorted(Comparator.comparing(c -> {
                try {
                    String fechaRaw = c.getFecha().trim()
                        .replace("a. m.", "AM")
                        .replace("p. m.", "PM")
                        .replace("a.m.", "AM")
                        .replace("p.m.", "PM");

                    return LocalDateTime.parse(fechaRaw, formatoFecha);
                } catch (Exception e) {
                    return LocalDateTime.MIN;
                }
            }))
            .toList();

        Map<Integer, String> mapaProveedores = em.createQuery("SELECT p FROM Proveedor p", Proveedor.class)
            .getResultStream()
            .collect(Collectors.toMap(Proveedor::getSecuencial, Proveedor::getNombre));

        List<Object[]> cuentasConNombre = cuentasFiltradas.stream()
            .map(c -> new Object[] {
                mapaProveedores.getOrDefault(c.getSecuencial_Proveedor(), "Sin nombre"),
                c.getFecha(),
                c.getFecha_Vencimiento(),
                c.getSecuencial_Factura(),
                c.getTotal(),
                c.getPagado(),
                c.getSaldo()
            })
            .toList();

        double totalDeuda = cuentasConNombre.stream()
            .mapToDouble(c -> (double) c[6])
            .sum();

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        Document document = new Document(PageSize.A4);
        PdfWriter.getInstance(document, baos);
        document.open();

        Font fontHeader = new Font(Font.HELVETICA, 16, Font.BOLD);
        Font fontNormal = new Font(Font.HELVETICA, 9, Font.NORMAL);
        Font fontBold   = new Font(Font.HELVETICA, 9, Font.BOLD);

        document.add(new Paragraph("📆 Reporte de cuentas por pagar en rango de fechas", fontHeader));
        document.add(new Paragraph("Desde: " + new SimpleDateFormat("dd/MM/yyyy").format(fechaInicio)
            + "  Hasta: " + new SimpleDateFormat("dd/MM/yyyy").format(fechaFin), fontNormal));
        document.add(new Paragraph("Generado el: " + new SimpleDateFormat("dd/MM/yyyy HH:mm").format(new Date()), fontNormal));
        document.add(Chunk.NEWLINE);

        PdfPTable table = new PdfPTable(7);
        table.setWidthPercentage(100);
        table.setSpacingBefore(10f);
        table.setSpacingAfter(10f);

        String[] columnas = { "Proveedor", "Fecha", "Vencimiento", "Factura No.", "Total", "Pagado", "Saldo" };
        for (String col : columnas) {
            PdfPCell cell = new PdfPCell(new Phrase(col, fontBold));
            cell.setBackgroundColor(Color.LIGHT_GRAY);
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setPadding(5f);
            table.addCell(cell);
        }

        for (Object[] fila : cuentasConNombre) {
            table.addCell(new Phrase((String) fila[0], fontNormal));

            String fechaRaw = ((String) fila[1]).trim();
            String soloFecha = fechaRaw.contains(" ") ? fechaRaw.split(" ")[0] : fechaRaw;

            table.addCell(new Phrase(soloFecha, fontNormal));
            table.addCell(new Phrase((String) fila[2], fontNormal));
            table.addCell(new Phrase(String.valueOf(fila[3]), fontNormal));
            table.addCell(new Phrase(String.format("%.2f", fila[4]), fontNormal));
            table.addCell(new Phrase(String.format("%.2f", fila[5]), fontNormal));
            table.addCell(new Phrase(String.format("%.2f", fila[6]), fontNormal));
        }

        PdfPCell resumenLabel = new PdfPCell(new Phrase("💰 Total en el rango:", fontBold));
        resumenLabel.setColspan(6);
        resumenLabel.setHorizontalAlignment(Element.ALIGN_RIGHT);
        resumenLabel.setPadding(6f);
        table.addCell(resumenLabel);

        PdfPCell resumenValor = new PdfPCell(new Phrase(String.format("%.2f", totalDeuda), fontBold));
        resumenValor.setBackgroundColor(Color.LIGHT_GRAY);
        resumenValor.setHorizontalAlignment(Element.ALIGN_RIGHT);
        resumenValor.setPadding(6f);
        table.addCell(resumenValor);

        document.add(table);
        document.add(new Paragraph("Sistema Monitux-POS · Reporte generado automáticamente", fontNormal));
        document.close();

        V_Visor_Factura visor = new V_Visor_Factura();
        visor.setDocumentoEnBytes(baos.toByteArray());
        visor.setTitulo("Reporte de cuentas por pagar en rango de fechas");
        visor.mostrar();

       

    } catch (Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(null, "❌ Error al generar el reporte:\n" + ex.getMessage(), "Monitux-POS", JOptionPane.ERROR_MESSAGE);
    } finally {
        if (em != null && em.isOpen()) em.close();
    }
}






    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.github.lgooddatepicker.components.DatePicker datePicker1;
    private com.github.lgooddatepicker.components.DatePicker datePicker2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables
}
